<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>About me</title>
    <url>/2022/11/01/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
    <content><![CDATA[<p>一名硬件和软件的在读大学生，目前正在朝AI的方向努力学习。</p>
<p>毕业于桂林电子科技大学-Guilin University Of Eletronic Technology(GUET)和爱尔兰东南理工大学-South East Technological University(SETU)，分别是通信工程和电子系统的双学位。</p>
<p>技能：</p>
<ul>
<li>熟练使用C&#x2F;C++</li>
<li>熟练使用python建立数据库和训练模型(Tensorflow等)过程和制作模型</li>
<li>熟练使用System Verilog，使用FPGA制作各种功能</li>
<li>熟练绘画PCB图像。</li>
<li>熟练制作和使用各种电子功率放大器。</li>
<li>熟练绘画电路图。</li>
<li>熟练使用HTML，CSS，JavaScript制作网站</li>
<li>熟练使用焊接笔焊接各种电路。</li>
<li>熟练使用微软全家桶。</li>
<li>熟练使用VS等Editor IDE。</li>
<li>熟练使用Rapberry pi等微型电脑。</li>
<li>熟练使用C#。</li>
</ul>
<p>语言：</p>
<p>中文，英文</p>
<p>交际能力：</p>
<p>友好相处，认真负责。</p>
]]></content>
  </entry>
  <entry>
    <title>CNN-Handout</title>
    <url>/2022/09/19/CNN%20project/CNN%20handout/</url>
    <content><![CDATA[<h3 id="Project-file"><a href="#Project-file" class="headerlink" title="Project file"></a><a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/main/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/ComparisonsAndOptimisationsOfCAccelerators.pdf">Project file</a></h3><h3 id="Gantt-Chart"><a href="#Gantt-Chart" class="headerlink" title="Gantt Chart"></a><a href="https://instituteoftechnol663-my.sharepoint.com/:x:/r/personal/c00278687_itcarlow_ie/Documents/AIproject.xlsx?d=wff882872210b49878b221912150486b9&csf=1&web=1&e=ZcmeLY">Gantt Chart</a></h3><h2 id="CNN–CHINA"><a href="#CNN–CHINA" class="headerlink" title="CNN–CHINA"></a>CNN–CHINA</h2><ul>
<li><a href="https://blog.csdn.net/v_JULY_v/article/details/51812459?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166362693416800182789927%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=166362693416800182789927&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-2-51812459-null-null.142%5Ev47%5Enew_blog_pos_by_title,201%5Ev3%5Econtrol_1&utm_term=cnn%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&spm=1018.2226.3001.4187">CNN卷积神经网络中文版介绍<strong>CSDN</strong></a></li>
<li><a href="https://www.bilibili.com/video/BV1bz4y1U7pt/?spm_id_from=333.788&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">卷积神经网络可视化模型介绍</a></li>
<li><a href="https://www.bilibili.com/video/BV1x44y1P7s2/?spm_id_from=333.788&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">卷积神经网络图解</a></li>
<li><a href="https://blog.csdn.net/chiyiwei7384/article/details/85062626?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166362815816782391823854%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=166362815816782391823854&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-3-85062626-null-null.142%5Ev47%5Enew_blog_pos_by_title,201%5Ev3%5Econtrol_1&utm_term=%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Cpython&spm=1018.2226.3001.4187">卷积神经网络python实现</a></li>
<li><a href="https://www.bilibili.com/video/BV1XW4y1a7f4/?spm_id_from=333.337.search-card.all.click&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">YOLO_自学网站</a></li>
<li><a href="https://blog.csdn.net/qfdzwly/article/details/107647003">Mask-Rcnn的使用教程1</a></li>
<li><a href="https://www.bilibili.com/video/BV1Lx411j7ws/?spm_id_from=333.337.search-card.all.click&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">tensorflow_学习教程</a></li>
<li><a href="https://www.bilibili.com/video/BV1GS4y1Y7Qb/?spm_id_from=333.337.search-card.all.click&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">Colab 学习教程</a></li>
<li><a href="https://blog.csdn.net/wjinjie/article/details/107509243?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166481719516800192226763%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166481719516800192226763&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-107509243-null-null.142%5Ev51%5Epc_rank_34_1,201%5Ev3%5Econtrol_1&utm_term=yolo&spm=1018.2226.3001.4187">关于yolo的详细介绍CSDN</a></li>
<li><a href="https://blog.csdn.net/m0_53392188/article/details/119334634?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166551382016782391831670%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166551382016782391831670&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-119334634-null-null.142%5Ev52%5Epc_rank_34_1,201%5Ev3%5Econtrol_1&utm_term=yolov5%E4%BF%9D%E5%A7%86%E7%BA%A7&spm=1018.2226.3001.4187">yolov5的直接操作</a></li>
</ul>
<h2 id="CNN–ENGLISH"><a href="#CNN–ENGLISH" class="headerlink" title="CNN–ENGLISH"></a><a href="https://scholar.google.com/scholar?q=Convolutional+neural+networks&hl=zh-CN&as_sdt=0&as_vis=1&oi=scholart">CNN–ENGLISH</a></h2><ul>
<li><p><a href="https://arxiv.org/abs/1511.08458">An Introduction to Convolutional Neural Networks</a></p>
</li>
<li><p><a href="https://www.sciencedirect.com/science/article/pii/S0031320317304120?casa_token=lAnMM03Q1n8AAAAA:FGrjo-SHYc86w5yLIPPWBULWcXK3mzeMnuWPKTH6bCPJmiXKFc5Po3hBIJqWc7_awUaqjdQ">Recent advances in convolutional neural networks</a></p>
</li>
<li><p><a href="https://books.google.ie/books?hl=zh-CN&lr=&id=bOlODwAAQBAJ&oi=fnd&pg=PP1&dq=Convolutional+neural+networks+python&ots=jL5Zl-gLJ5&sig=wLaBIc3Dh_ic1PE4vDH9qL0jQ7k&redir_esc=y#v=onepage&q=Convolutional%20neural%20networks%20python&f=false">Pratical CNN–<strong>book</strong></a></p>
</li>
<li><p><a href="https://dl.acm.org/doi/abs/10.1145/2733373.2807412">Convolutional Neural Networks for MATLAB</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=WvoLTXIjBYU&t=10s">Convolutional Neural Networks - Deep Learning basics with Python, TensorFlow and Keras p.3–<strong>Youtube</strong></a></p>
</li>
<li><p><a href="https://colab.research.google.com/">Google Colab</a></p>
</li>
<li><p><a href="https://ieeexplore.ieee.org/abstract/document/8756165">Dilated CNN-Model</a></p>
</li>
<li><p><a href="https://link.springer.com/chapter/10.1007/978-3-319-97982-3_16">A Study on CNN Transfer Learning for Image Classification</a></p>
</li>
<li><p><a href="https://playground.tensorflow.org/#activation=tanh&batchSize=10&dataset=circle&regDataset=reg-plane&learningRate=0.03&regularizationRate=0&noise=0&networkShape=4,2&seed=0.14730&showTestData=false&discretize=false&percTrainData=50&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification&initZero=false&hideText=false">playground.tensorflow</a></p>
</li>
<li><p><a href="https://www.mdpi.com/2072-4292/13/22/4712">Review of Image Classification Algorithms Based on Convolutional Neural Networks</a></p>
</li>
<li><p><a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/0d56821a5d3fd086af05a7a28bb4e2a3bafc4208/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/thesisPrintedJamesGarland.pdf">James Garland research project</a></p>
</li>
<li><p><a href="https://github.com/google-research/tuning_playbook">Deep Learning Turning Playing</a></p>
</li>
<li><p><a href="https://blog.roboflow.com/mean-average-precision/">Mean Average Precision</a></p>
</li>
<li><p><a href="http://neuralnetworksanddeeplearning.com/index.html">Neural Networks and Deep Learning</a></p>
</li>
</ul>
<h2 id="Platform-OFFICE"><a href="#Platform-OFFICE" class="headerlink" title="Platform-OFFICE"></a>Platform-OFFICE</h2><ul>
<li><a href="https://coral.ai/products/">Google Coral</a> </li>
<li><a href="https://developer.nvidia.com/embedded/jetson-nano-developer-kit">NVIDIA ® Jetson Nano</a></li>
<li><a href="https://www.raspberrypi.com/products/raspberry-pi-4-model-b/">Raspberry Pi 4</a></li>
<li><a href="https://www.intel.com/content/www/us/en/developer/tools/neural-compute-stick/overview.html">Intel® Neural Compute Stick 2 (Intel® NCS2)</a></li>
</ul>
<h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><p>I need to use tensor flow on coral.</p>
<p>Linux</p>
<p>Tell them what you are going to</p>
<p>Tell then what you told___</p>
<p>Tell them:</p>
<p>Abstract : what you doing on your project,- v. High level summary.</p>
<p>Introduction: more detail</p>
<p>Literature review </p>
<p>Methodlogy: - how you do it, how you explain.</p>
<p>Results: table date, graphs, explanation</p>
<p>can share each one results</p>
<p>Conclusion:</p>
<p>Reference : side every thing.</p>
<p>40 to 20 000</p>
<p>API reference.</p>
<p>Chrisme preview.</p>
]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>CNN project daily note</title>
    <url>/2022/11/06/CNN%20project/CNN-project-daily-note/</url>
    <content><![CDATA[<h1 id="25-x2F-09-x2F-2022"><a href="#25-x2F-09-x2F-2022" class="headerlink" title="25&#x2F;09&#x2F;2022"></a>25&#x2F;09&#x2F;2022</h1><p>拿到了大四的项目，这个项目具体要干什么呢</p>
<p>我们需要学习CNN model，然后用这个model进行图像的深度学习，最后在不同的平台上进行优化和测试</p>
<p>我们需要得到这个模型在不同平台的工作效率，其包括GPU或CPU需用率，速度，准确率</p>
<p><a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/main/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/ComparisonsAndOptimisationsOfCAccelerators.pdf">具体项目要求</a></p>
<h2 id="我们需要在四个平台进行测试"><a href="#我们需要在四个平台进行测试" class="headerlink" title="我们需要在四个平台进行测试"></a>我们需要在四个平台进行测试</h2><ul>
<li>Google Coral</li>
<li>Nvidia Jetson Nano</li>
<li>Raspberry pi 4</li>
<li>Intel NCS development board</li>
</ul>
<h2 id="这个星期的任务或目标"><a href="#这个星期的任务或目标" class="headerlink" title="这个星期的任务或目标"></a>这个星期的任务或目标</h2><ul>
<li><p>去了解什么是CNN model</p>
</li>
<li><p>什么是人工智能AI</p>
</li>
<li><p>图像识别的一些实例</p>
</li>
<li><p>CNN 有多少种类的模型</p>
</li>
<li><p>如何学习CNN model</p>
</li>
</ul>
<h1 id="02-x2F-10-x2F-2022"><a href="#02-x2F-10-x2F-2022" class="headerlink" title="02&#x2F;10&#x2F;2022"></a>02&#x2F;10&#x2F;2022</h1><p>通过网络，我们已经知道了什么是CNN model，并知道了其中的原理</p>
<p>老师给我们看了他们的论文<a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/0d56821a5d3fd086af05a7a28bb4e2a3bafc4208/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/thesisPrintedJamesGarland.pdf">James 的论文</a>, 虽然看不懂</p>
<h1 id="26-x2F-10-x2F-2022"><a href="#26-x2F-10-x2F-2022" class="headerlink" title="26&#x2F;10&#x2F;2022"></a>26&#x2F;10&#x2F;2022</h1><p>给了我们coral加速器和RPI（树莓派）</p>
<h1 id="09-x2F-11-x2F-2022"><a href="#09-x2F-11-x2F-2022" class="headerlink" title="09&#x2F;11&#x2F;2022"></a>09&#x2F;11&#x2F;2022</h1><p>我们知道了我们需要在不同平台到底干嘛，例如我手上有coral加速器，我需要pc+coral或RPI +coral来加速和计算准确率</p>
<p><img src="https://i.imgur.com/hsVZ8YE.jpg" alt="09:11:2022"></p>
<h1 id="30-x2F-11-x2F-22"><a href="#30-x2F-11-x2F-22" class="headerlink" title="30&#x2F;11&#x2F;22"></a>30&#x2F;11&#x2F;22</h1><ul>
<li><p><input disabled="" type="checkbox"> 
Compare PC(Colab) inference speed in same dataset and models, diferent CPU or GPU or TPU.</p>
</li>
<li><p><input disabled="" type="checkbox"> 
Compare different traning speed in TPU ,GPU and CPU</p>
</li>
<li><p><input disabled="" type="checkbox"> 
Compare accuracy in different platform.</p>
</li>
<li><p><input disabled="" type="checkbox"> 
Compare diferent epoch number of the accuracy on the model.</p>
</li>
</ul>
<p><img src="https://i.imgur.com/Ai2McSx.jpg" alt="image-20221130153432123"></p>
<h1 id="7-x2F-12-x2F-22"><a href="#7-x2F-12-x2F-22" class="headerlink" title="7&#x2F;12&#x2F;22"></a>7&#x2F;12&#x2F;22</h1><h2 id="Presentation"><a href="#Presentation" class="headerlink" title="Presentation"></a>Presentation</h2><p>10min each one person</p>
<h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h3><ol>
<li><p>Introduction </p>
</li>
<li><p>information about ML</p>
</li>
<li><p>Detail</p>
</li>
</ol>
<blockquote>
<ul>
<li><p>embaded system</p>
</li>
<li><p>what I using</p>
<blockquote>
<ul>
<li><p>Dataset</p>
</li>
<li><p>model</p>
</li>
<li><p>CNN detail - what you use in CNN</p>
</li>
<li><p>Gant chart</p>
</li>
<li><p>flow chart</p>
</li>
<li><p>code just important part.</p>
</li>
<li></li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<ol start="4">
<li><p>show the result or example</p>
</li>
<li><p>Next target</p>
</li>
</ol>
<p>Past question</p>
<blockquote>
<p>Good introduction</p>
<p>let they to understand what is ML </p>
<p>why you do that.</p>
<p>Daren: discraibe what the model is, how do you do it , what the dataset used.</p>
<p>techinique question.</p>
</blockquote>
<ul>
<li>Know the model, Know the dataset, which mean you need to Know every you show your source where are you from.</li>
<li>演讲自己做的内容，把自己的项目做得更有挑战性，同时也要让评委知道你做的什么，所以语言解释很重要。</li>
<li>要清楚你自己模型的制作过程。</li>
<li>you can show what you do in your slide.</li>
</ul>
<p>Not too much test on your slide.</p>
<p>Make picture more big.</p>
<p>联动slide，点击一个讲一个，不要放在一起。</p>
<p>最后可以贴出你做了什么。what you have been down.</p>
<p>you can put a video to show how you operate the function. Well, just for summer.</p>
<h1 id="23-x2F-1-x2F-2023"><a href="#23-x2F-1-x2F-2023" class="headerlink" title="23&#x2F;1&#x2F;2023"></a>23&#x2F;1&#x2F;2023</h1><p>在上个星期，演讲了我的项目，我使用了<a href="https://www.tensorflow.org/lite/examples">tensorflow的教学</a>，来演讲我的学习内容以及学习后得出来的结果，具体请看我的<a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/main/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/Presentation.pptx">PPT</a></p>
<p>James发了一个团队的<a href="https://github.com/google-research/tuning_playbook#who-is-this-document-for">优化方案</a>，以下是我对优化方案的大概总结</p>
<ul>
<li><p>hyperparameters(number of layers, layer width, type of activation function)</p>
<blockquote>
<p>这是在预训练的初始化设置中更改，改变参数重新训练模型</p>
</blockquote>
</li>
<li><p>batch size</p>
<blockquote>
<p>训练的批量决定了训练的速度，我们需要找到一个理想的批量大小，能够合理分配训练资源。</p>
</blockquote>
</li>
</ul>
<p>65</p>
<blockquote>
<p>Activation Function: ReLu, Mist, [Tanm,sigmoid].</p>
<p>We can change Activation in every layer.</p>
<p>change Learing rate</p>
<p><a href="https://github.com/google-research/tuning_playbook#what-are-the-update-rules-for-all-the-popular-optimization-algorithms">Adam and NAdam</a>, <a href="https://github.com/google-research/tuning_playbook#what-are-the-update-rules-for-all-the-popular-optimization-algorithms">SGD with momentum</a> Optimiser</p>
</blockquote>
<blockquote>
<p>Task: </p>
<ul>
<li><p>Read Google book</p>
</li>
<li><p>Try suggestions</p>
<ul>
<li>find out one your model uses<ul>
<li>Learing rate</li>
<li>optimizer</li>
<li>activation function</li>
<li>regulation rate</li>
</ul>
</li>
<li>only Find Inference detect different.</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="30-x2F-1-x2F-2023"><a href="#30-x2F-1-x2F-2023" class="headerlink" title="30&#x2F;1&#x2F;2023"></a>30&#x2F;1&#x2F;2023</h1><p>Every one try to use yolov4-8, LeNet - numbers, MobileNetv2 - …</p>
<p>Dataset: coco cifar ….</p>
<p>pretrain model for each other.</p>
<p>Google scholar </p>
<p><a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2_detection_zoo.md">models on tensorflow 2</a></p>
<ul>
<li><p>taks</p>
</li>
<li><p><input disabled="" type="checkbox"> 
choose model and dataset at least 1 common</p>
</li>
<li><p><input disabled="" type="checkbox"> 
start optimize hyper parameters .</p>
</li>
</ul>
<h1 id="16-x2F-2-x2F-2023"><a href="#16-x2F-2-x2F-2023" class="headerlink" title="16&#x2F;2&#x2F;2023"></a>16&#x2F;2&#x2F;2023</h1><ol>
<li>I can get the cocodataset label from this <a href="https://github.com/amikelive/coco-labels/blob/master/scripts/python/dump_coco_labels.py">script</a>, but I am train the model on <a href="https://colab.research.google.com/drive/13NP4qCb-m2ek02JTNfOArt-2YnmZzecI?usp=sharing">colab</a> , I try to detect the image in colab and Raspberry pi, but there would show <strong>error</strong></li>
</ol>
<p><code>IndexError: list index out of range</code></p>
<p>I have two <a href="https://github.com/google-coral/pycoral/blob/master/examples/classify_image.py">image classification script 1</a> <a href="https://github.com/EdjeElectronics/TensorFlow-Lite-Object-Detection-on-Android-and-Raspberry-Pi/blob/master/TFLite_detection_image.py">image classification script 2</a> , they are all would be error.</p>
<ol start="2">
<li>I am try to do your share <a href="https://colab.research.google.com/drive/1go_M5sRWWzMUgaCyrXgS5GU6A7or94_1?usp=sharing">TF Hub for TF2: Retraining an image classifier1</a> .ipynb but there are same problem with me before going to do the Keras’s <a href="https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html">generator</a>, the generator which is need classes diratory for those images. Such as</li>
</ol>
<img src="https://i.imgur.com/51wLqOo.png" alt="image-20230211130258335" style="zoom:50%;" />

<p>but cifar100 is python script and coco dataset is coco format, they looklike can’t not be used on <strong>keras’ generator</strong>.</p>
<p>Below picture is I try to use your resize and process images function.</p>
<p><img src="https://i.imgur.com/jJ4hZVW.png" alt="image-20230211130516224"></p>
<p>Coco dataset is only one diractory <code>cocodataset/train/*.jpg</code>, so there would be only one classes.</p>
<p>In generator, classes are labels.</p>
<ol start="3">
<li><p>I found a new web about dataset , which is <a href="https://public.roboflow.com/object-detection/microsoft-coco-subset/2#">roboflow</a> , there have coco dataset and it’s look like we don’t need to transform the labels , we can use keras to use coco dataset and TFrecord format by roboflow . </p>
<p>In this doc, where support TFrecord, may be we can try to use it to build model.</p>
</li>
<li><p>I am going to do <a href="https://colab.research.google.com/drive/1ouUBOOkN2TgIqdwMN1v2-pvNLhsq-a3Y">yolov8</a>, <a href="">Train yolov8 by your custom dataset</a> , there have very nice dataset lib but one problem is I can’t run the converter model format fuction, such as I want to transfer <code>model.pt</code> to <code>model.tflite</code> </p>
</li>
<li><p>Because the coco dataset is so busy and Complex, I decide don’t use coco dataset to do my model.</p>
</li>
<li><p><a href="https://colab.research.google.com/drive/1lEaVa9ytsXUaDaUoPWkUydHJs5MCtEae?usp=sharing">fuite with kaggle lib in colab</a> ,we can use open-src to train our model, there is an example.</p>
<p>13&#x2F;2&#x2F;2023</p>
</li>
</ol>
<h1 id="3-x2F-3-x2F-2023"><a href="#3-x2F-3-x2F-2023" class="headerlink" title="3&#x2F;3&#x2F;2023"></a>3&#x2F;3&#x2F;2023</h1><ul>
<li>converter script not good for the model, I don’t know what problem happen</li>
</ul>
<p><img src="https://i.imgur.com/kOCtGdG.png"></p>
<p>result is not good, and need to spand a lot time</p>
<p><a href="https://colab.research.google.com/drive/1go_M5sRWWzMUgaCyrXgS5GU6A7or94_1?usp=sharing">colab note book converter uin8</a></p>
<p>if not uint8(only for coral accelerator) converter script which would be show</p>
<p><img src="https://i.imgur.com/9JNz4dF.png"></p>
<ul>
<li>I make an object detection model</li>
</ul>
<p><a href="https://colab.research.google.com/drive/1AqSvKwfaom2rLnPpSWrFJhnFCPg4iyxN?usp=sharing">colab of object detection</a></p>
<p>This one is perfect to run.</p>
<ul>
<li>We want a raspberry pi 4 carmera to real-time detect object.</li>
</ul>
<h1 id="9-x2F-3-x2F-2023"><a href="#9-x2F-3-x2F-2023" class="headerlink" title="9&#x2F;3&#x2F;2023"></a>9&#x2F;3&#x2F;2023</h1><p><a href="https://github.com/google-research/tuning_playbook">optimise guide</a></p>
<p>Optimiser option:</p>
<ul>
<li>batch size &#x3D;</li>
</ul>
<blockquote>
<p>Training time &#x3D; (time per step) x (total number of steps)</p>
</blockquote>
<ul>
<li>Num_step&#x3D; ?</li>
<li>Num_classes &#x3D; 3</li>
<li>fine_tune_checkpoint_type &#x3D; classification</li>
<li>learning_rate &#x3D; 0 - 1 which one could be better</li>
<li>additional_layer &#x3D; ?</li>
<li>num_layers_before_predictor&#x3D;?</li>
</ul>
<h2 id="27-x2F-3-x2F-2023"><a href="#27-x2F-3-x2F-2023" class="headerlink" title="27&#x2F;3&#x2F;2023"></a>27&#x2F;3&#x2F;2023</h2><p>This week tasks:</p>
<ol>
<li>Get inference of Rpi + Coral accuracy</li>
<li>Step from 10k to 7k</li>
<li>jump lr from 0.01 to 0.03.</li>
</ol>
<p>Thesis:</p>
<p>Abstract 200word : what project is ,who is your supervisor, one or two results</p>
<p>Introduction: what your project , why you do your project, what is your background.</p>
<p>Literature review: what paper review, what you look paper going todo </p>
<p>Methodology: what you do, and result, what dataset,parameter, how you do it.</p>
<p>Results: what did you prove, what did you find (good or bad)</p>
<p>Discussion&#x2F; conclusion : summerise everything.</p>
<p>16 to17 page</p>
<p>you can send some draft 27 - 7 in this time send James.</p>
<h2 id="3-x2F-4-x2F-2023"><a href="#3-x2F-4-x2F-2023" class="headerlink" title="3&#x2F;4&#x2F;2023"></a>3&#x2F;4&#x2F;2023</h2><p>实际测试了不同模型的准确率，但是还没有测速度，速度将在两天后进行测试</p>
<p>定论文基调</p>
<ol>
<li>摘要</li>
</ol>
<blockquote>
<p>主要讲诉我做什么项目，谁帮助我，我做出了什么结果，200字</p>
</blockquote>
<ol start="2">
<li>介绍</li>
</ol>
<blockquote>
<p>讲诉我项目的细节，如我在我的项目里需要干什么，可以参考James论文</p>
</blockquote>
<p>2.1 文献回顾</p>
<blockquote>
<p>主要讲诉你在哪个优化的哪个领域参考了哪个文献,参考James的Literature review。</p>
</blockquote>
<ol start="3">
<li>方法论Methodology</li>
</ol>
<blockquote>
<p>你做了什么，你怎么做的，为什么这么做，你的图表结果。</p>
</blockquote>
<ol start="4">
<li>结果</li>
</ol>
<blockquote>
<p>通过你的研究过程你发现了什么，通过你的研究过程你得到什么结论。</p>
</blockquote>
<ol start="5">
<li>结论</li>
</ol>
<blockquote>
<p>总结上面所有结果。</p>
</blockquote>
<ol start="6">
<li>Reference</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Colab使用指南</title>
    <url>/2022/09/26/CNN%20project/Colab%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="Colab-Guide"><a href="#Colab-Guide" class="headerlink" title="Colab Guide"></a>Colab Guide</h1><p><a href="https://colab.research.google.com/">官方网站</a></p>
<p><a href="https://blog.csdn.net/weixin_44791964/article/details/123659637">教程Blog</a></p>
<p><a href="https://www.bilibili.com/video/BV1GS4y1Y7Qb/?spm_id_from=333.337.search-card.all.click&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">B站视频</a></p>
<p><a href="https://github.com/bubbliiiing/Colab">github 数据集百度云下载</a></p>
<h2 id="1-为什么要使用-Colab"><a href="#1-为什么要使用-Colab" class="headerlink" title="1.为什么要使用 Colab"></a>1.为什么要使用 Colab</h2><p><strong>就喜欢薅羊毛:)</strong></p>
<ul>
<li>能免费使用一点程度的GPU&#x2F;CPU来计算和训练模型。</li>
<li>云端代码，十分方便，不需要下载pythan或其他语言工具载体。</li>
</ul>
<h2 id="2-目的"><a href="#2-目的" class="headerlink" title="2.目的"></a>2.目的</h2><p>这个教程主要基于b站up的教程视频，使用yolov4来训练模型，尝试使用colab来编写python代码。</p>
<h2 id="3-步骤"><a href="#3-步骤" class="headerlink" title="3. 步骤"></a>3. 步骤</h2><h3 id="一-创建文件夹和下载材料"><a href="#一-创建文件夹和下载材料" class="headerlink" title="一. 创建文件夹和下载材料"></a>一. 创建文件夹和下载材料</h3><ol>
<li>从百度云下载VOC07+12+test.zip文件，这是一个包含数据集的压缩包  - <strong>JPEGImages里面存放的为图片文件，Annotations里面存放的标签文件，ImageSets里面存放的是区分验证集、训练集、测试集的txt文件。</strong></li>
<li>将VOC07+12+test.zip文件进行备份</li>
<li>在google云盘上创建一个VOC_dataset文件夹</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6lh9mg6vaj21du0u0whx.jpg" alt="image-20220927142037676" style="zoom: 33%;" />

<ol start="4">
<li>将VOC07+12+test.zip文件上传到VOC_dataset文件夹上，<strong>到时候将使用代码进行解压</strong>。</li>
<li>再创建一个叫models的文件，然后在models文件夹里再创建一个叫yolo4-tiny-pytorch文件夹</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6lhe7yrsuj20te0p4aaj.jpg" alt="image-20220927142512071" style="zoom:33%;" />

<ol start="6">
<li>我们还需要在yolo4_tiny_pytorch里再创建两个文件夹，一个叫model_data,一个叫logs.</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6lhgz655zj216u0d0js8.jpg" alt="image-20220927142746802" style="zoom:50%;" />

<ol start="7">
<li>要在model_data里面放预训练权重（由于使用的是yolo4_tiny_pytorch的库，所以要将相应的预训练权重上传上去）</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6llljv8l1j218u0aqgmg.jpg" alt="image-20220927165041981" style="zoom:50%;" />

<h3 id="二-Colab配置环境"><a href="#二-Colab配置环境" class="headerlink" title="二. Colab配置环境"></a>二. Colab配置环境</h3><ol>
<li>在Colab里创建笔记本,并更改名字</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6ls4ifdv0j212w0gw761.jpg" alt="image-20220927203632087" style="zoom:50%;" />

<ol start="2">
<li>更改硬件加速器：代码执行命令–&gt;更改运行时类型–&gt;硬件加速器–&gt;选择GPU</li>
</ol>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6ls80keekj212w0gw761.jpg" alt="image-20220927203955463" style="zoom:50%;" />

<ol start="3">
<li>配置环境的检查，一般来说colab已经配备了pytorch的环境，我们可以用以下代码来验证一下</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!pip <span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6lscc5e6lj20q00gumyb.jpg" alt="image-20220927204404707" style="zoom:50%;" />

<p>可以看到torch已经安装好了.</p>
<ol start="4">
<li>在笔记本上挂载Goole云盘</li>
</ol>
<p>在笔记上敲入以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> drive</span><br><span class="line">drive.mount(<span class="string">&#x27;/content/gdrive&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然后我们会发现文件里多出两个文件夹</p>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6lsi274s4j20ji0e8aaa.jpg" alt="image-20220927204935105" style="zoom:50%;" />

<p>⚠️注意：当退出后重新进入就要再运行一次.</p>
<ol start="5">
<li>在笔记本上下载<strong>深度学习库</strong></li>
</ol>
<p>使用git clone进行下载，在笔记上敲入以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!git clone https://github.com/bubbliiiing/yolov4-tiny-pytorch.git</span><br><span class="line">%cd yolov4-tiny-pytorch/</span><br></pre></td></tr></table></figure>

<p>执行完后就会发现多出一个yolo4-tiny-pytorch文件夹</p>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6lxf60yinj21go0kowi1.jpg" alt="image-20220927233945694" style="zoom:50%;" />

<p>代码解释: 第一个代码是将学习库git下来（相当于复制）,在将它导到自己命名的根目录（%cd + 文件名）</p>
<p>同时yolo4-tiny-pytorch文件夹成为了我们的根目录</p>
<p>如何验证, 输入以下代码即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!pwd</span><br></pre></td></tr></table></figure>

<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6lxkwz4moj210w06qgme.jpg" alt="image-20220927234518431" style="zoom:50%;" />

<p>结果会显示出目前的根目录地址</p>
<ol start="6">
<li>数据集的复制和解压</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!rm -rf ./VOCdevkit</span><br><span class="line">!cp /content/gdrive/MyDrive/VOC_dataset/VOC07+<span class="number">12</span>+test.<span class="built_in">zip</span> ./</span><br><span class="line">!unzip ./VOC07+<span class="number">12</span>+test.<span class="built_in">zip</span> -d ./</span><br></pre></td></tr></table></figure>

<p>代码解释：将之前复制在云盘的压缩包解压到根目录上,同时删除原先自带的VOCdevkit的文件（原因是文件是空的），cp目标，unzip目标在根目录,rm移除VOCdevkit文件</p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6ly1vv3ctj21dg090jta.jpg" alt="image-20220928000136070"></p>
<ol start="7">
<li>保存路径设置，防止停止使用后丢失权值</li>
</ol>
<p>加入以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!rm -rf logs <span class="comment">##移除根目录里logs文件</span></span><br><span class="line">!ln -s /content/gdrive/MyDrive/models/yolov4-tiny-pytorch/logs logs <span class="comment">##将云盘里的logs文件链接到根目录</span></span><br></pre></td></tr></table></figure>

<p>可以发现logs文件夹和云盘的logs文件夹一致</p>
<h3 id="三-训练模型"><a href="#三-训练模型" class="headerlink" title="三. 训练模型"></a>三. 训练模型</h3><ol>
<li>打开VOC_annotation.py文件，<strong>由于我们现在使用的直接就是VOC数据集，我们已经划分好了训练集验证集和测试集，所以我们将annotation_mode设置为2。</strong></li>
</ol>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h6mxdo9deij20n80okdk5.jpg" alt="image-20220928131957738" style="zoom:50%;" />

<ol start="2">
<li>然后输入指令完成标签的处理，生成2007_train.txt和2007_val.txt。</li>
</ol>
<img src="https://i.imgur.com/ALiXilZ.png" alt="image-20220928132216090" style="zoom:50%;" />

<ol start="3">
<li>处理训练文件需要三个部分</li>
</ol>
<ul>
<li>预训练文件的使用（也就是我们的权值文件）yolov4_tiny_weights_coco</li>
</ul>
<img src="https://i.imgur.com/5zuXBCe.png" alt="image-20220928132609651" style="zoom:50%;" />

<ul>
<li>保存周期的设置，由于云盘不够大，所以已经会撑爆，我们需要设置保存周期，然后在保存周期的期间将文件挪出来。</li>
</ul>
<ol start="4">
<li>设置预训练文件的使用，<strong>复制预训练文件的路径</strong>，然后打开根目录（yolov4-tiny-pytorch）里的train.py, 替换model_path 的路径</li>
</ol>
<img src="https://i.imgur.com/n4sPyv6.png" alt="image-20220928133542751" style="zoom:50%;" />

<ol start="5">
<li>保存周期设置，将save_period改成4，也就是每隔4代保存一次</li>
</ol>
<img src="https://i.imgur.com/XfJGcGn.png" alt="image-20220928133717139" style="zoom:50%;" />

<h3 id="四-开始训练"><a href="#四-开始训练" class="headerlink" title="四. 开始训练"></a>四. 开始训练</h3><p>复制以下代码即可开始训练模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!python train.py</span><br></pre></td></tr></table></figure>

<h2 id="4-掉线怎么办"><a href="#4-掉线怎么办" class="headerlink" title="4. 掉线怎么办"></a>4. 掉线怎么办</h2><p>重连呗。设置也得重新搞，但是笔记本都保存好代码了，需要改的不多，同时已经将保存的路径设置到云端里了，不会因为掉线而丢失权值。</p>
]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>Colab</tag>
      </tags>
  </entry>
  <entry>
    <title>Keras model in Coral accelerator</title>
    <url>/2022/11/29/CNN%20project/Keras-model-in-Coral-accelerator/</url>
    <content><![CDATA[<h1 id="Keras-with-Coral-accelerator"><a href="#Keras-with-Coral-accelerator" class="headerlink" title="Keras with Coral accelerator"></a>Keras with Coral accelerator</h1><h2 id="How-to-use-Kares"><a href="#How-to-use-Kares" class="headerlink" title="How to use Kares"></a>How to use Kares</h2><p>Platform: Colab</p>
<p><a href="https://keras.io/getting_started/">keras guides</a></p>
<p><a href="https://colab.research.google.com/drive/1ETTb6gVi67MPN_3PoHwoEMwxINF3qmj5#scrollTo=o9xLkT6pmwe6">James training model</a></p>
<p><a href="https://colab.research.google.com/drive/1lEaVa9ytsXUaDaUoPWkUydHJs5MCtEae#scrollTo=1eKUoqJ9tsDg">Coral use keras in colab</a></p>
<h2 id="How-to-use-coral-accelerator"><a href="#How-to-use-coral-accelerator" class="headerlink" title="How to use coral accelerator"></a>How to use coral accelerator</h2><p><a href="">Coral accelerator setup in your computer</a></p>
<p><a href="https://www.youtube.com/watch?v=7cnGvsNwe5E&t=691s">coral introduction(youtube)</a></p>
<p><a href="https://www.tensorflow.org/lite/models/convert">coral document for convert model to TFlite</a></p>
<h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><ul>
<li>I can run the coral accelerater in the Rpi4 </li>
<li>Convert model from h5 to TFlite.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">converter = tf.lite.TFLiteConverter.from_keras_model(model)</span><br><span class="line">tflite_model = converter.convert()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mobilenet_v2_1.0_224.tflite&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(tflite_model)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Above is covert to TFlite , not just uint8 type TFlite</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A generator that provides a representative dataset</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">representative_data_gen</span>():</span><br><span class="line">  dataset_list = tf.data.Dataset.list_files(<span class="string">&#x27;/content/fruits-360_dataset/fruits-360/*/*.jpg&#x27;</span>) </span><br><span class="line">  <span class="comment">#Input the dataset files</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    image = <span class="built_in">next</span>(<span class="built_in">iter</span>(dataset_list))</span><br><span class="line">    image = tf.io.read_file(image)</span><br><span class="line">    image = tf.io.decode_jpeg(image, channels=<span class="number">3</span>)</span><br><span class="line">    image = tf.image.resize(image, [IMAGE_SIZE, IMAGE_SIZE])</span><br><span class="line">    image = tf.cast(image / <span class="number">255.</span>, tf.float32)</span><br><span class="line">    image = tf.expand_dims(image, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">yield</span> [image]</span><br><span class="line"></span><br><span class="line">converter = tf.lite.TFLiteConverter.from_keras_model(model)</span><br><span class="line"><span class="comment"># This enables quantization</span></span><br><span class="line">converter.optimizations = [tf.lite.Optimize.DEFAULT]</span><br><span class="line"><span class="comment"># This sets the representative dataset for quantization</span></span><br><span class="line">converter.representative_dataset = representative_data_gen</span><br><span class="line"><span class="comment"># This ensures that if any ops can&#x27;t be quantized, the converter throws an error</span></span><br><span class="line">converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]</span><br><span class="line"><span class="comment"># For full integer quantization, though supported types defaults to int8 only, we explicitly declare it for clarity.</span></span><br><span class="line">converter.target_spec.supported_types = [tf.int8]</span><br><span class="line"><span class="comment"># These set the input and output tensors to uint8 (added in r2.3)</span></span><br><span class="line">converter.inference_input_type = tf.uint8</span><br><span class="line">converter.inference_output_type = tf.uint8</span><br><span class="line">tflite_model = converter.convert()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mobilenet_v2_1.0_224_quant.tflite&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(tflite_model)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Compile Edge TUP</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">! curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">! echo <span class="string">&quot;deb https://packages.cloud.google.com/apt coral-edgetpu-stable main&quot;</span> | sudo tee /etc/apt/sources.<span class="built_in">list</span>.d/coral-edgetpu.<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">! sudo apt-get update</span><br><span class="line"></span><br><span class="line">! sudo apt-get install edgetpu-compiler	</span><br><span class="line"></span><br><span class="line">! edgetpu_compiler mobilenet_v2_1<span class="number">.0_224</span>_quant.tflite</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Then download the model and labels to your computer, use them in your coral accelerator</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 classify_image.py \</span><br><span class="line">  --model mobilenet_v2_1<span class="number">.0_224</span>_quant_edgetpu.tflite \</span><br><span class="line">  --labels fruit_labels.txt \</span><br><span class="line">  --<span class="built_in">input</span> fruit.jpg</span><br></pre></td></tr></table></figure>



<ul>
<li>Only tensorflow relative model can use in the coral accelerator, Keras is most adaptor on the coral.</li>
</ul>
<blockquote>
<p>Because coral accelerator flame is base on tensorflow.</p>
</blockquote>
<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><ul>
<li><strong>I can’t use the coral in my pc where mac or windows or linux .</strong></li>
</ul>
<blockquote>
<p>The one way would be remain me on there, the wheel is not suitable on your platform, even I try to install all of the coral wheels.</p>
</blockquote>
<ul>
<li>When I converter James model to TFlite , I can’t directly to converter it , still need to convert it to uint8 type TFlite.</li>
</ul>
<blockquote>
<p>How to convert uint8 type TFlite.</p>
</blockquote>
<ul>
<li>Compare value</li>
</ul>
<blockquote>
<p>I dont think the coral accelerator can use to training the model, its fuction is only to get up the accelerate for the detection </p>
<ul>
<li>How do I setup my PC or Rpi if the coral can use to train the model.</li>
</ul>
</blockquote>
<h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><ul>
<li><input disabled="" type="checkbox"> Compare model training speed in PC and Rpi with Coral</li>
<li><input disabled="" type="checkbox"> Compare Validation speed as use the test_dataset to train model once again in PC adn Rpi with coral.</li>
</ul>
<blockquote>
<p>Coral accelerator is not use in traning model, is only can use it accelerated ML inferencing to existing systems, if it can use to training how do I setup my computer or RPi.</p>
</blockquote>
<ul>
<li><input disabled="" type="checkbox"> Detection test Speed in PC with coral</li>
</ul>
<blockquote>
<p>I can’t use coral on the PC</p>
</blockquote>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
Detection  test Speed in Rpi with coral</p>
</li>
<li><p><input disabled="" type="checkbox"> 
Compare Rpi with coral or not on inference Speed</p>
</li>
</ul>
<blockquote>
<p>Compare the speed in same model and dataset</p>
</blockquote>
<ul>
<li><p>30&#x2F;11&#x2F;22</p>
</li>
<li><p><input disabled="" type="checkbox"> 
Compare PC(Colab) inference speed in same dataset and models, diferent CPU or GPU or TPU.</p>
</li>
<li><p><input disabled="" type="checkbox"> 
Compare different traning speed in TPU ,GPU and CPU</p>
</li>
<li><p><input disabled="" type="checkbox"> 
Compare accuracy in different platform.</p>
</li>
<li><p><input disabled="" type="checkbox"> 
Compare diferent epoch number of the accuracy on the model.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>Tensorflow2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow2.0学习日记之 环境搭建篇</title>
    <url>/2022/10/04/CNN%20project/Tensorflow2.0%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="运行tensorflow的环境搭建"><a href="#运行tensorflow的环境搭建" class="headerlink" title="运行tensorflow的环境搭建"></a>运行tensorflow的环境搭建</h1><p>playform: Windows10</p>
<h2 id="安装CPU-tensorflow框架"><a href="#安装CPU-tensorflow框架" class="headerlink" title="安装CPU tensorflow框架"></a>安装CPU tensorflow框架</h2><p><a href="https://ai-wx.blog.csdn.net/article/details/104342769">Anaconda3+tensorflow2.0.0+PyCharm安装与环境搭建-CSDN</a> </p>
<p>直接看以上博客进行安装</p>
<h2 id="安装GPU-tensorflow框架"><a href="#安装GPU-tensorflow框架" class="headerlink" title="安装GPU tensorflow框架"></a>安装GPU tensorflow框架</h2><p><a href="https://ai-wx.blog.csdn.net/article/details/107205744">Anaconda3+PyCharm+Cuda10.1+Cudnn7.6+tensorflow2.2安装与配置教程</a></p>
<p>注意在安装的博客里安抓过tensorflow的是国内镜像，如果在国外请直接安装s</p>
]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>Tensorflow2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>BJT amplifier</title>
    <url>/2022/11/28/Micro%20Electronic/BJT-amplifier/</url>
    <content><![CDATA[<h1 id="BJT-Amplifier"><a href="#BJT-Amplifier" class="headerlink" title="BJT-Amplifier"></a>BJT-Amplifier</h1><p>[toc]</p>
<h2 id="什么是BJT-amplifier"><a href="#什么是BJT-amplifier" class="headerlink" title="什么是BJT-amplifier"></a>什么是BJT-amplifier</h2><p>中文简称：BJT放大器，如电压放大器等</p>
<img src="https://i.imgur.com/vKDSS1R.png" alt="image-20221128134542174" style="zoom:50%;" />

<p><strong>上图是一个电压放大器，理想状态下，它的输入阻抗为无限大，输出阻抗为0，但现实中，输入阻抗和输出阻抗会偏离理想值！</strong></p>
<img src="https://i.imgur.com/tgfaVDk.png" alt="image-20221128134846273" style="zoom:50%;" />

<p>x可以是input也可以是output，公式是通用的。</p>
<h3 id="根据小信号模型可以知道输入阻抗和输出阻抗的构成："><a href="#根据小信号模型可以知道输入阻抗和输出阻抗的构成：" class="headerlink" title="根据小信号模型可以知道输入阻抗和输出阻抗的构成："></a>根据小信号模型可以知道输入阻抗和输出阻抗的构成：</h3><h3 id="Impedance-at-base-基极偏置"><a href="#Impedance-at-base-基极偏置" class="headerlink" title="Impedance at  base(基极偏置):"></a>Impedance at  base(基极偏置):</h3><img src="https://i.imgur.com/MyIZptE.png" alt="image-20221128135938002" style="zoom:50%;" />

<blockquote>
<img src="https://i.imgur.com/629ghGO.png" alt="image-20221128140254967" style="zoom:50%;" />
</blockquote>
<h3 id="Impedance-at-collector-集电极偏置"><a href="#Impedance-at-collector-集电极偏置" class="headerlink" title="Impedance at collector(集电极偏置)"></a>Impedance at collector(集电极偏置)</h3><img src="https://i.imgur.com/rhTaCsc.png" alt="image-20221128140422686" style="zoom:50%;" />

<ul>
<li>这个结果是在早期影响下(Early effect)</li>
</ul>
<h3 id="Impedance-at-Emitter-发射集偏置"><a href="#Impedance-at-Emitter-发射集偏置" class="headerlink" title="Impedance at Emitter(发射集偏置)"></a>Impedance at Emitter(发射集偏置)</h3><img src="https://i.imgur.com/UdJCkew.png" alt="image-20221128140635049" style="zoom:50%;" />

<ul>
<li>发射集偏执阻抗 Rout &#x3D; beta&#x2F;gm</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/0WSba0k.png" alt="image-20221128141222796" style="zoom:50%;" />

<img src="https://i.imgur.com/EkElIMx.png" alt="image-20221128141320048" style="zoom:50%;" />
</blockquote>
<h3 id="Three-Master-rules-of-Transistor-Impedance-结论"><a href="#Three-Master-rules-of-Transistor-Impedance-结论" class="headerlink" title="Three Master rules of Transistor Impedance (结论)"></a>Three Master rules of Transistor Impedance (结论)</h3><img src="/Users/jessyhuang/Library/Application Support/typora-user-images/image-20221128141703189.png" alt="image-20221128141703189" style="zoom:50%;" />

<blockquote>
<ol>
<li><p>基极接电源，如果发射集ac(交流)接地，则Rout &#x3D; r<em>π</em></p>
</li>
<li><p>集电极接电源，如果发射集ac接地，则Rout &#x3D; r<em>π</em></p>
</li>
<li><p>发射集接电源，如果基极ac接地并且早期影响被忽略，则Rout &#x3D; 1&#x2F;gm.</p>
</li>
</ol>
</blockquote>
<h2 id="如何构成一个BJT-amplifier"><a href="#如何构成一个BJT-amplifier" class="headerlink" title="如何构成一个BJT- amplifier"></a>如何构成一个BJT- amplifier</h2><p><strong>晶体管和电路必须有偏置，有两个原因：</strong></p>
<blockquote>
<ul>
<li>晶体管必须在有源区工作</li>
<li>小信号模型参数取决于偏置条件</li>
</ul>
<img src="https://i.imgur.com/bNiAgsc.png" alt="image-20221128143755007" style="zoom:50%;" />
</blockquote>
<h3 id="BJT三种偏置的Ic输出"><a href="#BJT三种偏置的Ic输出" class="headerlink" title="BJT三种偏置的Ic输出"></a>BJT三种偏置的Ic输出</h3><h4 id="1-Biasing-with-Base-Resistor"><a href="#1-Biasing-with-Base-Resistor" class="headerlink" title="1. Biasing with Base Resistor"></a>1. Biasing with Base Resistor</h4><img src="https://i.imgur.com/SbnVn3o.png" alt="image-20221128144135852" style="zoom:50%;" />

<blockquote>
<img src="https://i.imgur.com/DXivggD.png" alt="image-20221128144330622" style="zoom:50%;" />

<p>但是，偏置点对β的变化很敏感。</p>
</blockquote>
<h4 id="2-Emitter-Degeneration-Biasing"><a href="#2-Emitter-Degeneration-Biasing" class="headerlink" title="2. Emitter Degeneration Biasing"></a>2. Emitter Degeneration Biasing</h4><img src="https://i.imgur.com/RkxUXlE.png" alt="image-20221128144706500" style="zoom:50%;" />

<blockquote>
<img src="https://i.imgur.com/HNQKQgp.png" alt="image-20221128145103388" style="zoom:50%;" />

<ul>
<li>Re的存在利于吸收Vx的误差，因此保持Vbe相对稳定</li>
<li>这种偏置技术（I1 &gt;&gt; Ib）和Vbe的变化不敏感。</li>
</ul>
<img src="https://i.imgur.com/5vAhOhG.png" alt="image-20221128145242472" style="zoom:50%;" />
</blockquote>
<h4 id="3-Self-Biasing-technique-x2F-collector-Feedback-biasing"><a href="#3-Self-Biasing-technique-x2F-collector-Feedback-biasing" class="headerlink" title="3. Self-Biasing technique&#x2F;collector-Feedback biasing"></a>3. Self-Biasing technique&#x2F;collector-Feedback biasing</h4><img src="https://i.imgur.com/8GBcBog.png" alt="image-20221128153230354" style="zoom:50%;" />

<blockquote>
<img src="https://i.imgur.com/hRGgAmw.png" alt="image-20221128153625619" style="zoom:50%;" />

<ul>
<li>这种方法利用集电极电压来提供必要的Vx和Ib</li>
<li>一个重要的特点是集电极的电位高于基极，从而保证了晶体管的主动行动。<img src="https://i.imgur.com/fbiPzwX.png" alt="image-20221128154851027" style="zoom:50%;" /></li>
</ul>
</blockquote>
<h4 id="PNP-偏置图"><a href="#PNP-偏置图" class="headerlink" title="PNP 偏置图"></a>PNP 偏置图</h4><img src="https://i.imgur.com/dXopmJX.png" alt="image-20221128155045396" style="zoom:50%;" />

<h3 id="Study-Of-Common-Emitter-CE-Topology"><a href="#Study-Of-Common-Emitter-CE-Topology" class="headerlink" title="Study Of Common-Emitter(CE) Topology"></a>Study Of Common-Emitter(CE) Topology</h3><h4 id="1-Analysis-CE-core-inclusion-of-Early-Effect"><a href="#1-Analysis-CE-core-inclusion-of-Early-Effect" class="headerlink" title="1.Analysis CE core(inclusion of Early Effect)"></a>1.Analysis CE core(inclusion of Early Effect)</h4><h5 id="Ignore-Early-effect"><a href="#Ignore-Early-effect" class="headerlink" title="Ignore Early effect"></a>Ignore Early effect</h5><img src="https://i.imgur.com/0HeDEBD.png" alt="image-20221128161823868" style="zoom:50%;" />

<img src="https://i.imgur.com/Jhwd6VK.png" alt="image-20221128161843610" style="zoom:50%;" />

<blockquote>
<img src="https://i.imgur.com/OiRD8io.png" alt="image-20221128162402769" style="zoom:50%;" />

<ul>
<li>由公式可知，Vc是Vcc和Vbe之间的电位差，Vce不能低于Vbe，使晶体管处于有效区</li>
</ul>
<p><img src="https://i.imgur.com/Gfxt8nr.png" alt="image-20221128162647367"></p>
</blockquote>
<ul>
<li>CE输入或输出阻抗</li>
</ul>
<img src="https://i.imgur.com/veR6ZPG.png" alt="image-20221128163101975" style="zoom:50%;" />

<blockquote>
<p>测量输出阻抗时，输入端口必须接地。</p>
</blockquote>
<ul>
<li>CE阶段的权衡</li>
</ul>
<img src="https://i.imgur.com/QzkKLZd.png" alt="image-20221128163253024" style="zoom:50%;" />

<h5 id="Inclusion-of-Early-Effect"><a href="#Inclusion-of-Early-Effect" class="headerlink" title="Inclusion of Early Effect"></a>Inclusion of Early Effect</h5><ul>
<li>由于早期影响，Transistor 内会有一个ro。</li>
</ul>
<p>小信号模型</p>
<img src="https://i.imgur.com/1w6Jqu5.png" alt="image-20221128163929576" style="zoom:50%;" />

<img src="https://i.imgur.com/sCo6SkA.png" alt="image-20221128164003538" style="zoom:50%;" />

<blockquote>
<p> 早期影响会降低放大器的增益，因为它是和Rc并联出线的。 </p>
</blockquote>
<h4 id="2-Emitter-Degeneration"><a href="#2-Emitter-Degeneration" class="headerlink" title="2. Emitter Degeneration"></a>2. Emitter Degeneration</h4><h5 id="Ignore-Early-Effect"><a href="#Ignore-Early-Effect" class="headerlink" title="Ignore Early Effect"></a>Ignore Early Effect</h5><p>发射集退化(恶化)</p>
<img src="https://i.imgur.com/0S73x6X.png" alt="image-20221128164149998" style="zoom:50%;" />

<img src="https://i.imgur.com/nspWi79.png" alt="image-20221128164517877" style="zoom:50%;" />

<blockquote>
<ul>
<li><p>通过在发射集上串联一个电阻，我们会使CE退化</p>
</li>
<li><p>这种拓扑结构会降低放大器的增益，但会改善其他方面，如线性度和输入阻抗</p>
</li>
</ul>
<p>Relationship: </p>
<img src="https://i.imgur.com/LVS6QpZ.png" alt="image-20221128170442589" style="zoom:50%;" />
</blockquote>
<ul>
<li>小信号模型</li>
</ul>
<img src="https://i.imgur.com/5MJvLDP.png" alt="image-20221128165247074" style="zoom:50%;" />

<blockquote>
<img src="https://i.imgur.com/zLFjW6V.png" alt="image-20221128170037580" style="zoom:50%;" />
</blockquote>
<ul>
<li>Example1</li>
</ul>
<img src="https://i.imgur.com/BWfTt5t.png" alt="image-20221128170821609" style="zoom:50%;" />

<img src="https://i.imgur.com/HQXFX5c.png" alt="image-20221128170931717" style="zoom:50%;" />

<img src="https://i.imgur.com/L4i52lK.png" alt="image-20221128170953887" style="zoom:50%;" />

<blockquote>
<p>Q2的输入阻抗Rin2可与Re并联，产生一个等效阻抗，使Q1退化。</p>
</blockquote>
<ul>
<li>Example2</li>
</ul>
<img src="https://i.imgur.com/LfMyuTK.png" alt="image-20221128171128141" style="zoom:50%;" />

<img src="https://i.imgur.com/bB7gV06.png" alt="image-20221128171231434" style="zoom:50%;" />

<img src="https://i.imgur.com/pAsXPnR.png" alt="image-20221128171251419" style="zoom:50%;" />

<blockquote>
<p>在这个例子中，Q2的输入阻抗可与Rc并联，可产生一个对地的等效集电极阻抗。</p>
</blockquote>
<ul>
<li>退化CE阶段的输入阻抗</li>
</ul>
<img src="https://i.imgur.com/lbESONJ.png" alt="image-20221128171711426" style="zoom:50%;" />

<img src="https://i.imgur.com/00MoKXN.png" alt="image-20221128171752082" style="zoom:50%;" />

<blockquote>
<p>Rin的公式相同。</p>
<img src="https://i.imgur.com/l2jKEdx.png" alt="image-20221128171844488" style="zoom:50%;" />

<img src="https://i.imgur.com/tEa8KL8.png" alt="image-20221128171939723" style="zoom:50%;" />

<p>随着发射集退化，输入阻抗从r<em>π</em>到r<em>π</em>+(1+gmRE)+RE，这是一个理想的效果。</p>
</blockquote>
<ul>
<li>退化的CE阶段的输出阻抗</li>
</ul>
<img src="https://i.imgur.com/Uk5cFyL.png" alt="image-20221128172305431" style="zoom:50%;" />

<img src="https://i.imgur.com/B4USTQr.png" alt="image-20221128172607807" style="zoom:50%;" />

<img src="https://i.imgur.com/gbbeIf4.png" alt="image-20221128172626578" style="zoom:50%;" />

<blockquote>
<p>集电极退化不改变输出阻抗</p>
</blockquote>
<ul>
<li>Capacitor at Emitter</li>
</ul>
<img src="https://i.imgur.com/55TPi4O.png" alt="image-20221128172830257" style="zoom:50%;" />

<img src="https://i.imgur.com/EtVkmVB.png" alt="image-20221128172848220" style="zoom:50%;" />

<blockquote>
<p>在直流时，电容是开路的，电流源对放大器进行偏置</p>
<p>在交流时，电容是短路的，放大器是由RE退化的。</p>
</blockquote>
<ul>
<li>Example</li>
</ul>
<img src="https://i.imgur.com/S5VZY8G.png" alt="image-20221128173205579" style="zoom:50%;" />

<blockquote>
<p>Gm&lt;gm</p>
<p>如果gmRE大于统一，则Gm是更线性的。</p>
</blockquote>
<img src="https://i.imgur.com/USxvOqk.png" alt="image-20221128173454899" style="zoom:50%;" />

<ul>
<li>带基极电阻的CE阶段。</li>
</ul>
<img src="https://i.imgur.com/DZvLEZY.png" alt="image-20221128173634850" style="zoom:50%;" />

<img src="https://i.imgur.com/l1W86qI.png" alt="image-20221128173828183" style="zoom:50%;" />

<img src="https://i.imgur.com/K0lXAQu.png" alt="image-20221128173920438" style="zoom:50%;" />

<img src="https://i.imgur.com/yYVuMrR.png" alt="image-20221128174102605" style="zoom:50%;" />

<img src="https://i.imgur.com/RjOhpcB.png" alt="image-20221128174143441" style="zoom:50%;" />

<blockquote>
<p>Rin1更重要，因为是在前阶段的输出阻抗。</p>
</blockquote>
<ul>
<li>Example</li>
</ul>
<img src="https://i.imgur.com/AuUj38K.png" alt="image-20221128174321532" style="zoom:50%;" />

<img src="https://i.imgur.com/8s3gS67.png" alt="image-20221128174621557" style="zoom:50%;" />

<h5 id="Inclusion-Of-Early-Effect"><a href="#Inclusion-Of-Early-Effect" class="headerlink" title="Inclusion Of Early Effect"></a>Inclusion Of Early Effect</h5><img src="https://i.imgur.com/9ZZhy7K.png" alt="image-20221129013438425" style="zoom:50%;" />

<img src="https://i.imgur.com/PIS0GNs.png" alt="image-20221129014105210" style="zoom:50%;" />

<img src="https://i.imgur.com/GzB52tW.png" alt="image-20221129013851137" style="zoom:50%;" />

<img src="https://i.imgur.com/I40Z1gp.png" alt="image-20221202110724427" style="zoom:50%;" />

<blockquote>
<ul>
<li>发射集退化，导致输出阻抗增加</li>
<li>提高了放大增益，让这个电路成为更好的电流源。</li>
</ul>
</blockquote>
<ul>
<li>Analysis by inspection</li>
</ul>
<img src="https://i.imgur.com/2aUHOpI.png" alt="image-20221202111010652" style="zoom:50%;" />

<img src="https://i.imgur.com/qsVwtBD.png" alt="image-20221202111201543" style="zoom:50%;" />

<img src="https://i.imgur.com/jSEAexO.png" alt="image-20221202111422695" style="zoom:50%;" />

<blockquote>
<ul>
<li>电路被简化</li>
<li>电容器会对地产生一个交流短路，然后将电路转化成一个已知地拓扑结构。</li>
</ul>
</blockquote>
<ul>
<li>Example: Degeneration by another system</li>
</ul>
<img src="https://i.imgur.com/PQiEPbI.png" alt="image-20221202111644422" style="zoom:50%;" />

<img src="https://i.imgur.com/Yy8A3lw.png" alt="image-20221202111935195" style="zoom:50%;" />

<img src="https://i.imgur.com/HpPoUyl.png" alt="image-20221202112013210" style="zoom:50%;" />

<blockquote>
<ul>
<li>称为联极，具有很多优点。</li>
</ul>
<p>　</p>
</blockquote>
<h4 id="3-CE-stage"><a href="#3-CE-stage" class="headerlink" title="3. CE-stage"></a>3. CE-stage</h4><h5 id="Ignore-Early-Effect-1"><a href="#Ignore-Early-Effect-1" class="headerlink" title="Ignore Early Effect"></a>Ignore Early Effect</h5><ul>
<li>Complete CE stage</li>
</ul>
<img src="https://i.imgur.com/YrbHDHp.png" alt="image-20221202113119389" style="zoom:50%;" />

<img src="https://i.imgur.com/hrM3U2C.png" alt="image-20221202113956585" style="zoom:50%;" />

<img src="https://i.imgur.com/SA7sGjf.png" alt="image-20221202114016469" style="zoom:50%;" />

<h3 id="Common-Base-CB-amplifier"><a href="#Common-Base-CB-amplifier" class="headerlink" title="Common Base(CB) amplifier"></a>Common Base(CB) amplifier</h3><img src="https://i.imgur.com/bLyXaV5.png" alt="image-20221202114800152" style="zoom:50%;" />

<img src="https://i.imgur.com/jMpsefJ.png" alt="image-20221202115503851" style="zoom:50%;" />

<blockquote>
<ul>
<li>发射极为输入信号</li>
<li>集电极为输出信号</li>
<li>基极固定电压偏置</li>
</ul>
</blockquote>
<h4 id="CB-core"><a href="#CB-core" class="headerlink" title="CB core"></a>CB core</h4><img src="https://i.imgur.com/THWjqBU.png" alt="image-20221202115714111" style="zoom:50%;" />

<img src="https://i.imgur.com/xNa49sY.png" alt="image-20221202115825424" style="zoom:50%;" />

<img src="https://i.imgur.com/86rT2l3.png" alt="image-20221202115849832" style="zoom:50%;" />

<p><img src="https://i.imgur.com/JoLXwjW.png" alt="image-20221202120624037"></p>
<img src="https://i.imgur.com/OCkJuk8.png" alt="image-20221202120649873" style="zoom:50%;" />

<img src="https://i.imgur.com/pQe9wSW.png" alt="image-20221202120731151" style="zoom:50%;" />

<blockquote>
<p>为了保持晶体管的不处于饱和状态，RC上的最大压降不能超过Vcc - Vbe.</p>
</blockquote>
<h4 id="Impedance"><a href="#Impedance" class="headerlink" title="Impedance"></a>Impedance</h4><h5 id="Input-Impedance-of-CB"><a href="#Input-Impedance-of-CB" class="headerlink" title="Input Impedance of CB"></a>Input Impedance of CB</h5><img src="https://i.imgur.com/UtfiRj5.png" alt="image-20221204213722779" style="zoom:50%;" />

<img src="https://i.imgur.com/Id1b50R.png" alt="image-20221204214102304" style="zoom:50%;" />

<h5 id="Output-Impedance-of-CB"><a href="#Output-Impedance-of-CB" class="headerlink" title="Output Impedance of CB"></a>Output Impedance of CB</h5><img src="https://i.imgur.com/nPSHnTT.png" alt="image-20221204214321400" style="zoom:50%;" />

<p>n</p>
<h5 id="CB-stage-with-source-resistance"><a href="#CB-stage-with-source-resistance" class="headerlink" title="CB stage with source resistance"></a>CB stage with source resistance</h5><img src="https://i.imgur.com/En6fTwu.png" alt="image-20221204215004088" style="zoom:50%;" />

<img src="https://i.imgur.com/xkaSm33.png" alt="image-20221204215211890" style="zoom:50%;" />

<img src="https://i.imgur.com/oABhKEk.png" alt="image-20221204215021377" style="zoom:50%;" />

<img src="https://i.imgur.com/5JGwYt0.png" alt="image-20221204215231060" style="zoom:50%;" />

<blockquote>
<ul>
<li>由于加入了源电阻，输入信号到达发射极之前就被衰减了，所以我们看到了一个较低的电压增益。</li>
<li>这相当于CE发射极的退化，只是相位颠倒了。</li>
</ul>
</blockquote>
<h5 id="Realistic-Output-Impedance-of-CB-stage"><a href="#Realistic-Output-Impedance-of-CB-stage" class="headerlink" title="Realistic Output Impedance of CB stage"></a>Realistic Output Impedance of CB stage</h5><img src="https://i.imgur.com/EbSOHQE.png" alt="image-20221204215552180" style="zoom:50%;" />

<img src="https://i.imgur.com/KNiA71X.png" alt="image-20221204215748878" style="zoom:50%;" />

<img src="https://i.imgur.com/UgnnGTH.png" alt="image-20221204215812521" style="zoom:50%;" />

<blockquote>
<p>CB的输出阻抗等于Rc并联集电极下面的阻抗</p>
</blockquote>
<h4 id="Bace-with-Resistance"><a href="#Bace-with-Resistance" class="headerlink" title="Bace with Resistance"></a>Bace with Resistance</h4><h5 id="CB-with-Bace-Resistance"><a href="#CB-with-Bace-Resistance" class="headerlink" title="CB with Bace Resistance"></a>CB with Bace Resistance</h5><img src="https://i.imgur.com/7fRB2cp.png" alt="image-20221204220722471" style="zoom:50%;" />

<img src="https://i.imgur.com/ksy4Hj6.png" alt="image-20221204221216607" style="zoom:50%;" />



<img src="https://i.imgur.com/P8ksntH.png" alt="image-20221204220905972" style="zoom:50%;" />

<img src="https://i.imgur.com/sIzrPSO.png" alt="image-20221204221955155" style="zoom:50%;" />

<blockquote>
<p>随着基极电阻的增加，电压增益下降。</p>
</blockquote>
<h5 id="Comparison-of-CE-and-CB-Stage-with-Base-Resistance"><a href="#Comparison-of-CE-and-CB-Stage-with-Base-Resistance" class="headerlink" title="Comparison of CE and CB Stage with Base Resistance"></a>Comparison of CE and CB Stage with Base Resistance</h5><img src="https://i.imgur.com/gerTLOu.png" alt="image-20221205203806094" style="zoom:50%;" />

<blockquote>
<p>带基极电阻的CB放大器的电压增益与带基极电阻和发射极退化的CE极安全相同，<strong>只是符号为负。</strong></p>
</blockquote>
<h5 id="Input-Impedance-of-CB-stage-with-base-Resistance"><a href="#Input-Impedance-of-CB-stage-with-base-Resistance" class="headerlink" title="Input Impedance of CB stage with base Resistance"></a>Input Impedance of CB stage with base Resistance</h5><img src="https://i.imgur.com/2uAdsSZ.png" alt="image-20221205204931662" style="zoom:50%;" />

<img src="https://i.imgur.com/gajW0gM.png" alt="image-20221205205130635" style="zoom:50%;" />



<img src="https://i.imgur.com/g5A5IQc.png" alt="image-20221205205221881" style="zoom:50%;" />

<p>In CE</p>
<img src="https://i.imgur.com/ZR05UFZ.png" alt="image-20221205205443390" style="zoom:50%;" />

<img src="https://i.imgur.com/M2a6YcY.png" alt="image-20221205205457348" style="zoom:50%;" />

<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p><img src="https://i.imgur.com/nGaJ2aA.png" alt="image-20221205205514042"></p>
<img src="https://i.imgur.com/kYufGt6.png" alt="image-20221205210202723" style="zoom:50%;" />

<ul>
<li>CB proper(适当)偏置</li>
</ul>
<img src="https://i.imgur.com/TXW7BVw.png" alt="image-20221205210409787" style="zoom:50%;" />

<img src="https://i.imgur.com/CN1w4FQ.png" alt="image-20221205211142322" style="zoom:50%;" />

<h3 id="Common-Collector-CC-amplifier"><a href="#Common-Collector-CC-amplifier" class="headerlink" title="Common Collector(CC) amplifier"></a>Common Collector(CC) amplifier</h3><img src="https://i.imgur.com/7zm3gZM.png" alt="image-20221205211500712" style="zoom:50%;" />

<h4 id="Not-early-effect"><a href="#Not-early-effect" class="headerlink" title="Not early effect"></a>Not early effect</h4><img src="https://i.imgur.com/tuSiJGA.png" alt="image-20221205211603379" style="zoom:50%;" />

<img src="https://i.imgur.com/ZjxqZAP.png" alt="image-20221205211906651" style="zoom:50%;" />

<img src="https://i.imgur.com/l8Rjlkb.png" alt="image-20221205212200331" style="zoom:50%;" />

<h4 id="early-effect"><a href="#early-effect" class="headerlink" title="early effect"></a>early effect</h4><img src="https://i.imgur.com/iLyfsdD.png" alt="image-20221205212616667" style="zoom:50%;" />

<img src="https://i.imgur.com/opfMwvc.png" alt="image-20221205212938599" style="zoom:50%;" />

<h4 id="Current-Gain"><a href="#Current-Gain" class="headerlink" title="Current Gain"></a>Current Gain</h4><img src="https://i.imgur.com/v4JqEXO.png" alt="image-20221205213013411" style="zoom:50%;" />

<img src="https://i.imgur.com/7DFCnSp.png" alt="image-20221205213135343" style="zoom:50%;" />

<h4 id="CC-with-base-biasing"><a href="#CC-with-base-biasing" class="headerlink" title="CC with base biasing"></a>CC with base biasing</h4><img src="https://i.imgur.com/N5HaQKH.png" alt="image-20221205213239778" style="zoom:50%;" />

<img src="https://i.imgur.com/8sc820u.png" alt="image-20221205213515230" style="zoom:50%;" />

<h2 id="Amplifier-Example"><a href="#Amplifier-Example" class="headerlink" title="Amplifier Example"></a>Amplifier Example</h2><h4 id="Example1"><a href="#Example1" class="headerlink" title="Example1"></a>Example1</h4><img src="https://i.imgur.com/7xsTT2n.png" alt="image-20221205213627825" style="zoom:50%;" />

<img src="https://i.imgur.com/VNrq6eF.png" alt="image-20221205214415363" style="zoom:50%;" />

<img src="https://i.imgur.com/ZcOJeze.png" alt="image-20221205214634806" style="zoom:50%;" />

<h4 id="Example2"><a href="#Example2" class="headerlink" title="Example2"></a>Example2</h4><img src="https://i.imgur.com/jKaq2EU.png" alt="image-20221205214529866" style="zoom:50%;" />

<img src="https://i.imgur.com/1FlSo3X.png" alt="image-20221205215110579" style="zoom:50%;" />

]]></content>
      <categories>
        <category>微电子电路</category>
      </categories>
      <tags>
        <tag>Micro_system</tag>
      </tags>
  </entry>
  <entry>
    <title>BJT的物理特性和工作原理</title>
    <url>/2022/10/21/Micro%20Electronic/BJT%E7%9A%84%E7%89%A9%E7%90%86%E7%89%B9%E6%80%A7%E5%92%8C%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="BJT的工作原理"><a href="#BJT的工作原理" class="headerlink" title="BJT的工作原理"></a>BJT的工作原理</h1><p><a href="https://blog.csdn.net/Cherish1ove/article/details/113812218?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166662974016782412571504%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166662974016782412571504&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-113812218-null-null.142%5Ev59%5Enew_blog_pos_by_title,201%5Ev3%5Econtrol_1&utm_term=bjt&spm=1018.2226.3001.4187">参考博客csdn</a></p>
<p>它具有超高频性能和大电流特性</p>
<p><img src="https://i.imgur.com/AWn90I5.png" alt="img"></p>
<h2 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h2><p>英文图：<img src="https://i.imgur.com/MDhqS8K.png" alt="image-20221021135848077" style="zoom:50%;" /></p>
<p>中文图：</p>
<p><img src="https://i.imgur.com/kPLCIx8.png" alt="img"></p>
<ul>
<li>在一个硅（或锗）片上生成三个杂质半导体区域：一个P区加在两个N区中间，或者一个N区加在两个P区中间。BJT有两种类型：NPN型和PNP型。从三个杂质半导体区域各自引出一个电极，分别称为发射极e，集电极c，基极b，它们对应的杂质半导体区域分别称-  发射区，集电区，基区。</li>
<li>三个区（基区&#x2F;集电区&#x2F;发射区）</li>
<li>两个PN结（发射结&#x2F;集电结）</li>
</ul>
<h2 id="三个区的特点"><a href="#三个区的特点" class="headerlink" title="三个区的特点"></a>三个区的特点</h2><h3 id="三个区各自的特点："><a href="#三个区各自的特点：" class="headerlink" title="三个区各自的特点："></a>三个区各自的特点：</h3><p>基区（base）：“控制区” ，<strong>掺杂浓度很低，基区宽度非常薄。</strong><br>集电区（Collector）：“收集载流子的区域” ，收集载流子，不能有过高的载流子（不能有过高的掺杂浓度），但是面积最大。类似仓库，不能放满东西也不能太小。<br>发射区（Emitter）：“发射载流子的区域” ，往外发射载流子，要有足够的载流子发射，此区域的载流子浓度最高，也就是掺杂浓度最高。<br>三个区电气不对称。</p>
<h3 id="结构图："><a href="#结构图：" class="headerlink" title="结构图："></a>结构图：</h3><p><img src="https://i.imgur.com/jLiLgSG.png" alt="img"></p>
<h2 id="放大状态下BJT的工作原理"><a href="#放大状态下BJT的工作原理" class="headerlink" title="放大状态下BJT的工作原理"></a>放大状态下BJT的工作原理</h2><p><strong>BJT内部有两个背靠背、互相影响的PN结。当这两个PN结的偏置条件（正偏或反偏）不同时，BJT将呈现不同的特性和功能，可能有四种工作状态：放大、饱和、截止、倒置。</strong></p>
<ul>
<li>BJT内部载流子的传输过程</li>
<li>BJT的电流放大作用是由其内部载流子的定向（由发射区向集电区）运动体现出来的。为了保证内部载流子做这样的定向运动，实现电流放大，无论NPN型还是PNP型的BJT，都要将它们的发射结加正偏，集电结反偏。以NPN为例，分析如下：</li>
</ul>
<p>中文流程图：</p>
<p><img src="https://i.imgur.com/ZstqjAJ.png" alt="img"></p>
<p>英文流程图：</p>
<img src="https://i.imgur.com/hJeHxKj.png" alt="image-20221021141052138" style="zoom:50%;" />

<p>注：Depletion Region - 扩散区域其为pn结所在的区域</p>
<p>一个是发射结和集电结</p>
<h3 id="发射结正偏"><a href="#发射结正偏" class="headerlink" title="发射结正偏"></a>发射结正偏</h3><img src="https://i.imgur.com/8XI0vlk.png" alt="image-20221021141401140" style="zoom:50%;" />

<p>发射区向基区扩散载流子，形成发射极电流IE。</p>
<ul>
<li>发射结外加正向电压，发射区（高掺杂）的多子电子将不断通过发射结扩散到基区，形成发射结电子扩散电流IEN，其方向与电子扩散方向相反。同时基区的多子空穴也要扩散到发射区，形成空穴扩散电流IEP，其方向与IEN相同，两个电流一起构成受发射结正向电压VBE控制的发射结电流（也就是发射极电流）IE</li>
</ul>
<img src="https://i.imgur.com/zZcWJ2V.png" alt="image-20221024174442630" style="zoom:50%;" />

<ul>
<li>IES为发射结的反向饱和电流，其值与温度、发射区及基区的掺杂浓度有关，还与发射结的面积成比例</li>
<li>由于基区掺杂浓度很低，IEP很小，可认为：</li>
</ul>
<img src="https://i.imgur.com/NNxH4J5.png" alt="image-20221024174532003" style="zoom:50%;" />

<p>载流子在基区扩散与<strong>复合</strong>，形成复合电流IBN</p>
<ul>
<li>由发射区扩散到基区的载流子电子在发射结边界附近浓度最高，离发射结越远浓度越低，形成了一定的浓度梯度。浓度差使得扩散到基区的电子继续向集电结方向扩散。扩散的时候，有一部分电子与基区的空穴复合，形成基区复合电流IBN。但是由于基区很薄，掺杂浓度又低，因此复合的电子很少，IBN很小。基区被复合掉的空穴由电压源VEE从基区拉走电子来补充。</li>
</ul>
<h3 id="集电极反偏"><a href="#集电极反偏" class="headerlink" title="集电极反偏"></a><strong>集电极反偏</strong></h3><ul>
<li>现在自由电子扩散到集电结处，浓度梯度越来越高，如果集电结不把靠近的自由电子抽走，整个自由电子扩散会越来越慢直至停止。</li>
<li>由于集电结外加反偏电压，空间电荷区的内电场被加强，对基区扩散到集电结边缘的载流子电子有很强的吸引力，使其漂移过集电结，被集电极收集，形成集电极漂移电流ICN，这个电流是受发射结正向电压VBE控制的。此外，基区自身的少子电子与集电区的少子空穴也要在集电结反偏作用下产生漂移，形成集电结反向饱和电流ICBO，方向与ICN一致。两者构成集电极电流IC<img src="https://i.imgur.com/88I82oQ.png" alt="image-20221024174813373" style="zoom:50%;" /></li>
<li>ICBO不受发射结电压控制，因而对放大没有贡献。它的大小取决于基区和集电区的少子浓度，数值很小，但受温度影响很大，容易使BJT工作不稳定。</li>
</ul>
<h3 id="BJT的基极电流："><a href="#BJT的基极电流：" class="headerlink" title="BJT的基极电流："></a>BJT的基极电流：</h3><img src="https://i.imgur.com/DRud4z6.png" alt="image-20221024174922123" style="zoom:50%;" />

<h3 id="英文版公式："><a href="#英文版公式：" class="headerlink" title="英文版公式："></a>英文版公式：</h3><h4 id="Collector-current"><a href="#Collector-current" class="headerlink" title="Collector current:"></a>Collector current:</h4><p><img src="https://i.imgur.com/AwnwO82.png"></p>
<h4 id="Base-Current"><a href="#Base-Current" class="headerlink" title="Base Current:"></a>Base Current:</h4><img src="https://i.imgur.com/FwssXsr.png" alt="image-20221024175254607" style="zoom:50%;" />

<img src="https://i.imgur.com/CUoC0mC.png" alt="image-20221024175321436" style="zoom:50%;" />

<img src="https://i.imgur.com/AGtPSnZ.png" alt="image-20221024175413180" style="zoom:50%;" />

<h4 id="β-ratio"><a href="#β-ratio" class="headerlink" title="β ratio:"></a>β ratio:</h4><img src="https://i.imgur.com/FT1Ws0a.png" alt="image-20221024175632656" style="zoom:50%;" />

<h4 id="Optimised-优化"><a href="#Optimised-优化" class="headerlink" title="Optimised(优化):"></a>Optimised(优化):</h4><img src="https://i.imgur.com/EI0IfyP.png" alt="image-20221024175713822" style="zoom:50%;" />

<h2 id="Early-Effect"><a href="#Early-Effect" class="headerlink" title="Early Effect"></a>Early Effect</h2><p><img src="https://i.imgur.com/g47zJdP.png"></p>
<p><img src="https://i.imgur.com/UjSJ0xU.png"></p>
<p><img src="https://i.imgur.com/0ONvyp3.png"></p>
<p><img src="https://i.imgur.com/buKCCuu.png"></p>
<ul>
<li>Small -signal model</li>
</ul>
<p><img src="https://i.imgur.com/MaiWE7X.png"></p>
<p><img src="https://i.imgur.com/LlAtTBD.png"></p>
<p><img src="https://i.imgur.com/CYf1j9l.png"></p>
]]></content>
      <categories>
        <category>微电子电路</category>
      </categories>
      <tags>
        <tag>Micro_system</tag>
      </tags>
  </entry>
  <entry>
    <title>微电子之芯片流程学习日记</title>
    <url>/2022/10/10/Micro%20Electronic/%E5%BE%AE%E7%94%B5%E5%AD%90%E4%B9%8B%E8%8A%AF%E7%89%87%E6%B5%81%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="芯片制作工艺流程"><a href="#芯片制作工艺流程" class="headerlink" title="芯片制作工艺流程"></a>芯片制作工艺流程</h1><p>Cmos unit process</p>
<blockquote>
<ul>
<li><p>Wafer Manufacture（晶圆制造）</p>
</li>
<li><p>Doping（掺杂）</p>
</li>
<li><p>Photolithography（光刻）</p>
</li>
<li><p>Thin Film Removal（薄膜去除）</p>
</li>
<li><p>Thin Film Deposition（薄膜沉积）</p>
</li>
</ul>
</blockquote>
<p>CMOS process integration</p>
<blockquote>
<ul>
<li>Frontend-of-Line(FEOL)  <strong>前端制作</strong></li>
<li>Backend-of-Line(BEOL) <strong>后端制作</strong></li>
<li>CMOS Transistor <strong>CMOS晶体管</strong></li>
<li>Interconnection&#x2F;Passivation <strong>互连</strong></li>
</ul>
</blockquote>
<h2 id="CMOS-unit-process"><a href="#CMOS-unit-process" class="headerlink" title="CMOS unit process"></a>CMOS unit process</h2><h3 id="1-Wafer-manufacture-晶圆制造"><a href="#1-Wafer-manufacture-晶圆制造" class="headerlink" title="1. Wafer manufacture(晶圆制造)"></a>1. Wafer manufacture(晶圆制造)</h3><p><strong>了解一下就行</strong></p>
<p>三个步骤</p>
<blockquote>
<ol>
<li>Si Refinement(硅精细化)</li>
<li>Crystal Growth(生成晶圆所需要的晶体（Crystal）)</li>
<li>Wafer Formation(形成晶圆)</li>
</ol>
</blockquote>
<h4 id="1-1-Si-Refinement-硅精细化"><a href="#1-1-Si-Refinement-硅精细化" class="headerlink" title="1. 1 Si Refinement(硅精细化)"></a>1. 1 Si Refinement(硅精细化)</h4><p>化学方程式: SiO2 + 2C -&gt; Si + 2CO</p>
<ul>
<li><p><strong>其流程就是从二氧化硅在2000摄氏度的高温下（2000oC furnace producing）提取98%的纯硅</strong></p>
</li>
<li><p><strong>然后蒸馏和还原（distillation &amp; reduction） &#x3D; &gt; EGS的多晶块(<a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/main/Wafer%20Manufacture.pdf">晶圆制作</a>)</strong></p>
</li>
</ul>
<h4 id="1-2-Crystal-Growth-“Czochralski-CZ-Growth”-晶体生长"><a href="#1-2-Crystal-Growth-“Czochralski-CZ-Growth”-晶体生长" class="headerlink" title="1.2  Crystal Growth: “Czochralski  (CZ)  Growth” (晶体生长)"></a>1.2  Crystal Growth: “Czochralski  (CZ)  Growth” (晶体生长)</h4><img src="https://i.imgur.com/Azs7XvT.png" alt="image-20221011132427990" style="zoom:50%;" />

<blockquote>
<ul>
<li>EGS在石英坩锅中熔化（quartz crucible）</li>
<li>然后加入晶种（seed crystal）</li>
<li>转动缓慢去除锭或晶锭（ingot or boule）</li>
</ul>
</blockquote>
<h4 id="1-3-Wafer-Formation-形成晶圆-、"><a href="#1-3-Wafer-Formation-形成晶圆-、" class="headerlink" title="1.3 Wafer Formation(形成晶圆)、"></a>1.3 Wafer Formation(形成晶圆)、</h4><blockquote>
<ul>
<li><p>使用金刚石锯将硅锭切割成晶片（~1mm）</p>
</li>
<li><p>化学机械抛光（Chemical Mechanical Polishing (CMP)）&#x3D;&gt;镜面抛光（Mirror Finish）</p>
</li>
</ul>
</blockquote>
<h3 id="2-Thermal-Oxidation-热氧化"><a href="#2-Thermal-Oxidation-热氧化" class="headerlink" title="2. Thermal Oxidation(热氧化)"></a>2. Thermal Oxidation(热氧化)</h3><p>SiO2（二氧化硅）充当稳定的介电介质和加工掩模(注入&#x2F;扩散&#x2F;蚀刻)。</p>
<p>生成SiO2的化学方程式:</p>
<blockquote>
<p>温度都在～1000摄氏度左右</p>
<ul>
<li>Dry(干式): Si + O2 -&gt; SiO2</li>
<li>Wet(湿式): Si + 2H2O -&gt; SiO2 + 2H2</li>
</ul>
</blockquote>
<img src="https://i.imgur.com/ZzwmtWE.png" alt="image-20221011133759646" style="zoom:50%;" />

<p><strong>The oxidant must travel through the SiO2 as it builds up(氧化剂在积累时必须穿过SiO2)</strong></p>
<p><strong>硅晶体表面生成一层SiO2，Si在氧化过程中会被消耗</strong></p>
<img src="https://i.imgur.com/ybKBJCN.png" alt="image-20221011134107569" style="zoom:50%;" />

<blockquote>
<ul>
<li><p>干氧化: 较慢但较致密的SiO2(&lt;300nm thick厚)</p>
</li>
<li><p>湿氧化: 更快但质量较差(&lt;1um thick厚)</p>
</li>
</ul>
</blockquote>
<p>注意：温度，压力，氧化剂类型和晶圆特性也会影响氧化速度</p>
<img src="https://i.imgur.com/iAHdwq6.png" alt="image-20221011134420347" style="zoom:50%;" />

<p>上图过程:</p>
<blockquote>
<p><strong>两种炉：</strong></p>
<ul>
<li><p>管式炉：由加热元件包围的石英管</p>
</li>
<li><p>快速热处理（Rapid Thermal Processing (RTP)）炉（Furnace）:同上， 但是使用加热灯</p>
</li>
</ul>
</blockquote>
<h3 id="3-Doping（掺杂）"><a href="#3-Doping（掺杂）" class="headerlink" title="3. Doping（掺杂）:"></a>3. Doping（掺杂）:</h3><h4 id="3-1-Ion-Implantation（离子注入）："><a href="#3-1-Ion-Implantation（离子注入）：" class="headerlink" title="3.1 Ion Implantation（离子注入）："></a>3.1 Ion Implantation（离子注入）：</h4><img src="https://i.imgur.com/16zrGqS.png" alt="image-20221011134858222" style="zoom:50%;" />

<p>上图流程:</p>
<blockquote>
<ul>
<li>掺杂剂在电场中被电离和加速(Dopants are ionised &amp; accelerated in an electric field.)。</li>
<li>表面是轰炸(Surface is bombarded.)。</li>
<li>晶格损伤通过退火来修复(Lattice damage is repaired by annealing.)。</li>
</ul>
</blockquote>
<p><strong>⚠️注意：离子由电场产生。离子的选择使用“质谱仪”。在加速后，离子通过静电透镜扫描晶圆。</strong></p>
<p>离子注入控制严密，可在低温下进行。通常需要戴口罩。</p>
<img src="https://i.imgur.com/5kvc7mv.png" alt="image-20221011135411400" style="zoom:50%;" />



<h4 id="3-2-Diffusion-扩散"><a href="#3-2-Diffusion-扩散" class="headerlink" title="3.2 Diffusion(扩散):"></a>3.2 Diffusion(扩散):</h4><p>流程：</p>
<blockquote>
<ul>
<li>植入后，高温加工&#x3D;&gt;3D扩散的掺杂剂（dopants）</li>
<li>扩散与掺杂梯度和热能（dopant gradient &amp; thermal energy.）成正比</li>
<li>上图所示的植入配置文件(ẟ-Function)的分布。</li>
</ul>
</blockquote>
<h3 id="4-Photolithography-光刻"><a href="#4-Photolithography-光刻" class="headerlink" title="4. Photolithography(光刻):"></a>4. Photolithography(光刻):</h3><p>“图案化”的处理过程使用：EM辐射，掩模和光刻胶（光敏有机物）（EM radiation, a mask &amp; photoresist (light-sensitive Organic polymer)）。</p>
<p>其”图案化“的步骤：</p>
<img src="https://i.imgur.com/iG4IrK4.png" alt="image-20221011140209716" style="zoom:50%;" />

<blockquote>
<p><strong>SiO2（二氧化硅）光刻</strong></p>
<ul>
<li>a) SiO2热生长。</li>
<li>b)光刻胶滴入、旋转和软烤到晶圆表面。</li>
<li>c)透明和不透明区域的掩膜选择性地将光刻胶暴露在电磁辐射(如紫外线)下。3种类型的曝光:接触，接近和投影(-&gt;10X)曝光。两种类型的光刻胶:正色调(可溶性曝光)和负色调(聚合曝光)。</li>
<li>d)使用碱性溶剂显影晶圆会产生+&#x2F;-图像。然后是硬烤的晶圆。</li>
<li>e)蚀刻用于将光刻胶图案转移到SiO2薄膜上。这就产生了“特性”。</li>
<li>f)用另一种溶剂剥离未显影的光刻胶。</li>
</ul>
</blockquote>
<ol>
<li>⚠️注意：掩模对中是关键的制造。用“配准误差(Registration error)”来衡量。</li>
</ol>
<img src="https://i.imgur.com/cMo5swz.png" alt="image-20221011140945356" style="zoom:50%;" />

<ol start="2">
<li>⚠️注意： 衍射限制了晶圆上的“最小特征尺寸”:𝑀&#x3D;𝐶1𝜆&#x2F;NA, C1是一个从0.5到1的常数，NA是投影透镜的自然孔径，𝑁𝐴&#x3D;𝑛⋅sin𝜃，其中n&#x3D;晶圆和透镜之间的折射率。</li>
</ol>
<img src="https://i.imgur.com/0DqKrZW.png" alt="image-20221011141047396" style="zoom:50%;" />

<ol start="3">
<li><p>⚠️注意：焦点深度(Depth of Focus)(DOF)限制了不同高度的图案:DOF&#x3D;𝐶2𝜆&#x2F;NA^2。晶圆必须平面化，以优化最小特征尺寸和自由度之间的权衡。这是使用(化学机械抛光)CMP实现的。</p>
<img src="https://i.imgur.com/9jpH1x4.png" alt="image-20221011141526545" style="zoom:50%;" /></li>
</ol>
<h3 id="5-Thin-Film-Removal-去除薄膜"><a href="#5-Thin-Film-Removal-去除薄膜" class="headerlink" title="5. Thin Film Removal(去除薄膜):"></a>5. Thin Film Removal(去除薄膜):</h3><p>两种方法去除薄膜(Thin Film Removal)</p>
<blockquote>
<ul>
<li>蚀刻<ul>
<li>干法（Dry）</li>
<li>湿法（Wet）</li>
</ul>
</li>
<li>化学机械抛光(CMP)</li>
</ul>
</blockquote>
<h4 id="5-1-蚀刻参数"><a href="#5-1-蚀刻参数" class="headerlink" title="5.1 蚀刻参数"></a>5.1 蚀刻参数</h4><ol>
<li><p>选择性(Selectivity)，S &#x3D; R2&#x2F;R1 : 一种材料与另一种材料的蚀刻速率之比。理想情况下S值很高。</p>
</li>
<li><p>各向异性(Anisotropy)，Af&#x3D; 1- R1&#x2F;Rv : 测量材料在横向和纵向的腐蚀速率。理想情况下，𝐴𝑓&#x3D;1 &#x3D;&gt;是各向异性的。</p>
</li>
</ol>
<img src="https://i.imgur.com/yNtKs1D.png" alt="image-20221011190018149" style="zoom:50%;" />

<h4 id="5-2-两种蚀刻过程"><a href="#5-2-两种蚀刻过程" class="headerlink" title="5.2 两种蚀刻过程"></a>5.2 两种蚀刻过程</h4><h5 id="5-2-1-湿法蚀刻"><a href="#5-2-1-湿法蚀刻" class="headerlink" title="5.2.1 湿法蚀刻"></a>5.2.1 湿法蚀刻</h5><p>湿法蚀刻的作用：(高S但各向同性)。通常用于清洁，如微粒和污染物去除。</p>
<p>湿式蚀刻(etch tanks)槽在精确的温度控制下使用超声波振动蚀刻剂。蚀刻后，晶圆片被冲洗和纺干。–（tank 槽）</p>
<img src="https://i.imgur.com/V1of0sB.png" alt="image-20221011191123235" style="zoom:50%;" />

<h5 id="5-2-2-干法蚀刻-Controllable-𝑆-and-𝐴𝑓"><a href="#5-2-2-干法蚀刻-Controllable-𝑆-and-𝐴𝑓" class="headerlink" title="5.2.2  干法蚀刻(Controllable 𝑆 and 𝐴𝑓)"></a>5.2.2  干法蚀刻(Controllable 𝑆 and 𝐴𝑓)</h5><p>使用三种方法:溅射刻蚀(Sputter Etching)、等离子刻蚀(Plasma Etching)和活性离子刻蚀(Reactive Ion Etching)(RIE)。</p>
<blockquote>
<ul>
<li>溅射蚀刻Sputter Etching(低S但各向异性)</li>
</ul>
<p>电离的惰性气体在真空中在两个直流电极之间形成等离子体。阴极上的晶圆被带正电的离子轰击。</p>
<img src="https://i.imgur.com/NlDnPCo.png" alt="image-20221011191936380" style="zoom:50%;" />
</blockquote>
<blockquote>
<ul>
<li>等离子体刻蚀: (高S但各向同性)</li>
</ul>
<p>非惰性气体电离形成自由基。同样，等离子体是在真空中使用射频电位形成的。这些自由基与晶圆表面发生反应，产生的产物以气体的形式泵出。</p>
<img src="https://i.imgur.com/vwA0RT8.png" alt="image-20221011192244023" style="zoom:50%;" />
</blockquote>
<blockquote>
<ul>
<li>RIE蚀刻:(高S但各向异性)</li>
</ul>
<p>提供溅射和等离子刻蚀的好处。在这里，气体的混合物(如氟碳化合物)被电离形成电离种和自由基的等离子体。然后，在阳极的晶圆表面，与合成的等离子体发生化学和机械的相互作用。</p>
<img src="https://i.imgur.com/NYMQOQo.png" alt="image-20221011192416265" style="zoom:50%;" />
</blockquote>
<h5 id="5-2-3-Chemical-Mechanical-Polishing-化学机械抛光-或-化学机械平坦化"><a href="#5-2-3-Chemical-Mechanical-Polishing-化学机械抛光-或-化学机械平坦化" class="headerlink" title="5.2.3 Chemical Mechanical Polishing 化学机械抛光 或 化学机械平坦化"></a>5.2.3 Chemical Mechanical Polishing 化学机械抛光 或 化学机械平坦化</h5><ul>
<li>研磨性化学浆液被涂在衬垫上。</li>
<li>去除材料的机理有机械和化学两种。</li>
<li>适用于金属、硅及绝缘材料。</li>
</ul>
<img src="https://i.imgur.com/8rnHaaV.png" alt="image-20221011192701256" style="zoom:50%;" />

<h3 id="6-Thin-Film-Deposition-薄膜沉积"><a href="#6-Thin-Film-Deposition-薄膜沉积" class="headerlink" title="6. Thin Film Deposition(薄膜沉积)"></a>6. Thin Film Deposition(薄膜沉积)</h3><p>半导体(Si，多晶硅Si)，绝缘体(SiO2, Si3N4，玻璃)和导体(Al, Cu, Co, Ti, W,TiN)是制造现代IC组件所需的材料。</p>
<p>⚠️<strong>薄膜通常是用PVD和CVD方法制作的。</strong></p>
<p>薄膜厚度的均匀性必须控制在晶圆上的+&#x2F;-5nm。困难可能由表面台阶和缝隙呈现。</p>
<img src="https://i.imgur.com/FMe9t3r.png" alt="image-20221011192952820" style="zoom:50%;" />

<h4 id="6-1-Physical-Vapour-Deposition-物理汽相沉积-PVD"><a href="#6-1-Physical-Vapour-Deposition-物理汽相沉积-PVD" class="headerlink" title="6.1 Physical Vapour Deposition(物理汽相沉积)(PVD)"></a>6.1 Physical Vapour Deposition(物理汽相沉积)(PVD)</h4><p>沉积的材料在晶圆表面凝结之前通过气相(<strong>Deposited material is passed through a gas phase prior to condensing on the wafer surface</strong>)。蒸发需要在真空中加热(灯丝或电子束)材料，晶圆固定在蒸发路径上。</p>
<p>或者，溅射沉积轰击目标材料，该材料将原子喷射到阳极的晶圆上。在这里，目标原子可以形成一层薄膜。</p>
<img src="https://i.imgur.com/SWabmPq.png" alt="image-20221011193205368" style="zoom:50%;" />

<h4 id="6-2-Chemical-Vapour-Deposition-化学气相沉积-CVD"><a href="#6-2-Chemical-Vapour-Deposition-化学气相沉积-CVD" class="headerlink" title="6.2 Chemical Vapour Deposition(化学气相沉积)(CVD)"></a>6.2 Chemical Vapour Deposition(化学气相沉积)(CVD)</h4><p>沉积材料是由晶圆表面的气体一起反应产生的(<strong>Deposited material is produced by gases reacting together at the wafer surface</strong>.)。沉积多种材料，具有比PVD更好的台阶覆盖率。类型包括:APCVD, LPCVD和PECVD(等离子体增强)。</p>
<blockquote>
<ul>
<li>APCVD:氧化管炉的低温。</li>
<li>LPCVD:需要较高的温度，但产生保形膜。</li>
<li>PECVD:既提供低温，又产生保形膜，因为等离子体将能量传递给目标气体。</li>
</ul>
<img src="https://i.imgur.com/yOd6xc4.png" alt="image-20221011193439690" style="zoom:50%;" />
</blockquote>
]]></content>
      <categories>
        <category>微电子电路</category>
      </categories>
      <tags>
        <tag>Micro_system</tag>
      </tags>
  </entry>
  <entry>
    <title>yolo学习日记</title>
    <url>/2022/10/03/CNN%20project/yolo%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>yolo</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-7-9</title>
    <url>/2022/07/09/Biuld%20blog/2022-7-9/</url>
    <content><![CDATA[<ul>
<li>更新了个人博客评论区，国内使用gitee，国外可以使用gitment，在github上申请client id 和密码，在config.yml里设置即可实现评论区</li>
<li>无法从博客里登陆github实现评论功能</li>
<li>更新了主题页面，使其更加简洁</li>
</ul>
]]></content>
      <categories>
        <category>学习博客搭建</category>
      </categories>
      <tags>
        <tag>blog-updata</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-7-8</title>
    <url>/2022/07/08/Biuld%20blog/2022-7-8/</url>
    <content><![CDATA[<ul>
<li>学习搭建自己的个人博客 <a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=5&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">b站教程1</a> <a href="https://www.bilibili.com/video/BV1LE411N7Nx?p=7&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">b站教程2</a> <a href="https://www.cnblogs.com/huanhao/p/hexobase.html">文字说明</a></li>
<li>关于文字说明说用的cnpm和npm，cnpm为中国区内所使用，而npm为全球通用，功能一致</li>
<li>关于在mac中使用npm出现权限问题  &gt; <a href="https://www.youtube.com/watch?v=nPLx3rSZPXI">YouTube视频解决mac权限问题</a></li>
<li>npm的更新和下载（mac端） <a href="https://radixweb.com/blog/installing-npm-and-nodejs-on-windows-and-mac">看该网站，避免出现–global问题</a></li>
<li>使用github或其他网站当服务器需要ssh，跟随教程，ssh分为两种，一种是公钥 <em>&#x2F;.ssh&#x2F;id_rsa.pub</em> ,私钥则无pub</li>
<li>搭建网站要注意基础自己的命名和邮箱，终端命令上传文件时要输入</li>
</ul>
<blockquote>
<p>密码则要到github里申请一个 GitHub-setting-developer setting- personal access token</p>
</blockquote>
]]></content>
      <categories>
        <category>学习博客搭建</category>
      </categories>
      <tags>
        <tag>blog-updata</tag>
      </tags>
  </entry>
  <entry>
    <title>网站软件推荐</title>
    <url>/2022/11/25/Recommand%20Website/%E5%A5%BD%E7%94%A8%E5%A4%A7%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h1 id="盘点个人好评的网站和软件——不定期更新–2024-8-15"><a href="#盘点个人好评的网站和软件——不定期更新–2024-8-15" class="headerlink" title="盘点个人好评的网站和软件——不定期更新–2024.8.15"></a>盘点个人好评的网站和软件——不定期更新–2024.8.15</h1><h2 id="视频资源网"><a href="#视频资源网" class="headerlink" title="视频资源网"></a>视频资源网</h2><p><a href="https://dmly.me/">动漫领域</a> -动漫下载网站与漫猫同源,有着很多字幕组的集合资源</p>
<p><a href="https://www.comicat.org/">慢猫bt</a> -动漫下载网站，就是封面上的广告有点瑟琴。</p>
<p><a href="https://pirate-bay-proxy.org/eng1/">海盗湾</a> -种子下载网，支持中英文，国内需要FQ，可以下载各种电影和电视剧。</p>
<p><a href="https://www.zimuxia.cn/">Fix字幕组</a> -电视剧或电影下载，中文字幕组。</p>
<p><a href="https://zimuku.org/">字幕库</a> -字幕论坛，网友都是各路神仙</p>
<p><a href="https://bangumi.tv/">Bangumi番组计划</a> -动漫评分论坛，动漫界的豆瓣。</p>
<p><strong>不会还在用迅雷下载吧，这边给您推荐一个叫做<a href="https://www.bitcomet.com/en">BitComet</a>的软件，请搭配食用哦😊</strong></p>
<blockquote>
<p>mac&#x2F;windows&#x2F;android</p>
</blockquote>
<h2 id="音乐无损下载"><a href="#音乐无损下载" class="headerlink" title="音乐无损下载"></a>音乐无损下载</h2><p><a href="http://www.acgjc.com/">ACG音乐</a> -动漫OST免费下载</p>
<p><a href="https://www.hifini.com/">hifini</a> -遇到的最全的无损文件下载论坛，三次免费，付费10块钱可以下载1010次</p>
<p><a href="https://pixabay.com/zh/">pixabay</a> -很多免版税的特效音乐，当然里面不仅仅有音乐还有视频和图片。</p>
<p><a href="https://musescore.com/">musescore</a> -国外比较全的乐谱面，国内找不到可以在这个网站找。而且还是免费的。</p>
<h2 id="AI网站"><a href="#AI网站" class="headerlink" title="AI网站"></a>AI网站</h2><p><a href="https://ttsmaker.com/">TTSmaker</a> -免费的文字转语音speaker软件。</p>
<p><a href="https://goblin.tools/">Magic To do</a> -免费的使用AI生产todolist，方便不知道计划该写什么的人有更快捷的理解。</p>
<p><a href="https://anitabi.cn/">圣地巡礼地图</a> -一款由国人开发的圣地巡礼的地图网站，主要服务于日本番剧。</p>
<h2 id="图片网站"><a href="#图片网站" class="headerlink" title="图片网站"></a>图片网站</h2><p><a href="https://www.pixiv.net/">pixiv</a> -全球acg独立画师聚集地</p>
<p><a href="https://www.pexels.com/zh-cn/">pexels</a> -全球免费商用图片网站</p>
<p><a href="https://wallhaven.cc/">wallhaven</a> -壁纸网站，免费且有着极高的分辨率</p>
<p><a href="https://huggingface.co/spaces/PaddlePaddle/ERNIE-ViLG">AI画图-中文</a> -人工智能改变世界,不需要下载，直接网页生产图片</p>
<p><a href="https://huggingface.co/spaces/stabilityai/stable-diffusion">AI画图-英文</a> -也是直接网页生产图片，但是英文描述。</p>
<p><a href="https://sketch.metademolab.com/canvas">gift图生成</a> -可以根据你给的图片来生成gift图</p>
<p><a href="https://cn.pattern.monster/">pattern monster</a> -自定义svg图片，如logo，工程图。</p>
<p><a href="https://waifulabs.com/">AI生成头像</a> -可以自定义一个独一无二的动漫头像。</p>
<p><a href="https://www.irasutoya.com/">手绘插画</a> -可以找到很多有趣的手绘图。</p>
<p><a href="https://www.sony.net/united/clock/">世界风景图</a> -sony罪大滔天，搞得百姓怨声载道</p>
<p><a href="https://clipdrop.co/relight">图片打光</a> -缺少光源后期补上。</p>
<p><a href="https://opensea.io/">opensea</a> -opensea是一款基于区块链交易的NFT图片网站，但是图片可以免费下载。</p>
<h2 id="PPT下载"><a href="#PPT下载" class="headerlink" title="PPT下载"></a>PPT下载</h2><p><a href="https://slidesgo.com/">slidesgo</a> -免费的ppt素材下载，非常好用！！</p>
<p><strong>可以搭配上面的图片网站食用哦～～</strong></p>
<h2 id="字体网站"><a href="#字体网站" class="headerlink" title="字体网站"></a>字体网站</h2><p><a href="https://fonts.google.com/">Google fonts</a>-谷歌字体，可直接复制字体前端代码。</p>
<p><a href="https://font.chinaz.com/">免费的中文字体网</a>-中文字体，免费下载</p>
<h2 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h2><p><a href="https://www.csdn.net/">csdn</a> -中文科技论坛</p>
<p><a href="https://github.com/">Github</a> -全球最大的开发者论坛，最重要的是免费</p>
<p><a href="https://www.imooc.com/">慕课网</a> -学习程序的起点，但是深入学习就需要付费了。</p>
<p><strong>除了这些论坛和课程网站，一般想要学习的软件的官网会有相关的免费课程学习，可以搭配食用。</strong></p>
<p><a href="https://www.wordtune.com/?utm_campaign=BrandSearch&ad_set_name=Wordtune&utm_source=google-search&utm_medium=cpc&utm_campaign=BrandSearch&ad_set_name=Wordtune&utm_term=wordtune&gclid=Cj0KCQjwk5ibBhDqARIsACzmgLQphJVgs891YNUHyBBz-XqN1uHOAGlPRoL0DPIVGoyUVetR7Em3NEgaAoXNEALw_wcB">论文概括插件</a> -直接概括论文文章，可以更好的引入论文。</p>
<p><a href="https://www.citethisforme.com/">论文引用规范转化</a> -可直接在线转换规范的引用文献句子。</p>
<p><a href="https://www.deepl.com/translator">DeepL</a> -翻译软件，将自己的语言翻译得更加学术（高级词汇？）</p>
<p><a href="https://www.gushiju.net/">古诗词解析</a> -非常好用的古诗词解析网站</p>
<p><a href="https://www.electronicshub.org/tutorials/">Electronic Hub</a> -非常好用的电子diy学习网站，有着跟电子相关的专业知识教程。</p>
<p><a href="https://github.com/PKUFlyingPig/cs-self-learning">cs-self-learning</a> -一名清华学长为了照顾自学CS的人而制作的攻略放在github上，<strong>非常非常非常的良心</strong>。</p>
<p><a href="https://tools.miku.ac/">miku.tool</a> -非常好用的工具集合网站，同时也有开发app。</p>
<p><a href="https://typora.io/">typora</a> -一款好用轻量级的Markdown 语法编译器。</p>
<p><a href="https://colab.research.google.com/">colab</a> -谷歌云linux的juypter 环境搭建。</p>
<p><a href="https://www.feishu.cn/">飞书</a>-非常好用的项目管理app，公司或者组织还有个人都可以使用，现在已经不需要额外挂web到broswer了。</p>
<p><a href="https://www.right.com.cn/forum/">恩山无线论坛</a>-一个讨论无线路由器和各种硬软路由的论坛。</p>
<h2 id="游戏攻略网站"><a href="#游戏攻略网站" class="headerlink" title="游戏攻略网站"></a>游戏攻略网站</h2><p><a href="https://kiranico.com/">怪物猎人材料装备搜素网站</a> -里面有着怪猎每个版本的装备内容更新。</p>
<p><a href="https://www.nexusmods.com/">nexusmods</a> -全球最大mod网，各种游戏可以打上喜欢的mod</p>
<p><a href="https://www.gamersky.com/">游民星空</a> -提到游戏攻略当然不会缺少游民老哥。</p>
<p><a href="https://bbs.3dmgame.com/forum.php?gid=441">3dm论坛</a> -最好用的游戏论坛之一。</p>
<p><a href="https://ac-turnip.com/">动森大头菜价格计算器</a>-动森买卖大头菜计算器。</p>
<h2 id="win和mac软件推荐"><a href="#win和mac软件推荐" class="headerlink" title="win和mac软件推荐"></a>win和mac软件推荐</h2><p><a href="https://termius.com/">Termius</a>-连接ssh和telnet的可视化窗口。</p>
<p><a href="https://www.warp.dev/">warp</a>-可视化终端，可以使用AI。</p>
<p><a href="https://binarynights.com/">ForkLift</a>-非常好用的文件夹管理软件。</p>
<p><a href="https://www.raycast.com/">RayCast</a>-替代Mac Search栏的好用工具</p>
<p><a href="https://cyberduck.io/">CyberDuck</a>-在mac中非常好用的连接设备访问服务器工具。</p>
<p><a href="https://podman.io/">podmen</a>-目前好用的开源container工具，包括docker。</p>
<h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><p><a href="https://chromewebstore.google.com/detail/immersive-translate-trans/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=en-US&utm_source=ext_sidebar">沉浸式翻译</a> -谷歌和edge都支持，不仅能翻译各种文档，还可以直接翻译英语字幕，自己调节翻译api而且全部免费。</p>
<p><a href="https://chromewebstore.google.com/detail/adblock-%E2%80%94-block-ads-acros/gighmmpiobklfepjocnamgkkbiglidom?hl=en-US&utm_source=ext_sidebar">Adblock</a> -屏蔽浏览器广告。</p>
]]></content>
      <tags>
        <tag>网站推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>法国意大利旅行攻略</title>
    <url>/2022/08/23/Travel/%E6%B3%95%E5%9B%BD%E6%84%8F%E5%A4%A7%E5%88%A9%E4%B8%A4%E5%91%A8%E6%B8%B8/</url>
    <content><![CDATA[<h1 id="旅游路线和攻略"><a href="#旅游路线和攻略" class="headerlink" title="旅游路线和攻略"></a>旅游路线和攻略</h1><h2 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h2><h3 id="签证准备材料"><a href="#签证准备材料" class="headerlink" title="签证准备材料"></a>签证准备材料</h3><ul>
<li><p><input checked="" disabled="" type="checkbox"> 
irp正反面复印</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
护照及其复印件</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
预约往返机票</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
旅行行程计划</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
在读证明</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
父母三个月的流水</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
AIB流水</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
住宿预约单</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
旅游健康保险</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
父母资金担保书</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
申根表格（官网那个）</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
Anpost envolop and stamp (邮件的信封和邮票)</p>
</li>
</ul>
<blockquote>
<p> 接待员很可能会不接受你的sponsor和父母流水等文件，因为这些文件大部分都是中文，接待员不需要中文的文件，他们是看不懂的，很看几率，所以准备好以访万一。</p>
</blockquote>
<h3 id="签证面试当天战况"><a href="#签证面试当天战况" class="headerlink" title="签证面试当天战况"></a>签证面试当天战况</h3><p>她大概会问关于你旅游计划的问题，让你确认是否按照你所提供的旅行行程计划进行行动，然后按照签证官的要求进行回答和提交文件即可，速度很快，不会耽误太多时间。</p>
<h3 id="人生第一次遭到拒签😭"><a href="#人生第一次遭到拒签😭" class="headerlink" title="人生第一次遭到拒签😭"></a>人生第一次遭到拒签😭</h3><p>审核官和接待员并不是一个人，接待人会问一些简单的问题，而审核官会仔细审核文件</p>
<blockquote>
<p>拒签原因，由于我们在网上购买了假机票和假酒店，然后让审核官对我们的行程产生了怀疑，且怀疑我们文件的真实性</p>
<ul>
<li>忠告：不要在网上购买那种行程单和机票还有酒店，像法国这种严格一点的大使馆是行不通的。</li>
</ul>
</blockquote>
<h3 id="第二次被拒绝申请visa😳"><a href="#第二次被拒绝申请visa😳" class="headerlink" title="第二次被拒绝申请visa😳"></a>第二次被拒绝申请visa😳</h3><p>当你的主要目的填的是该国的时候，默认要在该国待待时间比其他国家时间长，不然不会连申请也不让你申请</p>
<h3 id="第三次申请签证🐎"><a href="#第三次申请签证🐎" class="headerlink" title="第三次申请签证🐎"></a>第三次申请签证🐎</h3><blockquote>
<p>只前往法国，改签费用: 改签费用45欧元；两张改签费用就是90欧</p>
<p>前往法国巴黎一个星期。</p>
<p>保险是20欧一次，前面浪费了两次，共计浪费了40欧</p>
</blockquote>
<h3 id="拿到签证😄"><a href="#拿到签证😄" class="headerlink" title="拿到签证😄"></a>拿到签证😄</h3><p>有效期一个月，可待在申根国15天</p>
<h2 id="开始旅行：法国"><a href="#开始旅行：法国" class="headerlink" title="开始旅行：法国"></a>开始旅行：法国</h2><h3 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h3><ul>
<li>从都柏林机场坐飞机到法国巴黎</li>
</ul>
<blockquote>
<ul>
<li><p>⚠️注意：Cabin bag指的是那种小行李箱，可允许带上飞机，如果是大的行李箱则需要托运，在购买瑞安航空的时候一定要看清楚，自己携带的是哪一种行李箱，<strong>如果现场购买托运行李额度的话是59欧（非常贵）</strong>,<strong>提前在官网买额度只需要34欧</strong>。</p>
</li>
<li><p>其他各种注意事项跟国内一样，一般都要专属瑞安航空的柜台，可以提前track in。</p>
</li>
<li><p>瑞安航空排队是分两队的，一个是带cabin bag的priority队伍（优先上飞机），一个是无cabin bag的队伍。</p>
</li>
<li><p>抵达巴黎后，拿好行李，去排队让检查签证。</p>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>我抵达的是<strong>Beauvais</strong>机场，所以需要坐大巴去巴黎市中心，有专门的机器卖这种车票，没必要在拿行李的转盘那买，有很多这种机器卖票，如果机器弄不明白直接去人工售票到柜台那（地点就在坐巴士排队的地方，人工服务没人排队买票，速度非常快。）</li>
<li>下车后坐地铁去酒店。–&gt; <a href="https://zhuanlan.zhihu.com/p/20926145">地铁票攻略，非常实用</a></li>
</ul>
</blockquote>
<ul>
<li>在酒店休息会后去了巴黎第一站凯旋门</li>
</ul>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-040209.jpg" alt="DSC04624"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-040250.jpg" alt="DSC04640"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-040335.jpg" alt="DSC04674"></p>
<ul>
<li>凯旋门的对面那条特别宽的街道就是著名的香榭丽舍大道，有很多奢侈品店铺，但是我没钱</li>
</ul>
<p><img src="https://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-040535.jpg" alt="香榭丽舍大道"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-040554.jpg" alt="在法国，你能看到黑人比白人还多，这波可以说是反噬了"></p>
<p><strong>对于比较穷的我来说，香榭丽舍大道是我做不起的攻略，因此跳过。</strong></p>
<h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><ul>
<li>第二天我前往了巴黎铁塔进行观看</li>
</ul>
<blockquote>
<p>我是在去的前一天买票，在一个叫klook的平台买票</p>
<ul>
<li><strong>为什么不在官网买票呢</strong></li>
</ul>
<blockquote>
<p>因为根本买不到，如果想在官网买票的话<strong>预计需要提前4到5天进行订票</strong>（旅游旺季）</p>
</blockquote>
<ul>
<li>如果选择了在klook平台买票的话<strong>一定要注意看下方的使用说明</strong></li>
</ul>
<blockquote>
<p> 因为平台的票是一个团队票，需要一个指定的地方找个人给你一个团体票，然后时间到了那个人会带你去埃菲尔铁塔。</p>
<p><strong>个人感觉而言，在旅游旺季，团体票比个人票还爽，因为有<em>分散客和团体</em>两个通道，团体直接跳过一大截队伍，进去验票上楼。</strong></p>
</blockquote>
<ul>
<li>我在法国大部分需要门票的景点都用了klook平台进行购票</li>
</ul>
<blockquote>
<p>优点有: </p>
<ul>
<li>能直接归纳所有景点，非常容易寻找哪个是你想要购买的。</li>
<li>不溢价，该是多少欧元还是多少欧元，甚至有些比官网更便宜，而且是正版官网门票。</li>
<li>官网授权的潜规则平台。</li>
</ul>
</blockquote>
</blockquote>
<ul>
<li>自己拍的一些埃菲尔铁塔的照片</li>
</ul>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-035948.jpg" alt="埃菲尔铁塔远景"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-040027.jpg" alt="埃菲尔铁塔广场上正在写生的妹子"><img src="https://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-033808.jpg" alt="埃菲尔铁塔近景" style="zoom:100%;" /><img  src="https://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-034645.jpg" style="zoom:100%;" ><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-035142.jpg" style="zoom:100%;" /></p>
<ul>
<li>在瑟涅河周围逛了一圈，基本上最著名的景点都在瑟涅河附近</li>
</ul>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-041833.jpg" alt="抓拍到一对情侣秀恩爱"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-041927.jpg" alt="巴黎圣母院，由于前两年被火烧了一下，至今还未回复元气"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-042100.jpg" alt="瑟涅河旁边休息的旅客"></p>
<h3 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h3><ul>
<li>前往凡尔赛宫进行参观</li>
</ul>
<blockquote>
<ul>
<li><strong>购票提醒</strong></li>
</ul>
<blockquote>
<p><strong>在4月到10月之间的周二周五周末和公共假期之间是有音乐喷泉表演或音乐花园的</strong> –<a href="https://en.chateauversailles.fr/news/shows/fountains-shows-and-musical-gardens#pratical-information">凡尔赛宫音乐喷泉时间信息</a></p>
<p><a href="https://en.chateauversailles.fr/plan-your-visit/tickets-and-prices">凡尔赛宫官网售票</a> <a href="https://www.klook.com/activity/17463-chateau-versailles-tickets-paris/?spm=City.Popular:any::HotAct:Card_LIST&clickId=3750a84151">Klook平台售票</a></p>
<p>如果在有音乐喷泉表演和音乐花园之外的日期参观则<strong>只需要购买21欧的门票</strong></p>
<p><strong>有音乐表演的日子就要购买28.5欧的门票</strong></p>
<p>不推荐现场购票，排队会让你绝望。</p>
</blockquote>
<ul>
<li>凡尔赛宫APP，支持中文版</li>
</ul>
<blockquote>
<p>如果现场领不到能听解说的机器，可以在手机下载凡尔赛宫官方app</p>
<p>凡尔赛宫的每一个房间都有一个序号，这个序号链接着房间图片的历史故事，可以在手机的app上聆听。</p>
<p><strong>记得带耳机</strong>，不然手举的太累了</p>
</blockquote>
<ul>
<li>凡尔赛宫非常的大</li>
</ul>
<blockquote>
<p>如果选择去逛凡尔赛宫，则一天的计划只能是凡尔赛宫了，逛完非常耗费时间，也可以选择性逛，但还是建议一天逛完。</p>
<p>可能人生中就去这么一次了，不留遗憾。</p>
</blockquote>
<ul>
<li>准备好食物和水</li>
</ul>
<blockquote>
<p>如果选择逛完，食物和水是必不可少的，在花园和凡尔赛宫外的台阶和树荫可以坐下来吃东西。</p>
<p>没有带也没关系，宫殿和花园里都有卖，但是价格$$$</p>
</blockquote>
<ul>
<li>从市区坐地铁到凡尔赛宫</li>
</ul>
<blockquote>
<p>在巴黎一张1.7欧元的地铁票可以去巴黎任何一个站，但是去不了凡尔赛宫。</p>
<p>它相当于在市区外的一个县，<strong>需要购买2.4欧元的地铁票才行</strong></p>
<p>我由于不知道这些被逮到了</p>
<p><strong>如果被逮到了怎么办</strong>，不用担心，因为除了本地人都不知道要买2.4欧元的地铁票，所以都会被逮到，工作人员会将没买2.4欧元地铁票的人聚集在一起说明理由，然后放我们走。</p>
</blockquote>
</blockquote>
<ul>
<li>参观凡尔赛宫拍的照片</li>
</ul>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-045922.jpg" alt="DSC05088"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-02-050006.jpg" alt="DSC05175"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-141501.jpg" alt="DSC05096"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-141524.jpg" alt="DSC05194"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-141554.jpg" alt="DSC05206"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-141634.jpg" alt="DSC05241"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-141652.jpg" alt="DSC05312"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-141706.jpg" alt="DSC05334"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-141735.jpg" alt="DSC05358"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-142737.jpg" alt="DSC05555"></p>
<h3 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h3><p>由于个人喜好原因，本人喜欢周杰伦的音乐，去的时候周杰伦发了《最伟大的作品》专辑，主要拍摄地为法国，故去MV拍摄地点巡游。</p>
<h3 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h3><ul>
<li><p>前往世界古迹，圣米歇尔山又称圣米歇尔修道院</p>
</li>
<li><p>如何从巴黎前往圣米歇尔修道院</p>
</li>
</ul>
<blockquote>
<p>个人还是选择了<strong>在klook上买了一个跟团的票</strong></p>
<p>根据它的说明，凌晨6点在埃菲尔铁塔旁边的一个酒店集合，然后点人数一起坐大巴去圣米歇尔山</p>
<p>路程将近4个小时，会在途中服务区停车半小时，上厕所或者吃早餐等其他想干的事也能干。</p>
<ul>
<li><strong>大概上午11点抵达圣米歇尔山</strong></li>
<li><strong>下午4点离开</strong></li>
<li><strong>9点左右返回到埃菲尔铁塔旁酒店</strong>。</li>
</ul>
<p>相对于其他旅游方式，<strong>似乎这个选择是最便宜的</strong>。</p>
<ul>
<li>除了坐大巴去到圣米歇尔山后，还有什么服务吗？</li>
</ul>
<blockquote>
<p>没有</p>
<p>它只有一个作用，按时抵达圣米歇尔山，按时撤退。</p>
<p>到达后自己玩自己的，不会有导游之类的管你，只是要到点后返回巴士一个要求。</p>
</blockquote>
<ul>
<li>如果选择跟团一定要准时回到大巴，以免出现意外。</li>
</ul>
</blockquote>
<ul>
<li>自己拍的些图片</li>
</ul>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-144411.jpg" alt="DSC05738"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-144436.jpg" alt="DSC05758"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-144521.jpg" alt="DSC05824"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-144623.jpg" alt="DSC05926"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-144746.jpg" alt="DSC05972"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-144814.jpg" alt="DSC06057"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-145124.jpg" alt="DSC06204"></p>
<h3 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h3><ul>
<li>前往世界级博物馆卢浮宫</li>
</ul>
<blockquote>
<ul>
<li>如何前往卢浮宫。</li>
</ul>
<blockquote>
<p>官网买票，或各种第三方平台买票（包含美团淘宝等）</p>
<p><strong>官网买票一定要提前5天或者6天前买票，不然根本没票（旅游旺季）</strong></p>
<p><strong>第三方平台也是一样，如果不提前也买不到票</strong></p>
</blockquote>
<ul>
<li>如何浏览卢浮宫的藏品</li>
</ul>
<blockquote>
<p>如果有条件的同学一定要去拿一个解说器，它的本体是一个任天堂游戏机，非常好用。</p>
<ul>
<li>如何好用</li>
</ul>
<blockquote>
<p>能够搜索路线，带领你去任何你想观看的藏品</p>
<p>能够显示厕所或餐厅等位置。</p>
<p>实时能够知道自己所处的位置。</p>
<p>能够解说你想知道的藏品的历史和来源。</p>
<p><strong>支持中文或其他各国语言</strong></p>
</blockquote>
</blockquote>
<ul>
<li>卢浮宫非常非常大，一次性是逛不完的，有着来自世界各地的国家瑰宝。</li>
</ul>
<blockquote>
<p>所以一定要合理安排时间进行休息。</p>
</blockquote>
</blockquote>
<ul>
<li>当天拍的图片</li>
</ul>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-150147.jpg" alt="DSC06245"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-150741.jpg" alt="DSC06382"><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2022-11-04-151037.jpg" alt="人太多，只能远远的看一下蒙娜丽莎了"></p>
<h2 id="意大利"><a href="#意大利" class="headerlink" title="意大利"></a>意大利</h2><h3 id="Day1-1"><a href="#Day1-1" class="headerlink" title="Day1"></a>Day1</h3><p>从法国飞到意大利罗马，个人兴趣源于一款游戏，由育碧开发的《刺客信条》，非常推荐去玩一下刺客信条三部曲。</p>
<p>言回正传，从法国飞到意大利不会有任何阻拦，就相当于在一个国家的市区之间飞行，等于是国内的境内飞行，<strong>所以在申根国上飞机不会出境。</strong></p>
<p>我从巴黎飞到罗马抵达的是<strong>Ciampino</strong>机场，取出行李后，在门口有一排售票处，可以买到机场到市区的巴士票和火车票，巴士的号码是有点看不太懂的，可以上车前问一下司机巴士是不是去罗马市区。</p>
<p>按照自己的行程到达旅馆，如果除了罗马还想去佛罗伦萨，威尼斯等其他地方，有一个软件非常推荐使用，它就是<a href="https://www.eurail.com/en/plan-your-trip/rail-planner-app">Rail Planner</a>，在App Store和play store都有下载.</p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-172855.jpg" alt="罗马的街道"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-172935.jpg" alt="罗马的街道2"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-173051.jpg" alt="罗马的街道3"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-173128.jpg" alt="罗马竞技场又名罗马斗兽场"></p>
<p>在罗马其实不需要提前太多买门票，但是如果在旺季也可以提前买好以防万一，它不像巴黎这么多人。</p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-173305.jpg" alt="罗马竞技场内部，已经在战乱中损坏了"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-173420.jpg" alt="罗马竞技场内部2"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-174102.jpg" alt="古罗马广场"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-174146.jpg" alt="古罗马广场遗址，见证着古罗马的衰败"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-174307.jpg" alt="意大利某机构"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-174808.jpg" alt="夕阳下的小街道"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-174847.jpg" alt="夕阳下的小街道2"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-175136.jpg" alt="罗马的万神殿，似乎是以前教皇祈祷去的地"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-175252.jpg" alt="罗马小巷，路上走的时候还遇到拍电影或电视剧的"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-175402.jpg" alt="河边小道"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-175447.jpg" alt="河边"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-175510.jpg" alt="河边2，还遇到了本地拍照的一大群妹子"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-175600.jpg" alt="在梵蒂冈旁边桥路上的大提琴艺术家"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-175700.png" alt="夕阳下的河边，非常好看"></p>
<h3 id="Day2-1"><a href="#Day2-1" class="headerlink" title="Day2"></a>Day2</h3><p>去梵蒂冈一观，虽说是世界上最小的国家，但是其中蕴涵着丰富的文化底蕴，宗教文化十分浓厚</p>
<p>有两个地方可以值得看，<strong>一个是梵蒂冈正门的祈祷殿，一个是梵蒂冈博物馆</strong>，特别是它的博物馆，里面的藏品我们在历史书上都见过，非常值得一看。</p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-175904.jpg" alt="梵蒂冈广场，电影必炸场景"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-180217.jpg" alt="广场大殿前雕像，手拿长剑气势恢弘，这剑看着像中国剑"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-180330.jpg" alt="博物馆的艺术品1"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-180403.png" alt="历史书上的飞饼男人，艺术2"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-180454.jpg" alt="盲猜以某位君主为主角的罗马众生像"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-180549.jpg" alt="世界上最出名的旋转楼梯，就在梵蒂冈博物馆，有一种说不清的魅力"></p>
<h3 id="Day3-1"><a href="#Day3-1" class="headerlink" title="Day3"></a>Day3</h3><p>此时来到了作品《刺客信条2》的主角的故乡，艾吉奥的故乡，<strong>佛罗伦萨</strong>，给人一种平凡却不普通的观感，这是当时罗马帝国的一位城主统治的地方。</p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-181047.jpg" alt="刺客信条2开头动画的老涩批打架桥，非常出名的一座桥，只有这座桥上有着商铺和可居住的地方，可能也是当时罗马最大的桥吧"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-181328.jpg" alt="佛罗伦萨的一个集市"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-182339.jpg" alt="靠写生生活的艺术家们，特别多"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-182427.jpg" alt="佛罗伦萨全貌"></p>
<h3 id="Day4-1"><a href="#Day4-1" class="headerlink" title="Day4"></a>Day4</h3><p>威尼斯来啦，水城威尼斯</p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-182818.jpg" alt="水上城市"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-182853.jpg" alt="陈旧的威尼斯小城"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-182946.jpg" alt="寂静的小道上飘荡着潘多拉贡船"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-183059.jpg" alt="威尼斯狂欢节面具"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-183138.jpg" alt="船舶"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-183206.jpg" alt="叹息桥，听说犯人必经过的桥，到这个桥就会后悔自己犯下的错而叹息"></p>
<p><img src="http://jessyimag.oss-eu-west-1.aliyuncs.com/2023-01-21-183318.jpg" alt="餐厅"></p>
<p>结束–END</p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>基础篇1 unityUI基础操作</title>
    <url>/2022/07/06/unity/2022_7_6/</url>
    <content><![CDATA[<ul>
<li>修复文件缺失和在新电脑中安装新的软件</li>
<li>在package manager中导入created kit: code <strong><a href="https://assetstore.unity.com/packages/templates/tutorials/creator-kit-beginner-code-151986">模版网站</a></strong>   <strong><a href="https://learn.unity.com/project/chuang-zuo-zhe-tao-jian-chu-xue-zhe-dai-ma">学习页面</a></strong></li>
<li>跟随b站视频和文档进行学习，学习变量（个人基础比较好，快速浏览一遍）**<a href="https://www.bilibili.com/video/BV1Sf4y1E7MD?spm_id_from=333.999.0.0&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">视频32-05</a>** <strong><a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B04_%E5%88%9B%E4%BD%9C%E8%80%85%E5%A5%97%E4%BB%B6_%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%A3%E7%A0%81/02-%E5%8F%98%E9%87%8F.md">相关文档</a></strong></li>
<li>利用导入模版中的模版进行代码练习</li>
<li>学习在如何写出在控制台显示的代码  <strong>Debug.log</strong></li>
</ul>
<blockquote>
<p>Debug.log &#x2F;&#x2F; print something on console </p>
</blockquote>
<ul>
<li>定义前加public可以在unity界面中显示其定义的变量</li>
</ul>
<blockquote>
<p>Such, public string MyName;</p>
</blockquote>
<ul>
<li>注意⚠️：不可以在unity运行时修改变量，电脑不会储存你修改的内容</li>
</ul>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>基础篇2 数字类型</title>
    <url>/2022/07/07/unity/2022-7-7/</url>
    <content><![CDATA[<ul>
<li><p>学习阅读代码并尝试修改代码 <strong><a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B04_%E5%88%9B%E4%BD%9C%E8%80%85%E5%A5%97%E4%BB%B6_%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%A3%E7%A0%81/02-%E5%8F%98%E9%87%8F.md">相关文档</a></strong> b站视频目前进度为32</p>
</li>
<li><p>学会数字类型的使用可以防止资源的浪费，比如100m就可以完成的代码，如果用long的整数类型会浪费电脑资源（文件会变得更大）；</p>
</li>
<li><p>1个字节就是8位</p>
</li>
<li><p>在c#有一种类型为bool型，它是逻辑库，顾名思义就是true and false，可执行逻辑代码。</p>
</li>
</ul>
<blockquote>
<pre><code>    bool check = true;
        
Console.WriteLine(check ? &quot;Checked&quot; : &quot;Not checked&quot;);  // output: Checked
        
Console.WriteLine(false ? &quot;Checked&quot; : &quot;Not checked&quot;);  // output: Not checked
</code></pre>
</blockquote>
<ul>
<li><p>在c#有一个类型为 <strong>var</strong> ,它是可以自动识别你的等号后面是什么类型并自动转换成该类型。</p>
<blockquote>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/var">var</a> &lt;– c#网址</p>
</blockquote>
</li>
<li><p>右边是关于函数的相关信息 <a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B04_%E5%88%9B%E4%BD%9C%E8%80%85%E5%A5%97%E4%BB%B6_%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%A3%E7%A0%81/03-%E5%87%BD%E6%95%B0.md">函数文档</a></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y+z; <span class="comment">//使用return返回已经计算好的数值到Add上，相当于输出到Add的数值。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何使用该函数</span></span><br><span class="line"><span class="comment">//直接使用Add</span></span><br><span class="line">Add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="built_in">int</span> num = Add(a,b,c);</span><br><span class="line"><span class="built_in">int</span> a,b,c;</span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line">b=<span class="number">2</span>;</span><br><span class="line">c=<span class="number">3</span>;</span><br><span class="line"><span class="comment">//也可以直接在 Add加数字</span></span><br><span class="line">Add(a,b,<span class="number">3</span>+c);</span><br></pre></td></tr></table></figure>

<p>测试测试，这串文字是否上传到我的博客</p>
</li>
</ul>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>unity进阶篇1-官方素材实操</title>
    <url>/2022/07/17/unity/unity%E8%BF%9B%E9%98%B6%E7%AF%871/</url>
    <content><![CDATA[<h2 id="选用官方素材来进行练习"><a href="#选用官方素材来进行练习" class="headerlink" title="选用官方素材来进行练习"></a>选用官方素材来进行练习</h2><blockquote>
<p><a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B05_2D%E6%B8%B8%E6%88%8F/2DGameKit/01-%E4%BD%BF%E7%94%A82DGamekit%E5%88%9B%E5%BB%BA%E5%85%B3%E5%8D%A1.md#https://gitee.com/link?target=https%3A%2F%2Fassetstore.unity.com%2Fpackages%2Ftemplates%2Ftutorials%2F2d-game-kit-107098%3F_ga%3D2.162437502.331241089.1633678521-522971275.1624332126">相关学习文档</a> – 介绍里关于2D和3D的类以及学习计划，同时也有官网素材的下载链接。</p>
</blockquote>
<h3 id="进行实操"><a href="#进行实操" class="headerlink" title="进行实操"></a>进行实操</h3><blockquote>
<p>关于更改类名后对引用该类的文件进行替换更改的类名</p>
<blockquote>
<p>在Rider中，左上角找到preferences – 查询要使用功能的快捷键，如我要替换类名，则查询replace</p>
<p>利用该功能来替换想一次性全部替换的类名</p>
</blockquote>
<p>如果想要在文件里的代码引出类的文件</p>
<blockquote>
<p>操作：选中类 – 右键 – nevigation – Declaration</p>
<p>快捷键：command + D</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity进阶篇</tag>
      </tags>
  </entry>
  <entry>
    <title>unity进阶篇3-Tilemap的使用</title>
    <url>/2022/08/02/unity/unity%E8%BF%9B%E9%98%B6%E7%AF%873/</url>
    <content><![CDATA[<h2 id="关于Tilemap的创建和使用"><a href="#关于Tilemap的创建和使用" class="headerlink" title="关于Tilemap的创建和使用"></a>关于Tilemap的创建和使用</h2><p>相关文档<a href="https://space.bilibili.com/43644141/channel/seriesdetail?sid=299912">b站视频56-60</a> <a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B05_2D%E6%B8%B8%E6%88%8F/RubyAdventure/02-%E4%BD%BF%E7%94%A8%E7%93%A6%E7%89%87%E5%9C%B0%E5%9B%BE%E5%88%9B%E5%BB%BA%E4%B8%96%E7%95%8C.md#3-%E7%93%A6%E7%89%87%E5%9C%B0%E5%9B%BE%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B">相关文档</a></p>
<ul>
<li>什么是Tilemap</li>
</ul>
<blockquote>
<p>它相当是创造游戏背景的一个工具，英语翻译过来为<strong>瓦片地图</strong> </p>
</blockquote>
<ul>
<li>如何使用Tilemap</li>
</ul>
<blockquote>
<ol>
<li>首先我们根据视频教程到官方文档下载Tilemap.png图片</li>
<li>在Asserts里创建一个新的文件夹，右键<strong>Input new Assert</strong>或者<strong>文件夹拖进unity里面</strong></li>
<li>在上面的windos里点进2D-Tile Palette</li>
<li>点击<strong>Create New palette</strong> 或者在创建好的文件夹里右键<strong>Creat - 2D - Tile Palette - Rectangle&#x2F;或你想要的形状</strong></li>
<li>我们把导进unity的Tilemap.png改一下<strong>type - sprite</strong></li>
<li>然后我们再点击Tile Palette窗口，将Tilemap.png拖进去，我们发现格子里有Tilemap的图像</li>
<li>将之前创建好的Tilemap拖进Hierachy，然后用TIle Palette工具绘制背景，但是我们会发现每一个的背景和各自并不是完全覆盖</li>
<li>由于<strong>Tilemap.png是64*64</strong>，而<strong>系统是自动默认100*100</strong>，所以导致背景在格子里填不满</li>
<li><strong>更改Pixels per Unit(像素单位)</strong> 到<strong>100 -&gt; 64</strong> ，然后再点击自动弹出窗口的Apply就行了。</li>
</ol>
</blockquote>
<ul>
<li>如果一个图片里有着复杂的地图图像，想要自动化绘制该如何绘制 —- RuleTile 使用</li>
</ul>
<blockquote>
<ol>
<li>首先我们找到一张图片，可以查看相关文档的官方教程导入官方素材到projcet里</li>
<li>将该图片分割成9份, <strong>首先将Sprite Mode改成 Single -&gt; Multiple</strong></li>
<li>**Pixeles Per Unit: 100 -&gt; 64 **</li>
<li>点击Sprite Editor - Slice - Type : Automatic -&gt; Grid by cell size 或者 Grid by cell count(这个要自己设置) - 点击Silce 然后 右边Apply。</li>
<li>官方素材像素是192*192, 所以64 &#x3D; 192&#x2F;3，如果是Gridz by cell count可以设置pixels size x:64 y:64</li>
<li>在文件夹里Create - 2D - Tiles - RuleTile</li>
<li>在inspector里面我们可以看到，在Tiling Rules里 list is empty，所以我们需要点击加号增加到9条。</li>
<li>将分割的九张图片一次放进Tiling Rules里创建的每个一条里（具体操作看视频）</li>
<li>记得在Default Sprite上将入一张图片（任意），不然在Tile Palette 是显示不出来的</li>
<li>然后就可以用画笔将Tile 添加在Scene里了。</li>
</ol>
</blockquote>
<ul>
<li>上面的RuleTile需要一个一个图片加进去，太麻烦了，有更快的方法吗。 —-Rule Overrid TIles使用</li>
</ul>
<blockquote>
<p>前提：Rule Override Tile 是模仿之前的Rule规则来添加的，如果还想用前面RuleTIle 的规则就直接用 Rule Override Tiles就可以了。</p>
<ol>
<li>Create - 2D - Tiles - Rule Override TIle</li>
<li>在Tile 那里添加之前的 Rule Tile，然后会多出一些了之前的图片，然后在右边添加分割的图片即可。</li>
</ol>
</blockquote>
<h2 id="关于场景中的图像排序（例：人物经过某些场景是在物体后面还是前面）"><a href="#关于场景中的图像排序（例：人物经过某些场景是在物体后面还是前面）" class="headerlink" title="关于场景中的图像排序（例：人物经过某些场景是在物体后面还是前面）"></a>关于场景中的图像排序（例：人物经过某些场景是在物体后面还是前面）</h2><ul>
<li>伪透视图</li>
</ul>
<blockquote>
<p>当一个人经过一棵树时，人的y轴若在树根下面，则人物不会在树木后面，若人在树的y轴上面，则人在树木后面</p>
<p>操作：</p>
<ol>
<li><p>添加一个人物和一个物体</p>
</li>
<li><p>Edit - project settings - Graphics - Camera setting - Transparency Sort Mode -&gt; Custom Axis(自定义轴心) - Transparency Sort Axis x &#x3D; 0 &#x2F; y &#x3D; 1 &#x2F; z &#x3D; 0</p>
<p>作用是根据根据人物和物体的轴心判定人物触碰该物体是否覆盖。</p>
</li>
<li><p>运行尝试。</p>
</li>
</ol>
</blockquote>
<ul>
<li>上面更改完摄像轴体判断后，如果在物体和人物判断还有些许细微区别，则可以进行微调 – Sprite 轴心 pivot</li>
</ul>
<blockquote>
<p>在人物和物体里都有 Pivot 可以调整，有center, bottom,Top, left, right,选择你想要的轴心</p>
<p>或者</p>
<p>在Sprite Editor上可以自定义轴心，蓝色的小圈圈就是它的轴心。</p>
</blockquote>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity进阶篇</tag>
      </tags>
  </entry>
  <entry>
    <title>unity进阶篇2-角色的程序写入</title>
    <url>/2022/08/01/unity/unity%E8%BF%9B%E9%98%B6%E7%AF%872/</url>
    <content><![CDATA[<h2 id="如何让角色在2D里移动"><a href="#如何让角色在2D里移动" class="headerlink" title="如何让角色在2D里移动"></a>如何让角色在2D里移动</h2><h3 id="设定wsad或者-up-x2F-down-x2F-left-x2F-right为上下左右移动"><a href="#设定wsad或者-up-x2F-down-x2F-left-x2F-right为上下左右移动" class="headerlink" title="设定wsad或者 up&#x2F;down&#x2F;left&#x2F;right为上下左右移动"></a>设定wsad或者 up&#x2F;down&#x2F;left&#x2F;right为上下左右移动</h3><p>相关原理和文档：<a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B05_2D%E6%B8%B8%E6%88%8F/RubyAdventure/01-Ruby%E5%86%92%E9%99%A92D%E5%88%9D%E5%AD%A6%E8%80%85%E6%95%99%E7%A8%8B.md#https://gitee.com/link?target=https%3A%2F%2Flearn.unity.com%2Fproject%2Fruby-s-adventure-2d-chu-xue-zhe">2D角色移动</a> <a href="https://www.bilibili.com/video/BV1FP4y1h7SV?spm_id_from=333.999.0.0">b站视频54</a> <a href="https://www.bilibili.com/video/BV1cu411f7X2?spm_id_from=333.999.0.0&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">b站视频55</a></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取水平输入</span></span><br><span class="line">    <span class="built_in">float</span> horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">    <span class="comment">//获取垂直输入</span></span><br><span class="line">    <span class="built_in">float</span> vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建一个Vector2的对象position，用来获取当前角色位置。</span></span><br><span class="line">    Vector2 position = transform.position;</span><br><span class="line">    <span class="comment">//更改position的x坐标值，让它每帧加0.1，update就是一帧一帧循环的。</span></span><br><span class="line">    position.x = position.x + <span class="number">0.1f</span>*horizontal;</span><br><span class="line">    position.y = position.y + <span class="number">0.1f</span>*vertical;</span><br><span class="line">    <span class="comment">//更新位置的数据后，我们需要讲更新后的数据输入到新的位置（更新transform）</span></span><br><span class="line">    transform.position = position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>明明按下去只增加0.1，为什么速度会这么快呢</li>
</ul>
<blockquote>
<p>由于目前的电脑性能很好，所以一秒可能几百甚至上千帧，如果想要得到我们想要的流畅度和速度就要进行锁帧数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//锁帧</span></span><br><span class="line">    <span class="comment">//只有将垂直同步为0才能锁帧，否则锁帧无效</span></span><br><span class="line">    <span class="comment">//垂直同步的作用就是显著减少游戏画面撕裂、跳帧，因为画面的渲染不是整个画面一同渲染的，而是逐行或逐列渲染的，能够让FPS保持与显示屏的刷新率相同。</span></span><br><span class="line">    QualitySettings.vSyncCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//设定应用程序帧数为60 </span></span><br><span class="line">    Application.targetFrameRate = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>锁帧了限制了游戏性能，如果想要解放游戏性能并得到我们想要的速度怎么办</li>
</ul>
<blockquote>
<p>利用时间改变每一秒的帧数</p>
<p>例如：</p>
<p>你需要通过将移动速度乘以 Unity 渲染一帧所需的时间来更改移动速度。如果游戏以每秒 10 帧的速度运行，则每帧耗时 0.1 秒。如果游戏以每秒 60 帧的速度运行，则每帧耗时 0.017 秒。如果将移动速度乘以该时间值，则移动速度将以秒表示。</p>
<p>引入一个新的概念 <strong>Time.deltaTime</strong> 每帧的时间间隔，float 类型</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> Speed = <span class="number">0.1f</span>;</span><br><span class="line"><span class="comment">// Update is called once per frame</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取水平输入</span></span><br><span class="line">    <span class="built_in">float</span> horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">    <span class="comment">//获取垂直输入</span></span><br><span class="line">    <span class="built_in">float</span> vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建一个Vector2的对象position，用来获取当前角色位置。</span></span><br><span class="line">    Vector2 position = transform.position;</span><br><span class="line">    <span class="comment">//更改position的x坐标值，让它每帧加0.1，update就是一帧一帧循环的。</span></span><br><span class="line">    position.x = position.x + Speed*horizontal*Time.deltaTime;</span><br><span class="line">    position.y = position.y + Speed*vertical*Time.deltaTime;</span><br><span class="line">    <span class="comment">//更新位置的数据后，我们需要讲更新后的数据输入到新的位置（更新transform）</span></span><br><span class="line">    transform.position = position;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


</blockquote>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity进阶篇</tag>
      </tags>
  </entry>
  <entry>
    <title>半导体物理学</title>
    <url>/2022/10/24/Micro%20Electronic/%E5%8D%8A%E5%AF%BC%E4%BD%93%E7%89%A9%E7%90%86%E5%AD%A6/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="半导体基础物理学目录："><a href="#半导体基础物理学目录：" class="headerlink" title="半导体基础物理学目录："></a>半导体基础物理学目录：</h1><ul>
<li>Semiconductor materials and their properties<ul>
<li>Semiconductor<ul>
<li>Charge Carriers</li>
<li>Doping</li>
<li>Transport of Carriers</li>
</ul>
</li>
<li>PN Junction<ul>
<li>Structure</li>
<li>Reverse and Forward Bias Conditions</li>
<li>I&#x2F;V Characteristics</li>
<li>Circuit Models</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Semiconductor"><a href="#Semiconductor" class="headerlink" title="Semiconductor"></a>Semiconductor</h2><h3 id="Charge-Carriers"><a href="#Charge-Carriers" class="headerlink" title="Charge Carriers:"></a>Charge Carriers:</h3><p>化学方面暂时不去了解，只要知道温度变化下的自由电子密度就行了</p>
<p>Free Electron Density</p>
<img src="https://i.imgur.com/VPeFYvs.png" alt="image-20221024182900503" style="zoom:50%;" />

<p><img src="https://i.imgur.com/by7U49u.png"></p>
<p><img src="https://i.imgur.com/bArZGou.png"></p>
<h3 id="Doping-掺杂"><a href="#Doping-掺杂" class="headerlink" title="Doping(掺杂):"></a>Doping(掺杂):</h3><p>Si 掺杂了 P（磷） 则会变成 N type 电子（Electron）</p>
<img src="https://i.imgur.com/hwT1Bkb.png" alt="image-20221024183248245" style="zoom:50%;" />

<p>Si 掺杂了 B（硼） 则会有更多的空穴或变成 P type 电子</p>
<img src="https://i.imgur.com/zdF5SN3.png" alt="image-20221024183416890" style="zoom:50%;" />

<p>Electron and Hole Densities(电子和空穴的密度)</p>
<img src="https://i.imgur.com/Vcj0WK1.png" alt="image-20221024183649068" style="zoom:50%;" />

<p>电子和空穴的密度的乘积 **总是等于 **本征电子密度的平方</p>
<ul>
<li>n 是电子密度， p是空穴密度， ni是本征电子密度</li>
</ul>
<h3 id="Transport-of-Carriers-载体的传输"><a href="#Transport-of-Carriers-载体的传输" class="headerlink" title="Transport of Carriers(载体的传输):"></a>Transport of Carriers(载体的传输):</h3><ul>
<li>Drift(漂移):</li>
</ul>
<img src="https://i.imgur.com/esUxlII.png" alt="image-20221024184132554" style="zoom:50%;" />

<p>带电粒子(Charge particles)因电场(Electric field)而移动的过程称为漂移(Drift)。</p>
<p>带电粒子(Charge particles)将以电场(Electric field)成比例(proportional)的速度(Velocity)移动</p>
<p><strong>Vh 和 Ve 分别是空穴和电子在电场的移动速度</strong></p>
<ul>
<li>电流流动：通常情况</li>
</ul>
<img src="https://i.imgur.com/8vh7cXz.png" alt="image-20221024184854862" style="zoom:50%;" />

<p><strong>如果电荷(Charge travle)以 v m&#x2F;s 的速度行进，则电流计算为通过(thru)横截面(cross-section)的以 v 米为单位的电荷量(amount of charge)。</strong></p>
<ul>
<li>电流流动: 漂移</li>
</ul>
<img src="https://i.imgur.com/1KwHgC0.png" alt="image-20221024185444532" style="zoom:50%;" />

<p><strong>由于速度等于 μE，漂移特性是通过在通用电流方程中用 μE 代替 V 获得的。</strong></p>
<p><strong>总电流密度由电子和空穴组成</strong></p>
<p>J为电流密度</p>
<ul>
<li><strong>Velocity Saturation</strong>(速度饱和度)</li>
</ul>
<img src="https://i.imgur.com/kDjwNLb.png" alt="image-20221024190029422" style="zoom:50%;" />

<p>在更高级的课程中讨论的主题是速度饱和</p>
<p>实际上，速度不会随电场线性增加(Linearly increase)。 它最终会饱和(saturate)到一个临界值(critical value)。</p>
<ul>
<li>二次电荷输送机构: 扩散(diffusion)</li>
</ul>
<img src="https://i.imgur.com/NHEgtk7.png" alt="image-20221024190412360" style="zoom:50%;" />

<p>**带电粒子(Charge particles)从高浓度区域(region of high concentration)移动到低浓度区域(region of low concentration)**，类似于日常生活中的水墨滴纸。</p>
<ul>
<li>电流流动: 扩散(Diffusion)</li>
</ul>
<img src="https://i.imgur.com/XlAjsrN.png" alt="image-20221024190738389" style="zoom:50%;" />

<p><strong>扩散电流与沿电流方向的电荷梯度(gradient of charge)(dn&#x2F;dx)成正比(proportional).</strong></p>
<ul>
<li>线性与非线形电荷密度(Charge Density)分布:</li>
</ul>
<img src="https://i.imgur.com/ja7i7I5.png" alt="image-20221024191159686" style="zoom:50%;" />

<p>线性电荷密度分布意味着恒定的(constant)扩散电流，而非线性电荷密度分布意味着变化的(varying)扩散电流</p>
<ul>
<li>爱因斯坦关系(Einstein’s relation)</li>
</ul>
<img src="https://i.imgur.com/tGxkrJH.png" alt="image-20221024191718657" style="zoom:50%;" />

<p>虽然漂移和扩散电流背后的物理学完全不同，但爱因斯坦的关系提供了两者之间的神秘联系。</p>
<p>D为 Diffusion，μ 为Drift.</p>
<h2 id="PN-junction-Diode-PN结（二极管）"><a href="#PN-junction-Diode-PN结（二极管）" class="headerlink" title="PN junction(Diode)(PN结（二极管）)"></a><strong>PN junction(Diode)</strong>(PN结（二极管）)</h2><img src="https://i.imgur.com/I3Ul9V7.png" alt="image-20221024192028971" style="zoom:50%;" />

<p>当半导体中并排(side by side)引入**N型和P型掺杂剂(Dopants)**时，会形成PN结(PN junction)或二极管(diode)。</p>
<p>Cathode ：阴极， Anode: 阳极。</p>
<ul>
<li>跨界点的电流（<strong>Current Flow Across Junction</strong>）：扩散(Diffusion)</li>
</ul>
<img src="https://i.imgur.com/YhRYmj1.png" alt="image-20221024195926914" style="zoom:50%;" />

<p>因为与另一侧相比，结(Junction)的每一侧都包含过量的(excess)空穴或电子，所以存在很大的**浓度梯度(Concentration gradient)**。因此，扩散电流(Diffusion Current)从每一侧流过结(Junction).</p>
<ul>
<li>耗尽区(Depletion Region)</li>
</ul>
<img src="https://i.imgur.com/l3YJpDp.png" alt="image-20221024200234683" style="zoom:50%;" />

<p>当自由电子和空穴扩散穿过结时，会留下一个固定离子(Fixed ions)区域，这个区域被称为“耗尽区”(Depletion region)</p>
<ul>
<li>跨接点点电流: 漂移</li>
</ul>
<img src="https://i.imgur.com/VRfWkHc.png" alt="image-20221024200507967" style="zoom:50%;" />

<p>耗尽区(Depletion region)中的固定离子(Fixed ions)会产生电场(Electric field)，从而产生漂移电流(Drift current)。</p>
<h3 id="跨接点点电流：平衡-Equilibrium"><a href="#跨接点点电流：平衡-Equilibrium" class="headerlink" title="跨接点点电流：平衡(Equilibrium)"></a>跨接点点电流：平衡(<strong>Equilibrium</strong>)</h3><img src="https://i.imgur.com/kpNJo1F.png" alt="image-20221024200803506" style="zoom:50%;" />

<p>在平衡时，<strong>沿一个方向流动的漂移电流(Drift Current)抵消了(Cancels out)沿相反方向(opposite direction)流动的扩散电流(Diffusion Current</strong>)，产生零净电流(net current of zero)。</p>
<p>上图表现的是电荷分布</p>
<ul>
<li>内建电势(built-in Potential)</li>
</ul>
<img src="https://i.imgur.com/RPKvg6i.png" alt="image-20221024201254382" style="zoom:50%;" />

<p>由于结上的电场存在内建电势，以上为推导。</p>
<h3 id="反向偏置二极管-Diode-in-Reverse-Bias"><a href="#反向偏置二极管-Diode-in-Reverse-Bias" class="headerlink" title="反向偏置二极管(Diode in Reverse Bias)"></a>反向偏置二极管(Diode in Reverse Bias)</h3><img src="https://i.imgur.com/KMU3kCM.png" alt="image-20221024202727205" style="zoom:50%;" />

<p>当二极管的N型区域连接到比P型区域更高的电位时(Higher potential)，二极管处于反向偏置状态(reverse bias)，这导致更宽的(wider)耗尽区(depletion region)和更大的结内内置电场(Larger built-in electric field).</p>
<ul>
<li>反向偏置偏置二极管的应用：电压相关电容器(voltage dependent capacitor)</li>
</ul>
<img src="https://i.imgur.com/nJoQthP.png" alt="image-20221024203339761" style="zoom:50%;" />

<p>PN结可以看作是一个电容器。<strong>通过改变VR，耗尽宽度改变(the depletion width change)，改变其电容值(change it capacitance value)；</strong>因此PN结实际上是一个电压相关的电容器。</p>
<ul>
<li>电压相关电容(Voltage-dependent capacitor)</li>
</ul>
<img src="https://i.imgur.com/k7VXUq7.png" alt="image-20221024203743916" style="zoom:50%;" />

<ul>
<li>压控振荡器(Voltage-controlled Oscillator)</li>
</ul>
<img src="https://i.imgur.com/ypGJyRp.png" alt="image-20221024203919901" style="zoom:50%;" />

<p>反向偏置 PN 结的一个非常重要的应用是 VCO(Voltage-controlled Oscillatior)，其中 LC 谐振(LC tank)电路用于振荡器(Oscillatior)。 通过改变 VR，我们可以改变 C，这也改变了振荡频率(oscillation frequency)。</p>
<h3 id="正向偏置二极管-Diode-in-Forward-Bias"><a href="#正向偏置二极管-Diode-in-Forward-Bias" class="headerlink" title="正向偏置二极管(Diode in Forward Bias)"></a>正向偏置二极管(<strong>Diode in Forward Bias</strong>)</h3><img src="https://i.imgur.com/MLFQnlv.png" alt="image-20221024204327517" style="zoom:50%;" />

<p>当二极管的N型区域的电位低于P型区域的电位时(Lower potential)，二极管处于正向偏置(Forward bias)。</p>
<p>耗尽宽度缩短(Depletion width is shortened)，内建电场减小(built-in electric field decreased)。</p>
<ul>
<li>正向偏置中的少数载波分布</li>
</ul>
<img src="https://i.imgur.com/SO2HWgC.png" alt="image-20221024204640370" style="zoom:50%;" />

<p>在正向偏置下，每个区域的少数载流子由于内建场&#x2F;电位(built-in field&#x2F;potential)的降低而增加。</p>
<p>因此，扩散电流增加以供应这些少数载流子。</p>
<ul>
<li>正向偏置的扩散电流</li>
</ul>
<img src="https://i.imgur.com/6IuX88s.png" alt="image-20221024205002242" style="zoom:50%;" />

<p>扩散电流将增加以供应少数载流子的增加。推导如上。</p>
<p><img src="https://i.imgur.com/tfdkMt6.png"></p>
<p><img src="https://i.imgur.com/Nl93S6S.png"></p>
<ul>
<li>少数电荷梯度(<strong>Minority Charge Gradient</strong>)</li>
</ul>
<img src="https://i.imgur.com/vdlIkEz.png" alt="image-20221024205152203" style="zoom:50%;" />

<p>少数电荷分布(<strong>Minority charge profile</strong>)不应沿x轴保持不变；否则，没有浓度梯度，也没有扩散电流</p>
<p>少数载流子(<strong>minority carriers</strong>)与多数载流子(<strong>majority carriers</strong>)的重组(Recombination)导致(accounts for)少数载流子在探入(go deep into)P或N区域时下降(Dropping)。</p>
<ul>
<li>正向偏置总结</li>
</ul>
<img src="https://i.imgur.com/DQ5Anp2.png" alt="image-20221024205759234" style="zoom:50%;" />

<p>在正向偏压中，少数载流子通过结的扩散电流很大。然而，当我们深入P和N区域时，来自多数载流子的复合电流(Recombiantion Current)占主导(dominate)地位。这两个电流加起来是一个恒定值。</p>
<h2 id="PN结的IV特性"><a href="#PN结的IV特性" class="headerlink" title="PN结的IV特性"></a>PN结的IV特性</h2><img src="https://i.imgur.com/HX0ZGA7.png" alt="image-20221024210104107" style="zoom:50%;" />

<p>PN结的电流和电压关系在正向偏置区呈指数(exponential)关系，而在反向偏置区则相对恒定(constant)。以上是曲线的数学表达式。</p>
<ul>
<li>Parallel PN Junction(并联PN结)</li>
</ul>
<img src="https://i.imgur.com/dAT0rae.png" alt="image-20221024210445891" style="zoom:50%;" />

<p>因为结电流(Junction current)与结的横截面积(Junction’s cross section area)成正比(proportional)。两个并联(parallel)的PN结实际上是一个PN结，其横截面积(cross section area)是两倍(twice)，因此电流是两倍。</p>
<ul>
<li>恒压二极管模型(<strong>Constant-Voltage Diode Model</strong>)</li>
</ul>
<img src="https://i.imgur.com/8DCRPmG.png" alt="image-20221024210826797" style="zoom:50%;" />

<p>如果<strong>VD&lt;VD,on**  则二极管作为开路(open circuit)运行，如果**VD&gt;VD,on</strong>  ,则二极管作为恒压源(constant voltage source)VD,on 运行。</p>
<ul>
<li>示例：二极管计算</li>
</ul>
<img src="https://i.imgur.com/JUV1mSS.png" alt="image-20221024211107637" style="zoom:50%;" />

<p>这个例子显示了恒压模型相对于指数模型的简单性。</p>
<p>对于指数(exponential)模型，需要迭代方法(iterative mathod)来求解电流，而恒压模型只需要线性方程。</p>
<h3 id="反向击穿-Reverse-Breakdown"><a href="#反向击穿-Reverse-Breakdown" class="headerlink" title="反向击穿(Reverse Breakdown)"></a>反向击穿(Reverse Breakdown)</h3><img src="https://i.imgur.com/H2LfX1z.png" alt="image-20221024211404074" style="zoom:50%;" />

<p>当施加大的反向偏置电压(<strong>large reverse bias voltage</strong>)时，会发生击穿(Breakdown)，并且有巨大的电流(<strong>enormous current</strong>)流过二极管。</p>
<h3 id="齐纳和雪崩击穿-Zener-vs-Avalanche-Breakdown"><a href="#齐纳和雪崩击穿-Zener-vs-Avalanche-Breakdown" class="headerlink" title="齐纳和雪崩击穿(Zener vs. Avalanche Breakdown)"></a>齐纳和雪崩击穿(<strong>Zener vs. Avalanche Breakdown</strong>)</h3><img src="https://i.imgur.com/4Ts9q4A.png" alt="image-20221024211712496" style="zoom:50%;" />

<p>齐纳击穿(Zener Breakdown)时耗尽区(depletion region)内的大电场将电子或空穴从其<strong>共价键(Covalent bonds)上断开(break)的结果</strong>。</p>
<p>雪崩击穿(Avalanche Breakdown)上电子或空穴与耗尽区内的<strong>固定离子(Fixed ions)碰撞(colliding)的结果</strong>。</p>
<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><img src="https://i.imgur.com/M3lypqA.png" alt="" style="zoom:%;" />

<p><img src="https://i.imgur.com/QDSAzxv.png"></p>
<p><img src="https://i.imgur.com/oNQW3J1.png"></p>
<p><img src="https://i.imgur.com/QcAQZAP.png"></p>
<ul>
<li>CN junction</li>
</ul>
<p><img src="https://i.imgur.com/rdqeF1W.png"></p>
]]></content>
      <categories>
        <category>微电子电路</category>
      </categories>
      <tags>
        <tag>Micro_system</tag>
      </tags>
  </entry>
  <entry>
    <title>unity进阶篇4-物理系统（碰撞体和刚体）的使用</title>
    <url>/2022/08/05/unity/unity%E8%BF%9B%E9%98%B6%E7%AF%874/</url>
    <content><![CDATA[<h2 id="关于物理系统的使用"><a href="#关于物理系统的使用" class="headerlink" title="关于物理系统的使用"></a>关于物理系统的使用</h2><p><a href="https://space.bilibili.com/43644141/channel/seriesdetail?sid=299912">b站视频61-63</a> <a href="https://reurl.cc/52KVzV">相关文档</a> </p>
<h3 id="Collider-（碰撞体）"><a href="#Collider-（碰撞体）" class="headerlink" title="Collider （碰撞体）"></a>Collider （碰撞体）</h3><ul>
<li>如何实现两个物体的碰撞：例, 主角和箱子&#x2F;树木的碰撞</li>
</ul>
<blockquote>
<p>点击Hierarchy里的物体，查看Inspector界面，然后Add Component，选择Box Collider 2D</p>
<p>Box Collider 2D 和 Box Collider 是不一样的，<strong>没有写2D的默认是3D</strong></p>
</blockquote>
<ul>
<li>如何调整Collider的区域</li>
</ul>
<blockquote>
<ol>
<li>在Inspector展开Box Collider 2D</li>
<li>点击Edit Collider，然后会在物体处出现绿色边框</li>
<li>可以手动点击绿色边框进行调整，或在offset和size处调整绿色边框大小</li>
</ol>
</blockquote>
<ul>
<li>两个物体发生碰撞后，一个物体进行了旋转，如果不想让它旋转怎么办</li>
</ul>
<blockquote>
<ol>
<li>在物体的Inspector里展开<strong>Rigidbody 2D(刚体)</strong></li>
<li>Constraints（约束&#x2F;限制）里有Freeze Rotation x&#x2F;y&#x2F;z轴</li>
<li>旋转时因为2D画像沿着z轴旋转，所以我们将Freeze Rotation <strong>Z</strong> 打勾就行了</li>
</ol>
</blockquote>
<ul>
<li>为什么两个物体相互碰撞时会出现剧烈抖动。</li>
</ul>
<blockquote>
<p>由于在移动的人物&#x2F;物体里使用的移动代码时Transform，这是一个变化位置组件，它不会影响到物理碰撞的组件，它只会影响到它下一步的位置，它不管这个position在不在碰撞范围内,Transform的组件先进去，然后Rigidbody再将Transform还原到之前位置（挤出），所以一进一出就产生了抖动。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Vector2 position = transform.position;</span><br><span class="line"><span class="comment">//更改position的x坐标值，让它每帧加0.1，update就是一帧一帧循环的。</span></span><br><span class="line">position.x = position.x + Speed*horizontal*Time.deltaTime;</span><br><span class="line">position.y = position.y + Speed*vertical*Time.deltaTime;</span><br><span class="line"><span class="comment">//更新位置的数据后，我们需要讲更新后的数据输入到新的位置（更新transform）</span></span><br><span class="line">transform.position = position;</span><br></pre></td></tr></table></figure>

<p><strong>所以我们不能用transform来变化它的位置</strong></p>
<p><strong>我们需要用刚体组件来变化它的位置</strong></p>
<p>这是用Transform组件编写的移动代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RubyController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Speed = <span class="number">0.1f</span>;</span><br><span class="line"><span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取水平输入</span></span><br><span class="line">        <span class="built_in">float</span> horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="comment">//获取垂直输入</span></span><br><span class="line">        <span class="built_in">float</span> vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个Vector2的对象position，用来获取当前角色位置。</span></span><br><span class="line">        Vector2 position = transform.position;</span><br><span class="line">        <span class="comment">//更改position的x坐标值，让它每帧加0.1，update就是一帧一帧循环的。</span></span><br><span class="line">        position.x = position.x + Speed*horizontal*Time.deltaTime;</span><br><span class="line">        position.y = position.y + Speed*vertical*Time.deltaTime;</span><br><span class="line">        <span class="comment">//更新位置的数据后，我们需要讲更新后的数据输入到新的位置（更新transform）</span></span><br><span class="line">        transform.position = position;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是用Rigidbody便携的移动代码：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RubyController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rigidbody2D rigidbody2D;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> horizontal;</span><br><span class="line">    <span class="built_in">float</span> vertical;</span><br><span class="line">    <span class="comment">//将速度暴露出来，使其可调</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Speed = <span class="number">0.1f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        rigidbody2D = GetComponent&lt;Rigidbody2D&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取水平输入</span></span><br><span class="line">        horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="comment">//获取垂直输入</span></span><br><span class="line">        vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//固定时间间隔执行的更新方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建一个Vector2的对象position，用来获取当前角色位置。</span></span><br><span class="line">        Vector2 position = transform.position;</span><br><span class="line">        <span class="comment">//更改position的x坐标值，让它每帧加0.1，update就是一帧一帧循环的。</span></span><br><span class="line">        position.x = position.x + Speed*horizontal*Time.deltaTime;</span><br><span class="line">        position.y = position.y + Speed*vertical*Time.deltaTime;</span><br><span class="line">        <span class="comment">//更新位置的数据后，我们需要讲更新后的数据输入到新的位置（更新transform）</span></span><br><span class="line">        rigidbody2D.position = position;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次游戏计算新图像时都会调用 Update，问题是调用速度不确定。在一台速度较慢的计算机上，调用速度可能是每秒 20 张图像，而在一台非常快的计算机上，调用速度可能是每秒 3000 张图像。 </p>
<p>为了使物理计算保持稳定，需要定期进行更新（例如，每隔 16ms）。Unity 还有另一个名为 <strong>FixedUpdate</strong> 的函数，只要你想直接影响物理组件或对象（例如刚体），就需要使用该函数。</p>
<p>不要把水平输入和垂直输入放到<strong>FixedUpdate</strong>里</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取水平输入</span></span><br><span class="line">        horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="comment">//获取垂直输入</span></span><br><span class="line">        vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如果将水平输入和垂直输入放到FixedUpdate，由于它会在一定时间间隔内更新，所以会产生跳帧现象。</p>
<p><a href="https://docs.unity3d.com/2021.2/Documentation/ScriptReference/MonoBehaviour.FixedUpdate.html">FixedUpdate Unity官方资料</a> </p>
<p>**Compute <a href="https://docs.unity3d.com/2021.2/Documentation/ScriptReference/Physics.html">Physics</a> system calculations after <a href="https://docs.unity3d.com/2021.2/Documentation/ScriptReference/MonoBehaviour.FixedUpdate.html">FixedUpdate</a>. 0.02 seconds (50 calls per second) is the default time between calls. **</p>
<p>默认是每0.02秒刷新一次，每秒50帧。</p>
<ul>
<li><strong>如果我们想更改FIxedUpdate 的时间间隔怎么办</strong></li>
</ul>
<blockquote>
<ol>
<li>Edit</li>
<li>Project Settings…</li>
<li>Time</li>
<li>Fixed Timestep</li>
</ol>
</blockquote>
</blockquote>
<ul>
<li>如果我们想给Tilemap添加碰撞体如何添加，如：我们想让主角不能闯过某些场景</li>
</ul>
<blockquote>
<ol>
<li>点击自己创建的Tilemap</li>
<li>Add Component</li>
<li>Tilemap Collider 2D</li>
<li>然后会发现在Scene里布置的Tilemap全部都有绿色的方格</li>
</ol>
<ul>
<li>如何只选择一些特殊的不应该通过的场景保留绿色方格呢。</li>
</ul>
<blockquote>
<ol>
<li>点击创造场景的预制件（如果放到统一一个文件夹可以直接全选），然后将Sprite改成None</li>
<li>选择你想要主角不通过的场景的预制件，将其选择Sprite就行了。</li>
</ol>
</blockquote>
<ul>
<li>有一些是Rule Override Tile，我要如何一旦前面的Tile改变属性，被Override Tile 也会改变属性。</li>
</ul>
<blockquote>
<ol>
<li>将Rule Override Tile删除</li>
<li>建立Advance Rule Override Tile,这个Override tile 能直接改变属性不因为前面覆盖的所影响。</li>
<li>更改也是像之前的Rule Override Tile更改</li>
</ol>
</blockquote>
<ul>
<li>如何优化Tilemap的碰撞体</li>
</ul>
<blockquote>
<p>目前，正如在 <strong>Scene 视图</strong>中看到的，每个瓦片都是一个单独的<strong>碰撞体</strong>。 这种方法效果良好，但会产生两个问题：</p>
<ul>
<li>物理系统的计算量更大；如果你的世界很大，可能会减慢你的游戏速度。</li>
<li>在瓦片之间的边界上会产生小问题。由于瓦片是两个并排的<strong>碰撞体</strong>，并且两者之间存在微小间隙，因此有时计算上的微小误差也可能导致仍会发生碰撞的罕见情况。</li>
</ul>
<p>为了解决这些问题，<strong>Unity</strong> 提供了一个名为 <strong>Composite Collider 2D</strong> 的组件。此组件可以获取对象（或对象的子对象）上的所有碰撞体，并由此创建一个大<strong>碰撞体</strong>。</p>
<ol>
<li>在Tilemap上 Add Component</li>
<li>添加Composite Collider 2D，它会自动添加Rigidbody2D</li>
<li>在之前添加的Tilemap Collider 2D 里勾选Used by Composite</li>
<li>将Rigidbody2D 从Dynamic -&gt; Static(将动态设置成静态) ，不然它会因为碰撞而产生图像旋转。</li>
</ol>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity进阶篇</tag>
      </tags>
  </entry>
  <entry>
    <title>unity进阶篇5-伪透视2d下碰撞和遮罩关系</title>
    <url>/2022/08/16/unity/unity%E8%BF%9B%E9%98%B6%E7%AF%875/</url>
    <content><![CDATA[<h2 id="伪透视2d下碰撞和遮罩关系"><a href="#伪透视2d下碰撞和遮罩关系" class="headerlink" title="伪透视2d下碰撞和遮罩关系"></a>伪透视2d下碰撞和遮罩关系</h2><p><a href="https://www.bilibili.com/video/BV1EU4y1c71s?spm_id_from=333.999.0.0&vd_source=e6a36befdc862ad6f936ca8569aa5f2d">b站视频64</a> </p>
<ul>
<li>如何让人物的碰撞和物体的阴影之间有着正确的碰撞和遮罩关系呢。</li>
</ul>
<blockquote>
<p>我们可以看到图片中的人物走到了房子的后面，我们该如何设定碰撞区域呢？</p>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h59a5cgrmoj210w0kejv1.jpg" style="zoom: 50%;" />

<p>可以思考一下，当人物经过什么区域将会碰撞，什么区域不会碰撞，当然只有在地面的才会碰撞吧，所以根据图片设置Box Collider 2D</p>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h59a8r7uybj20py0hw40k.jpg" alt="image-20220816215037828" style="zoom: 67%;" />
</blockquote>
<ul>
<li>当我们发现人物会从建筑的中间穿过，而不是从阴影处出来，这是由于什么原因呢</li>
</ul>
<blockquote>
<p>这是因为我们的<a href="https://docs.unity.cn/cn/2021.1/Manual/class-SpriteRenderer.html">Sprite sort point</a> 没有设置正确(点击可以看到关于SPrite sort point详细信息)，Sprite大致意思就是计算精灵和摄像机之间的距离。</p>
<p>我们应该将Sprite sort point 设置在门口那</p>
<blockquote>
<ol>
<li>project里点击house显示Inspector</li>
<li>点击Sprite Editor</li>
<li>将蓝色圈圈移动到门口<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h59akokqpkj20j80b0q3s.jpg" alt="image-20220816220209964" style="zoom:50%;" /></li>
<li>点击Apply</li>
<li><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h59alrkkolj20os07gaan.jpg" alt="image-20220816220313594" style="zoom:50%;" />将Center改成Pivot</li>
<li>点击预制件(Prefabs)里的House，将它的Sprite sort point改成Pivot<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h59ao21b1gj20iw0byjs6.jpg" alt="image-20220816220523998" style="zoom:50%;" /></li>
</ol>
<p>然后我们将会得到一个正确的人物与建筑的遮罩关系。</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity进阶篇</tag>
      </tags>
  </entry>
  <entry>
    <title>基础篇5 类与对象 和 封装与继承</title>
    <url>/2022/07/12/unity/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<ul>
<li>什么是类和对象</li>
</ul>
<blockquote>
<p>当我在文件夹里创建了一个预制件，然后利用之前在spawnerSample里的代码套进去</p>
<p>操作是：右键创建一个空的预制件 – 将SpawnerSample加入到预制件 – 在object to Spawn那里是空的，我们需要加入你想要的模型，如money，我加入了money后 – 运行 –产生了一堆钱。</p>
<p>结论：我们可以通过c#创建一个类的代码，然后通过预制件来生成它。</p>
</blockquote>
<ul>
<li>关于命名空间<ul>
<li>Namespace : 同一个文件夹里不需要命名空间</li>
</ul>
</li>
<li>封装</li>
<li><a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B04_%E5%88%9B%E4%BD%9C%E8%80%85%E5%A5%97%E4%BB%B6_%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%A3%E7%A0%81/06-%E5%B0%81%E8%A3%85%E5%92%8C%E7%BB%A7%E6%89%BF.md">封装与继承相关文档</a> <a href="https://space.bilibili.com/43644141/channel/seriesdetail?sid=299912">b站相关视频44-45</a></li>
<li>什么是封装</li>
</ul>
<blockquote>
<p>一句话概括封装：public 是公开, private是私人,如果不想让别人碰你的设定就将变量设置为private，可以触碰的为public</p>
<p>代码例子：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">phoenix</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PhoenixName; <span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> hp;<span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> color;<span class="comment">//颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> Reburn = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//全参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">phoenix</span>(<span class="params"><span class="built_in">string</span> phoenixName, <span class="built_in">int</span> age, <span class="built_in">int</span> hp, <span class="built_in">string</span> color</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PhoenixName = phoenixName;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">phoenix</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">isReburn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.hp = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">this</span>.Reburn = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我不想让别人碰我的重生代码(Reburn)，则为设置Reburn变量为private</p>
<p>后面设置了一个私人的类重生</p>
<p>private可写可不写，不写封装的变量全部默认为private。</p>
</blockquote>
]]></content>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>基础篇6 关于基类</title>
    <url>/2022/07/16/unity/%E5%9F%BA%E7%A1%80%E7%AF%876-%E5%85%B3%E4%BA%8E%E5%9F%BA%E7%B1%BB%E5%92%8C%E7%88%B6%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="关于基类的应用"><a href="#关于基类的应用" class="headerlink" title="关于基类的应用"></a>关于基类的应用</h2><p>相关文档：<a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B04_%E5%88%9B%E4%BD%9C%E8%80%85%E5%A5%97%E4%BB%B6_%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%A3%E7%A0%81/06-%E5%B0%81%E8%A3%85%E5%92%8C%E7%BB%A7%E6%89%BF.md">基类的使用</a> ，b站视频<a href="https://www.bilibili.com/video/BV1mR4y1p7N7?spm_id_from=333.999.0.0">45</a></p>
<h3 id="基类的创建"><a href="#基类的创建" class="headerlink" title="基类的创建"></a>基类的创建</h3><blockquote>
<p>关于创建基础类的操作在rider中</p>
<blockquote>
<p>在类的后面右键 - Refactor - Extract - Extract superclass(提取基类)</p>
</blockquote>
<p>他的作用相当于把public（可以选择其他类型代码）的代码放到一起定义，然后让运行的代码显得没有这么累赘。</p>
<p>相当于创建了一个库，这个库相当于一个公共的库，里面都是共有的代码，就不需要每个文件打相同的代码，直接代上去就行</p>
<p>基类（Extract superclass）代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name; <span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> hp;<span class="comment">//血量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> color;<span class="comment">//颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Monster</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">int</span> hp, <span class="built_in">string</span> color</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Monster</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>补充一点，在英文中，这个基类属于接口的意思（interface）</li>
</ul>
</blockquote>
<h3 id="基类的使用"><a href="#基类的使用" class="headerlink" title="基类的使用"></a>基类的使用</h3><blockquote>
<p>使用这个类我们直接在类名的右边加上去即可</p>
<p>代码如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Unity.VisualScripting;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dragon</span>:<span class="title">Monster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dragon</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dragon</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">int</span> hp, <span class="built_in">string</span> color</span>) : <span class="title">base</span>(<span class="params">name, age, hp, color</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Rain</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">$&quot;一条名为<span class="subst">&#123;Name&#125;</span>且<span class="subst">&#123;color&#125;</span>的龙正在云上翻滚倒腾，整个天空电闪雷鸣，大地仿佛被泼龙一盘大水。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>基础篇3 unity 函数</title>
    <url>/2022/07/09/unity/2022-7-9-unity-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<ul>
<li>b站视频34- 38 <a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B04_%E5%88%9B%E4%BD%9C%E8%80%85%E5%A5%97%E4%BB%B6_%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%A3%E7%A0%81/03-%E5%87%BD%E6%95%B0.md">相关文件1</a> <a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B04_%E5%88%9B%E4%BD%9C%E8%80%85%E5%A5%97%E4%BB%B6_%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%A3%E7%A0%81/04-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.md">相关文件2</a></li>
<li>Virtual script 可视化脚本插件，可提供给不需要专精于c#语言开发unity的美术等其他岗位工作者，可以更容易的实现对物体人物或其他交互系统的操控。</li>
<li>个人观点：可视化脚本尽管可以代替一些代码进行操作整个unity，可以给基础比较差的人一些方便的辅助，如果想要更为深入的学习和了解还是需要学习c#代码进行运行整个程序，并且直接写代码实现操作其实比可视化脚本更加的方便快捷。</li>
</ul>
<blockquote>
<p>优点： 不需要写代码</p>
<p>缺点：不能实现很多功能</p>
</blockquote>
<ul>
<li>For and while区别</li>
</ul>
<blockquote>
<p>For 是自己设定一个数或定义和范围在里面循环，当设定这个数小于或大于或者其他条件，则停止循环</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span> ;i&lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">$&quot;第<span class="subst">&#123;i&#125;</span>次循环....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>While 是在已经设定的值里判断true或false，true则一直循环，false则停下到下一步</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先判断bool表达式，当值为 true，进入循环</span></span><br><span class="line"><span class="comment">//执行完循环语句段，会再次进行判断</span></span><br><span class="line"><span class="comment">//如此往复，直到表达式为 false ，跳出循环</span></span><br><span class="line"><span class="comment">//执行后面的语句</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bool</span>表达式)</span><br><span class="line">&#123;</span><br><span class="line">    循环语句段</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和上面的区别是，会先执行一次循环语句段，</span></span><br><span class="line"><span class="comment">//之后再进行条件判断</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环语句段</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bool</span>表达式)</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>关于输出中的$讨论</li>
</ul>
<blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Debug.Log(<span class="string">$&quot;您的成绩是 <span class="subst">&#123;grade&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果想要在控制台输出循环后的<strong>数值</strong>，则要在输出前加$然后在{}里打出定义的名称即可。</p>
</blockquote>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>unity进阶篇6-可收集对象开发（血量/生命值等）</title>
    <url>/2022/08/18/unity/unity%E8%BF%9B%E9%98%B6%E7%AF%876/</url>
    <content><![CDATA[<h2 id="如何给一个角色增加血量条，然后有一个物品可以扣血和加血"><a href="#如何给一个角色增加血量条，然后有一个物品可以扣血和加血" class="headerlink" title="如何给一个角色增加血量条，然后有一个物品可以扣血和加血"></a>如何给一个角色增加血量条，然后有一个物品可以扣血和加血</h2><ul>
<li>给角色赋予血量条</li>
</ul>
<blockquote>
<p>我们先在角色上设置一个血量条</p>
<p><a href="https://docs.unity3d.com/2021.2/Documentation/ScriptReference/Mathf.html">关于Mathf功能的使用</a> <a href="https://docs.unity3d.com/2021.2/Documentation/ScriptReference/Mathf.Clamp.html">Mathf.Clamp功能</a> </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HealthLine</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> MaxHealth = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CurrentHealth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurrentHealth = MaxHealth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeHealth</span>(<span class="params"><span class="built_in">int</span> amount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Mathf是C#的一种功能，Mathf.Clamp相当于设定数学里的一个区间</span></span><br><span class="line">        <span class="comment">//public static float Clamp(float value, float min, float max);</span></span><br><span class="line">        <span class="comment">//详情看unity手册，Mathf里有很多功能可以使用，Clamp是其中一种</span></span><br><span class="line">        CurrentHealth = Mathf.Clamp(CurrentHealth + amount, <span class="number">0</span>, MaxHealth);</span><br><span class="line">        Debug.Log(<span class="string">$&quot;当前生命值：<span class="subst">&#123;CurrentHealth&#125;</span> / <span class="subst">&#123;MaxHealth&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="comment">//第二种描写方式</span></span><br><span class="line">        <span class="comment">//Debug.Log(&quot;当前生命值&quot; + CurrentHealth + &quot;/&quot; + MaxHealth);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这只是在控制台显示生命值，当然我们需要一个媒介来进行扣血和加血，然后显示我们当前的血量是多少，这个媒介就是触发器</p>
</blockquote>
<ul>
<li>设置一个扣血或加血的物体</li>
</ul>
<blockquote>
<ul>
<li>首先我们需要添加一个触发器  <a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/06-2D%E7%89%A9%E7%90%86%E5%85%A5%E9%97%A8.md#22-%E8%A7%A6%E5%8F%91%E5%99%A8">触发器详情</a></li>
</ul>
<blockquote>
<ol>
<li>Add Component</li>
<li>Box Collider 2D</li>
<li>勾选 Is Trigger</li>
<li>创建一个脚本，名字自定义</li>
<li>脚本需要包含一个OnTriggerEnter2D库,然后在这个库中编辑相关功能</li>
</ol>
</blockquote>
<p>当我们勾选了Is Trigger 后，这个加血的物件仍然是碰撞体，虽然无法跟它相碰撞，但是它是有和角色碰撞的，如何用代码验证是否碰撞：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Healthbox</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//记录碰撞次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> colliderCount;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/添加触发器碰撞事件，每次碰撞触发器时，执行其中的代码</span></span><br><span class="line">    <span class="comment">//other获取的是精灵（Ruby）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter2D</span>(<span class="params">Collider2D other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        colliderCount++;</span><br><span class="line">        Debug.Log(<span class="string">$&quot;当前发生碰撞的是<span class="subst">&#123;other&#125;</span>,第<span class="subst">&#123;colliderCount&#125;</span>次碰撞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每当角色与加血的物体碰撞，它将会在控制台输出以下内容: </p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5bk9k8oy8j20ee094t8r.jpg" alt="image-20220818210836322" style="zoom: 50%;" /><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5bk8uzwrgj20e20duglq.jpg" alt="image-20220818210755838" style="zoom:33%;" /></p>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5bk6h6xl2j20sy0aaq45.jpg" style="zoom: 67%;" />

<ul>
<li>我们接下来要给这个加血的物品添加其他代码，如人物碰到后加1点血</li>
</ul>
<blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Healthbox</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//赋值amout为1，当角色与物体进行碰撞时，血条的数值将加一或减一；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> amount = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//记录碰撞次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> colliderCount;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/添加触发器碰撞事件，每次碰撞触发器时，执行其中的代码</span></span><br><span class="line">    <span class="comment">//other获取的是精灵（Ruby）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter2D</span>(<span class="params">Collider2D other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        colliderCount++;</span><br><span class="line">        Debug.Log(<span class="string">$&quot;当前发生碰撞的是<span class="subst">&#123;other&#125;</span>,第<span class="subst">&#123;colliderCount&#125;</span>次碰撞&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得Ruby游戏对象的脚本组件对象(这里的脚本组件指的是挂在角色上的血条组件)</span></span><br><span class="line">        <span class="comment">//获取（连接）Ruby上的血条组件</span></span><br><span class="line">        HealthLine healthLine = other.GetComponent&lt;HealthLine&gt;();</span><br><span class="line">        <span class="comment">//当角色与加血或扣血的物体进行碰撞后，将改变血条的数值。</span></span><br><span class="line">        healthLine.ChangeHealth(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HealthLine是脚本文件名，我创建了另一个脚本文件，更好的区分不同脚本不同功能的使用。</p>
<ul>
<li>如果我们想要让角色与加血的物体进行碰撞后（类似于角色喝血瓶），该物体需要进行消除处理，该如何写代码。</li>
</ul>
<p>我们可以使用C#的销毁函数（功能）<a href="https://docs.unity3d.com/2021.2/Documentation/ScriptReference/Object.Destroy.html">Destory</a> </p>
<p>它的作用是Removes a GameObject, component or asset.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Healthbox</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//赋值amout为1，当角色与物体进行碰撞时，血条的数值将加一或减一；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> amount = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//记录碰撞次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> colliderCount;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/添加触发器碰撞事件，每次碰撞触发器时，执行其中的代码</span></span><br><span class="line">    <span class="comment">//other获取的是精灵（Ruby）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter2D</span>(<span class="params">Collider2D other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        colliderCount++;</span><br><span class="line">        Debug.Log(<span class="string">$&quot;当前发生碰撞的是<span class="subst">&#123;other&#125;</span>,第<span class="subst">&#123;colliderCount&#125;</span>次碰撞&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得Ruby游戏对象的脚本组件对象(这里的脚本组件指的是挂在角色上的血条组件)</span></span><br><span class="line">        <span class="comment">//获取（连接）Ruby上的血条组件</span></span><br><span class="line">        HealthLine healthLine = other.GetComponent&lt;HealthLine&gt;();</span><br><span class="line">        <span class="comment">//当角色与加血或扣血的物体进行碰撞后，将改变血条的数值。</span></span><br><span class="line">        healthLine.ChangeHealth(amount);</span><br><span class="line">        <span class="comment">//销毁（移除）该物体</span></span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>消除功能也有了，那如果角色是满血的，该如何判断此状况，所以我们还需要写判断语句。</li>
</ul>
<blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Healthbox</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//赋值amout为1，当角色与物体进行碰撞时，血条的数值将加一或减一；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> amount = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//记录碰撞次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> colliderCount;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/添加触发器碰撞事件，每次碰撞触发器时，执行其中的代码</span></span><br><span class="line">    <span class="comment">//other获取的是精灵（Ruby）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter2D</span>(<span class="params">Collider2D other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        colliderCount++;</span><br><span class="line">        Debug.Log(<span class="string">$&quot;当前发生碰撞的是<span class="subst">&#123;other&#125;</span>,第<span class="subst">&#123;colliderCount&#125;</span>次碰撞&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得Ruby游戏对象的脚本组件对象(这里的脚本组件指的是挂在角色上的血条组件)</span></span><br><span class="line">        <span class="comment">//获取（连接）Ruby上的血条组件</span></span><br><span class="line">        HealthLine healthLine = other.GetComponent&lt;HealthLine&gt;();</span><br><span class="line">        <span class="keyword">if</span> (healthLine != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (healthLine.CurrentHealth&lt;healthLine.MaxHealth)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//当角色与加血或扣血的物体进行碰撞后，将改变血条的数值。</span></span><br><span class="line">                healthLine.ChangeHealth(amount);</span><br><span class="line">                <span class="comment">//销毁（移除）该物体</span></span><br><span class="line">                Destroy(gameObject);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">&quot;当前玩家角色血条已满，无需加血&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">&quot;healthLine脚本并未获取到。。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接使用if语句</p>
</blockquote>
<ul>
<li>如何防止别人擅自进入更改数值呢，比如把加血加1点变成加10点，我们不能允许这样的更改</li>
</ul>
<blockquote>
<p>除了默认的private外，我们还可以使用封装语句</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HealthLine</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> MaxHealth = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//设置当前生命值属性health</span></span><br><span class="line">    <span class="comment">//C#中支持面向对象程序设计中的封装概念，对数据成员对保护</span></span><br><span class="line">    <span class="comment">//数据成员变量，默认一般都应该设置为私有，只能通过当前类都方法或属性进行访问</span></span><br><span class="line">    <span class="comment">//属性是公有的，可以通过取值器get、赋值器set设定对应字段的访问规则，满足规则才能够访问。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> health</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> CurrentHealth; &#125;</span><br><span class="line">        <span class="comment">//set &#123; CurrentHealth = value; &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> CurrentHealth;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurrentHealth = MaxHealth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeHealth</span>(<span class="params"><span class="built_in">int</span> amount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Mathf是C#的一种功能，Mathf.Clamp相当于设定数学里的一个区间</span></span><br><span class="line">        <span class="comment">//public static float Clamp(float value, float min, float max);</span></span><br><span class="line">        <span class="comment">//详情看unity手册，Mathf里有很多功能可以使用，Clamp是其中一种</span></span><br><span class="line">        CurrentHealth = Mathf.Clamp(CurrentHealth + amount, <span class="number">0</span>, MaxHealth);</span><br><span class="line">        Debug.Log(<span class="string">$&quot;当前生命值：<span class="subst">&#123;CurrentHealth&#125;</span> / <span class="subst">&#123;MaxHealth&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="comment">//第二种描写方式</span></span><br><span class="line">        <span class="comment">//Debug.Log(&quot;当前生命值&quot; + CurrentHealth + &quot;/&quot; + MaxHealth);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中可以看到多添加了public int health, 然后将CurrentHealth更改为private,为什么要这么做呢。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置当前生命值属性health</span></span><br><span class="line"><span class="comment">//C#中支持面向对象程序设计中的封装概念，对数据成员对保护</span></span><br><span class="line"><span class="comment">//数据成员变量，默认一般都应该设置为私有，只能通过当前类都方法或属性进行访问</span></span><br><span class="line"><span class="comment">//属性是公有的，可以通过取值器get、赋值器set设定对应字段的访问规则，满足规则才能够访问。</span></span><br><span class="line"><span class="comment">//health现在是只读属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> health</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> CurrentHealth; &#125;</span><br><span class="line">    <span class="comment">//set &#123; CurrentHealth = value; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> CurrentHealth;</span><br></pre></td></tr></table></figure>

<p>当我们设置完后，如果我们想更改CurrentHealth的值，只能通过ChangeHealth来改，CurrentHealth只能通过Health来取（return）。</p>
<p>这是一个数据的保护，就很难通过外挂来更改数值（如果没有访问Health的访问权限）。</p>
<p>我们可以发现我们通过更改了CurrentHealth的封装后，在Healthbox里的判断句出现了<strong>错误</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (healthLine != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//由于CurrentHealth进行了封装，我们需要将CurrentHealth更改为health.</span></span><br><span class="line">    <span class="keyword">if</span> (healthLine.Currenthealth&lt;healthLine.MaxHealth)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当角色与加血或扣血的物体进行碰撞后，将改变血条的数值。</span></span><br><span class="line">        healthLine.ChangeHealth(amount);</span><br><span class="line">        <span class="comment">//销毁（移除）该物体</span></span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;由于CurrentHealth进行了封装，我们需要将CurrentHealth更改为health.</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (healthLine != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (healthLine.health&lt;healthLine.MaxHealth)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当角色与加血或扣血的物体进行碰撞后，将改变血条的数值。</span></span><br><span class="line">        healthLine.ChangeHealth(amount);</span><br><span class="line">        <span class="comment">//销毁（移除）该物体</span></span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
<h2 id="设置一个掉血区域"><a href="#设置一个掉血区域" class="headerlink" title="设置一个掉血区域"></a>设置一个掉血区域</h2><blockquote>
<p><a href="https://space.bilibili.com/43644141/channel/seriesdetail?sid=299912">b站视频68-71</a> <a href="https://learn.unity.com/tutorial/shi-jie-jiao-hu-shang-hai-qu-yu-he-di-ren?uv=2020.3&projectId=5facf921edbc2a2003a58d3a">unity官方教学文档</a> </p>
<ul>
<li>设置一个掉血区域</li>
</ul>
<blockquote>
<p>首先我们需要选取一张图片来作为我们的掉血区域</p>
<ol>
<li>Art - Sprite - Environment - Damagable</li>
<li>添加为预制件(Prefabs)</li>
<li>添加Box Collider2D</li>
<li>勾选Is Trigger</li>
</ol>
</blockquote>
<ul>
<li>在自己创建的掉血区域里添加脚本</li>
</ul>
<blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DamageArea</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> DamageNum = <span class="number">-1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerStay2D</span>(<span class="params">Collider2D other</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取血条组件</span></span><br><span class="line">        HealthLine healthLine = other.GetComponent&lt;HealthLine&gt;();</span><br><span class="line">        <span class="comment">//判断组件是否获取到</span></span><br><span class="line">        <span class="keyword">if</span> (healthLine != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//扣1滴血</span></span><br><span class="line">            healthLine.ChangeHealth(DamageNum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>我们在unity试运行，发现掉血太快了，如何解决</li>
</ul>
<blockquote>
<img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h5f6thfv8ej21om0bs0ue.jpg" style="zoom:80%;" />

<p>我们需要设置时间间隔，每两秒扣一次血</p>
<p>所以我们需要在HealthLine脚本上两秒间隔代码。<a href="https://docs.unity3d.com/ScriptReference/Time-deltaTime.html">Time.deltaTime的官方文档</a> </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEditor.UIElements;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HealthLine</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> MaxHealth = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//设置当前生命值属性health</span></span><br><span class="line">    <span class="comment">//C#中支持面向对象程序设计中的封装概念，对数据成员对保护</span></span><br><span class="line">    <span class="comment">//数据成员变量，默认一般都应该设置为私有，只能通过当前类都方法或属性进行访问</span></span><br><span class="line">    <span class="comment">//属性是公有的，可以通过取值器get、赋值器set设定对应字段的访问规则，满足规则才能够访问。</span></span><br><span class="line">    <span class="comment">//health现在是只读属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> health</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> CurrentHealth; &#125;</span><br><span class="line">        <span class="comment">//set &#123; CurrentHealth = value; &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断无敌状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> isInvincible;</span><br><span class="line">    <span class="comment">//无敌时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> TimeInvincible = <span class="number">2.0f</span>;</span><br><span class="line">    <span class="comment">//无敌时间计时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> InvincibleTimer;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> CurrentHealth;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        CurrentHealth = MaxHealth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断无敌状态</span></span><br><span class="line">        <span class="keyword">if</span> (isInvincible)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果无敌，进入倒计时</span></span><br><span class="line">            <span class="comment">//invincibleTimer = invincibleTimer - Time.deltaTime;</span></span><br><span class="line">            <span class="comment">//每次update减去一帧所消耗到时间</span></span><br><span class="line">            InvincibleTimer -= Time.deltaTime; <span class="comment">//Time.deltaTime的意思是从最后一帧到当前帧到间隔</span></span><br><span class="line">            <span class="comment">//直到计时器中的时间用完</span></span><br><span class="line">            <span class="keyword">if</span> (InvincibleTimer &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//取消无敌状态</span></span><br><span class="line">                isInvincible = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeHealth</span>(<span class="params"><span class="built_in">int</span> amount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断是否在扣血的区域</span></span><br><span class="line">        <span class="keyword">if</span> (amount&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否在无敌状态</span></span><br><span class="line">            <span class="keyword">if</span> (isInvincible)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//在无敌状态直接弹出函数</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重制无敌状态</span></span><br><span class="line">            isInvincible = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//重制无敌时间</span></span><br><span class="line">            InvincibleTimer = TimeInvincible;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Mathf是C#的一种功能，Mathf.Clamp相当于设定数学里的一个区间</span></span><br><span class="line">        <span class="comment">//public static float Clamp(float value, float min, float max);</span></span><br><span class="line">        <span class="comment">//详情看unity手册，Mathf里有很多功能可以使用，Clamp是其中一种</span></span><br><span class="line">        CurrentHealth = Mathf.Clamp(CurrentHealth + amount, <span class="number">0</span>, MaxHealth);</span><br><span class="line">        Debug.Log(<span class="string">$&quot;当前生命值：<span class="subst">&#123;CurrentHealth&#125;</span> / <span class="subst">&#123;MaxHealth&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="comment">//第二种描写方式</span></span><br><span class="line">        <span class="comment">//Debug.Log(&quot;当前生命值&quot; + CurrentHealth + &quot;/&quot; + MaxHealth);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//假设区域伤害为两秒一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity进阶篇</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco软件的学习和使用lab1</title>
    <url>/2022/09/30/Computer%20Network/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab1/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="Lab1-通过hub相互连接三台计算机，并配置ip地址"><a href="#Lab1-通过hub相互连接三台计算机，并配置ip地址" class="headerlink" title="Lab1 通过hub相互连接三台计算机，并配置ip地址"></a>Lab1 通过hub相互连接三台计算机，并配置ip地址</h1><p>lab1 暂时不需要考虑太多的原理，直接相互连接，然后配置ip地址，并在后面通过数据包验证是否通信。</p>
<h2 id="1-放三台计算机和一个hub"><a href="#1-放三台计算机和一个hub" class="headerlink" title="1. 放三台计算机和一个hub"></a>1. 放三台计算机和一个hub</h2><img src="https://i.imgur.com/4d55IOe.png" alt="image-20220929225357096" style="zoom:50%;" />

<h2 id="2-三台电脑连线Hub"><a href="#2-三台电脑连线Hub" class="headerlink" title="2. 三台电脑连线Hub"></a>2. 三台电脑连线Hub</h2><img src="https://i.imgur.com/opIhmzJ.png" alt="image-20220929225528778" style="zoom:50%;" />

<p>由于线太多，根本不知道连哪个，这里有一个类似<strong>闪电标志</strong>一样的线是自动匹配连接的线，所以我们选择这个来连</p>
<img src="https://i.imgur.com/DMj0dvM.png" alt="image-20220929225659962" style="zoom:50%;" />

<p>连接好线后会有绿色的标志，<strong>绿色：检测到线路中的信号，但是这只是表示物理连接正确，不等于协议工作情况正常，我们还要继续为网络配置相应的协议。</strong></p>
<h2 id="3-给每个PC配置IP地址"><a href="#3-给每个PC配置IP地址" class="headerlink" title="3. 给每个PC配置IP地址"></a>3. 给每个PC配置IP地址</h2><p>直接双击PC0&#x2F;1&#x2F;2</p>
<p>然后在Desktop里点击IP configuration</p>
<img src="https://i.imgur.com/1pHdmbn.png" alt="image-20220929230638815" style="zoom:50%;" />

<p>配置ip</p>
<img src="https://i.imgur.com/VU2s9mT.png" alt="image-20220929230340764" style="zoom:50%;" />

<p>在ipv4 address中直接输入192.168.0.1，<strong>然后直接回车，会自动配置sunnet mask（子网掩码）</strong></p>
<p>然后我们给每个pc配置IP地址，<strong>pc1: 192.168.0.2        pc2: 192.168.0.3</strong></p>
<h2 id="4-如何验证是否配置成功，并成功发送信息"><a href="#4-如何验证是否配置成功，并成功发送信息" class="headerlink" title="4. 如何验证是否配置成功，并成功发送信息"></a>4. 如何验证是否配置成功，并成功发送信息</h2><p>我们可以通过发送数据包来验证整个过程</p>
<img src="https://i.imgur.com/Jz4i3p7.png" alt="image-20220929230923140" style="zoom:50%;" />

<p>这个类似于信件的图标就是数据包<strong>PDU（Protocol Data Unit）协议数据单元</strong></p>
<p>通俗易懂点就是<strong>发送数据从这台电脑到另一台电脑</strong></p>
<img src="https://i.imgur.com/gEOXSM6.png" alt="image-20220929231241800" style="zoom:50%;" />

<p>我们尝试将数据包从PC0发送到PC1，<strong>我们先在PC0上点击，然后再到PC1上点击</strong></p>
<p>然后我们会发现什么都没发生，瞬间就消失，原因是我们正在处于<strong>实时状态（Realtime）</strong></p>
<img src="https://i.imgur.com/MTWwPpq.png" alt="image-20220929231458955" style="zoom:50%;" />

<p>它处于整个窗口的右下角，将它点击成墨蓝色就行</p>
<img src="https://i.imgur.com/CbQWMbc.png" alt="image-20220929231759850" style="zoom:50%;" />

<p>之前点击的数据包似乎已经发送成功了，由于速度很快，我们并没有看到它的处理过程，<strong>所以我们再发送一次，先将之前的delete了</strong></p>
<p>我们再发送一次后，点击simulation，我们看可以看到播放模组，你可以选择一个一个过程点，也可以自动开始播放过程。</p>
<img src="https://i.imgur.com/f7EN29o.png" alt="image-20220929231908323" style="zoom:50%;" />

<p>然后它就会给你显示数据包的发送过程</p>
<ol>
<li><p>PC0先发送PDU到Hub</p>
</li>
<li><p>Hub 发送PDU到PC1 and PC2</p>
</li>
<li><p>PC1收到PDU，确定这个是给我的，PC1需要回应，而PC2也收到PDU，但是发现并不是给我的，PC2不需要回应</p>
</li>
<li><p>PC1回应给PC0，也发送PDU到hub，hub发送PDU给 PC0和 PC2.</p>
</li>
<li><p>这是PC1回应给PC0，所以PC2收到PDU但是不回应。</p>
</li>
<li><p>最后PC0收到PC1发来的PDU，结束过程。</p>
</li>
</ol>
<p>这里的每个过程都可以直接点击查看的</p>
<img src="https://i.imgur.com/tKnPOfN.png" alt="image-20220929232925812" style="zoom:50%;" />

<p>里面详细到每一层都干了什么，封装的内容是什么。</p>
<p>LAB1结束</p>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco软件的学习和使用1</title>
    <url>/2022/09/29/Computer%20Network/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="CIsco软件的学习和使用"><a href="#CIsco软件的学习和使用" class="headerlink" title="CIsco软件的学习和使用"></a>CIsco软件的学习和使用</h1><p>主要目的是用来模仿计算机网络的过程，以及用到了什么协议等功能。</p>
<h2 id="Cisco软件的下载"><a href="#Cisco软件的下载" class="headerlink" title="Cisco软件的下载"></a>Cisco软件的下载</h2><p>由于Cisco官网对于学生群体他是免费的，直接下载即可</p>
<p><a href="https://skillsforall.com/course/getting-started-cisco-packet-tracer">Cisco 官方学习课程</a></p>
<p><a href="https://skillsforall.com/resources/lab-downloads">Cisco packet tracer下载网站</a></p>
<p>注册登陆下载即可。</p>
<p><a href="https://blog.csdn.net/banana_baba/article/details/50804291">cisco命令以及连线</a> &lt;-这个网址可以查看所需要的命令和不知道的连线状态</p>
<h2 id="Cisco的使用"><a href="#Cisco的使用" class="headerlink" title="Cisco的使用"></a>Cisco的使用</h2><ul>
<li><p><a href="https://jessyhhh.github.io/2022/09/30/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab3/">Lab1 通过hub相互连接三台计算机，并配置ip地址</a></p>
</li>
<li><p><a href="https://jessyhhh.github.io/2022/09/30/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab2/">Lab2 访问web服务器</a></p>
</li>
<li><p><a href="https://jessyhhh.github.io/2022/09/30/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab3/">Lab3  计算机网络寻址问题</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco软件的学习和使用lab2</title>
    <url>/2022/09/30/Computer%20Network/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab2/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="Lab2-访问web服务器"><a href="#Lab2-访问web服务器" class="headerlink" title="Lab2 访问web服务器"></a>Lab2 访问web服务器</h1><h2 id="1-在上面放一个PC和一个Server，然后自动连接线互相连接"><a href="#1-在上面放一个PC和一个Server，然后自动连接线互相连接" class="headerlink" title="1. 在上面放一个PC和一个Server，然后自动连接线互相连接"></a>1. 在上面放一个PC和一个Server，然后自动连接线互相连接</h2><img src="https://i.imgur.com/0tfBxGd.png" alt="image-20220930093612071" style="zoom:50%;" />

<h2 id="2-给PC0和server配置ip地址"><a href="#2-给PC0和server配置ip地址" class="headerlink" title="2. 给PC0和server配置ip地址"></a>2. 给PC0和server配置ip地址</h2><p>Pc1: 192.168.0.1          server:192.168.0.2</p>
<img src="https://i.imgur.com/dWhgDIp.png" alt="image-20220930093836643" style="zoom:50%;" />

<h4 id="3-在PC0上打开web-Browser-然后输入server的ip地址"><a href="#3-在PC0上打开web-Browser-然后输入server的ip地址" class="headerlink" title="3. 在PC0上打开web Browser,然后输入server的ip地址"></a>3. 在PC0上打开web Browser,然后输入server的ip地址</h4><img src="https://i.imgur.com/OSh6ctr.png" alt="image-20220930094015966" style="zoom:50%;" />

<img src="https://i.imgur.com/jcXdg3L.png" alt="image-20220930094106392" style="zoom:50%;" />

<p>然后取消realtime，打开simulation，进行播放</p>
<p>我们会发现pc0会有一个PDU传输到server上，server再携带PDU传输给pc0，最后就能显示网址</p>
<img src="https://i.imgur.com/nce5OYs.png" alt="image-20220930094822622" style="zoom:50%;" />



<p>我们可以查看相互递交的PDU的信息，以增加我们对网络的理解。</p>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco软件的学习和使用lab3</title>
    <url>/2022/09/30/Computer%20Network/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab3/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="Lab3-计算机网络寻址问题"><a href="#Lab3-计算机网络寻址问题" class="headerlink" title="Lab3  计算机网络寻址问题"></a>Lab3  计算机网络寻址问题</h3><h4 id="1-放两个pc，然后自动连线，并配备ip"><a href="#1-放两个pc，然后自动连线，并配备ip" class="headerlink" title="1. 放两个pc，然后自动连线，并配备ip"></a>1. 放两个pc，然后自动连线，并配备ip</h4> <img src="https://i.imgur.com/Ulcd7ae.png" alt="image-20220930110720112" style="zoom:50%;" />

<p>Pc0: 192.168.0.1           pc1:192.168.0.2</p>
<h4 id="2-我们可以在工具栏里点击查看按钮"><a href="#2-我们可以在工具栏里点击查看按钮" class="headerlink" title="2. 我们可以在工具栏里点击查看按钮"></a>2. 我们可以在工具栏里点击查看按钮</h4><img src="https://i.imgur.com/0GenxFX.png" alt="image-20220930110940216" style="zoom:50%;" />

<p>然后再点击pc0&#x2F;pc1</p>
<img src="https://i.imgur.com/xvwC2b7.png" alt="image-20220930111009904" style="zoom:50%;" />

<p>可以快速查看端口状况和ARP table，像端口状况我们可以看到ip地址和mac地址</p>
<img src="https://i.imgur.com/U1iQRYW.png" alt="image-20220930111047381" style="zoom:50%;" />

<p>ARP暂时是空的</p>
<h4 id="3-两台计算机的发送ARP过程"><a href="#3-两台计算机的发送ARP过程" class="headerlink" title="3. 两台计算机的发送ARP过程"></a>3. 两台计算机的发送ARP过程</h4><h5 id="1-取消实时模式，开启仿真模式，然后从pc0发送PDU给pc1"><a href="#1-取消实时模式，开启仿真模式，然后从pc0发送PDU给pc1" class="headerlink" title="1. 取消实时模式，开启仿真模式，然后从pc0发送PDU给pc1"></a>1. 取消实时模式，开启仿真模式，然后从pc0发送PDU给pc1</h5><img src="https://i.imgur.com/vqt6xoK.png" alt="image-20220930111441690" style="zoom:50%;" />

<p>我们可以看到有两个PDU，一个是带着ICMP协议的，一个是ARP协议</p>
<h5 id="2-由于在之前查看端口发现PC0和pc1-arp都是空的，所以pc0需要先发送ARP给pc1"><a href="#2-由于在之前查看端口发现PC0和pc1-arp都是空的，所以pc0需要先发送ARP给pc1" class="headerlink" title="2. 由于在之前查看端口发现PC0和pc1 arp都是空的，所以pc0需要先发送ARP给pc1"></a>2. 由于在之前查看端口发现PC0和pc1 arp都是空的，<strong>所以pc0需要先发送ARP给pc1</strong></h5><p>图为ICMP协议的PDU</p>
<img src="https://i.imgur.com/49Zz0Mm.png" alt="image-20220930111720049" style="zoom:50%;" />

<p>目的是让pc1带有pc0 的ip address </p>
<p>图为ARP协议的PDU</p>
<img src="https://i.imgur.com/FApHx34.png" alt="image-20220930111828749" style="zoom:50%;" />

<h5 id="3-我们可以看到第二层是带着pc0（source）的ip和-mac，而目标（target）上pc1的ip和-mac，由于pc1的mac不知道，pc0需要广播给pc1"><a href="#3-我们可以看到第二层是带着pc0（source）的ip和-mac，而目标（target）上pc1的ip和-mac，由于pc1的mac不知道，pc0需要广播给pc1" class="headerlink" title="3. 我们可以看到第二层是带着pc0（source）的ip和 mac，而目标（target）上pc1的ip和 mac，由于pc1的mac不知道，pc0需要广播给pc1."></a>3. 我们可以看到第二层是带着pc0（source）的ip和 mac，而目标（target）上pc1的ip和 mac，由于pc1的mac不知道，pc0需要广播给pc1.</h5><p>下图为封装详情</p>
<img src="https://i.imgur.com/xuIQM39.png" alt="image-20220930112146224" style="zoom:50%;" />

<h5 id="4-我们摁一下下一步按钮，-可以看到绿色的ARP的PDU发送到了PC1上，然后我们再点击一下这个PDU查看详情"><a href="#4-我们摁一下下一步按钮，-可以看到绿色的ARP的PDU发送到了PC1上，然后我们再点击一下这个PDU查看详情" class="headerlink" title="4. 我们摁一下下一步按钮， 可以看到绿色的ARP的PDU发送到了PC1上，然后我们再点击一下这个PDU查看详情"></a>4. 我们摁一下下一步按钮， 可以看到绿色的ARP的PDU发送到了PC1上，然后我们再点击一下这个PDU查看详情</h5><p>下图为已经在PC1上的PDU</p>
<img src="https://i.imgur.com/q55jUqj.png" alt="image-20220930112416190" style="zoom:50%;" />

<p><strong>可以看到由于请求的ip地址跟接受的ip地址相匹配，故它会添加到ARP缓存表格里。</strong></p>
<p><strong>我们点击一下查看按钮来查看pc1上的arp缓存表</strong></p>
<img src="https://i.imgur.com/409V1T6.png" alt="image-20220930112654446" style="zoom:50%;" />

<h5 id="5-可以发现pc1上已经有了pc0的ip-和-mac地址。"><a href="#5-可以发现pc1上已经有了pc0的ip-和-mac地址。" class="headerlink" title="5. 可以发现pc1上已经有了pc0的ip 和 mac地址。"></a>5. 可以发现pc1上已经有了pc0的ip 和 mac地址。</h5><p>pc1接受了pc0的PDU之后需要告诉pc0我已经收到了你的pdu，所以我们需要回应pc0，然后会打包pc1的mac发送给pc0</p>
<img src="https://i.imgur.com/5zvraU1.png" alt="image-20220930113150445" style="zoom:50%;" />

<p>同时我们也可以看到发送给pc0的封装</p>
<img src="https://i.imgur.com/tF0m5ur.png" alt="image-20220930113245722" style="zoom:50%;" />

<p>由于我们知道pc0的mac上多少，故不需要广播FFFF</p>
<h5 id="6-点击下一步，pc1发送ARP给pc0，我们再查看PC0上的PDU"><a href="#6-点击下一步，pc1发送ARP给pc0，我们再查看PC0上的PDU" class="headerlink" title="6. 点击下一步，pc1发送ARP给pc0，我们再查看PC0上的PDU"></a>6. <strong>点击下一步，pc1发送ARP给pc0</strong>，我们再查看PC0上的PDU</h5><img src="https://i.imgur.com/vwIfurd.png" alt="image-20220930113412299" style="zoom:50%;" />

<p>我们可以发现pc0更新了自己的ARP缓存表</p>
<ol start="7">
<li><strong>我们可以点击查看按钮然后再pc0上查看ARP table</strong></li>
</ol>
<img src="https://i.imgur.com/bLxAKxn.png" alt="image-20220930113721017" style="zoom:50%;" />

<p><strong>pc0上有了pc1上的IP地址和mac地址</strong></p>
<h4 id="4-解决网ARP缓存后，我们终于可以发出ICMP类型的PDU了"><a href="#4-解决网ARP缓存后，我们终于可以发出ICMP类型的PDU了" class="headerlink" title="4. 解决网ARP缓存后，我们终于可以发出ICMP类型的PDU了"></a>4. 解决网ARP缓存后，我们终于可以发出ICMP类型的PDU了</h4><p>直接点击播放发现ICMP的PDU可以发出去了</p>
<img src="https://i.imgur.com/I8WBp4y.png" alt="image-20220930114303559" style="zoom:50%;" />



<p>我们再给pc0 到pc1一个新的PDU，看发送的类型还有没有ARP</p>
<img src="https://i.imgur.com/dRd2CqD.png" alt="image-20220930114429284" style="zoom:50%;" />

<p>我们可以看到直接发送的ICMP，不需要再发送ARP了。</p>
<h4 id="5-通过终端清除ARP缓存表"><a href="#5-通过终端清除ARP缓存表" class="headerlink" title="5. 通过终端清除ARP缓存表"></a>5. 通过终端清除ARP缓存表</h4><p>如果我们不想pc0记住pc1，我们可以清楚ARP缓存表</p>
<h5 id="1-在pc0上点击命令行（command-prompt）"><a href="#1-在pc0上点击命令行（command-prompt）" class="headerlink" title="1. 在pc0上点击命令行（command prompt）"></a>1. 在pc0上点击命令行（command prompt）</h5><img src="https://i.imgur.com/pBHHDpB.png" alt="image-20220930114713211" style="zoom:50%;" />

<h5 id="2-可以运行-arp-a-命令查看arp缓存"><a href="#2-可以运行-arp-a-命令查看arp缓存" class="headerlink" title="2. 可以运行 **arp - a **命令查看arp缓存"></a>2. 可以运行 **arp - a **命令查看arp缓存</h5><img src="https://i.imgur.com/KswA0LU.png" alt="image-20220930114940767" style="zoom:50%;" />

<h5 id="3-可以运行arp-d-命令删除缓存表，然后再用arp-a-查看是否已经删除"><a href="#3-可以运行arp-d-命令删除缓存表，然后再用arp-a-查看是否已经删除" class="headerlink" title="3. 可以运行arp -d 命令删除缓存表，然后再用arp -a 查看是否已经删除"></a>3. 可以运行arp -d 命令删除缓存表，然后再用arp -a 查看是否已经删除</h5><img src="https://i.imgur.com/30RQvOK.png" alt="image-20220930115040784" style="zoom:50%;" />

<p>上图可以看到arp缓存表里的信息已经被删除，那么如果我们再次发送PDU给pc1的话，就需要ARP了。</p>
<p><strong>END</strong></p>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco软件的学习和使用lab4</title>
    <url>/2022/10/01/Computer%20Network/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab4/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="lab4-总线型以太网特性（广播，竞争总线，冲突）"><a href="#lab4-总线型以太网特性（广播，竞争总线，冲突）" class="headerlink" title="lab4 总线型以太网特性（广播，竞争总线，冲突）"></a>lab4 总线型以太网特性（广播，竞争总线，冲突）</h1><h2 id="1-自动连线三个pc在一个hub里，形成总线型"><a href="#1-自动连线三个pc在一个hub里，形成总线型" class="headerlink" title="1. 自动连线三个pc在一个hub里，形成总线型"></a>1. 自动连线三个pc在一个hub里，形成总线型</h2><img src="https://i.imgur.com/NZ0n8df.png" alt="image-20221001105741779" style="zoom:50%;" />

<h2 id="2-给每个pc设置ip-address"><a href="#2-给每个pc设置ip-address" class="headerlink" title="2. 给每个pc设置ip address"></a>2. 给每个pc设置ip address</h2><ul>
<li><p>Pc0: 192.168.0.1</p>
</li>
<li><p>Pc1: 192.168.0.2</p>
</li>
<li><p>Pc3: 192.168.0.3</p>
</li>
</ul>
<img src="https://i.imgur.com/CziXKbV.png" alt="image-20221001105934834" style="zoom:50%;" />

<h2 id="3-先在realtime-状态下，将每个pc的ARP缓存表都互相缓存各个pc的mac和ip-address"><a href="#3-先在realtime-状态下，将每个pc的ARP缓存表都互相缓存各个pc的mac和ip-address" class="headerlink" title="3. 先在realtime 状态下，将每个pc的ARP缓存表都互相缓存各个pc的mac和ip address"></a>3. 先在realtime 状态下，将每个pc的ARP缓存表都互相缓存各个pc的mac和ip address</h2><h3 id="给每一台计算机都发送PDU给另一台"><a href="#给每一台计算机都发送PDU给另一台" class="headerlink" title="给每一台计算机都发送PDU给另一台"></a>给每一台计算机都发送PDU给另一台</h3><p>如pc0 - pc1 ，pc0 - pc2 ， pc1 - pc2</p>
<p>这样就缓存了arp了</p>
<img src="https://i.imgur.com/tKCSG5s.png" alt="image-20221001110537802" style="zoom: 33%;" />

<h2 id="4-正式开始实验"><a href="#4-正式开始实验" class="headerlink" title="4. 正式开始实验"></a>4. 正式开始实验</h2><h3 id="1-当ICPM-PDU从pc0到pc2的过程"><a href="#1-当ICPM-PDU从pc0到pc2的过程" class="headerlink" title="1. 当ICPM PDU从pc0到pc2的过程"></a>1. 当ICPM PDU从pc0到pc2的过程</h3><ol>
<li><p>ICPM PDU 在PC0打包自己的ip和Mac address发送到 端口Fa0 hub</p>
</li>
<li><p>Hub接受到ICPM pdu，从另外两个端口(Fa1 and Fa2)发送到PC1和PC2</p>
</li>
<li><p>PC1发现PDU里打包的mac地址和自己的地址不匹配，所以drop fram</p>
</li>
</ol>
<img src="https://i.imgur.com/2Qxl41p.png" alt="image-20221001234218124" style="zoom:50%;" />

<ol start="4">
<li>PC2的mac地址和PDU里的dest：MAC地址相匹配，接受该PDU，然后解封PDU从以太网帧（<a href="https://zhuanlan.zhihu.com/p/21318925">Ethernet Frame</a>）</li>
</ol>
<img src="https://i.imgur.com/DRi3eC0.png" alt="image-20221001234301199" style="zoom:50%;" />

<ol start="5">
<li>解封到IP层后， pc2检测该pdu目标ip地址和 自己ip地址相匹配，然后解封 packet（PDU解封出来的），这个packet类型是ICMP类型，然后在ip层接受了Echo request（响应请求），</li>
</ol>
<img src="https://i.imgur.com/5MVxvwj.png" alt="image-20221002003453705" style="zoom:50%;" />

<p>什么是<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/ICMP.html">ICMP</a> （Internet Control Message Protocol）</p>
<p>简单的来说就是检测错误的机制，具体可查看上面链接🔗</p>
<ol start="6">
<li>网络层 接受了Echo request（响应请求） message后自然也需要回复一个message让pc0知道已经接受了，所以需要回应一个 Echo reply（响应回复）message（将ICMP的Echo request 改成 reply），</li>
</ol>
<img src="https://i.imgur.com/gUheRgK.png" alt="image-20221002003821484" style="zoom:50%;" />

<ol start="7">
<li>第二层将 ip 和mac 封装成PDU，由于只需要发送给PC0，所以它是<a href="https://blog.51cto.com/tommyking/1915236">unicast单播</a>， pc2里有ARP缓存了pc0的ip和 mac address，<a href="https://www.jannet.hk/routing-decision-zh-hans/#Static_Route_Next_Hop">next-hop</a>指的是下一站的意思，封装成PDU在<a href="https://zhuanlan.zhihu.com/p/21318925">以太网帧</a>。</li>
</ol>
<img src="https://i.imgur.com/JlvSVKB.png" alt="image-20221002005015120" style="zoom:50%;" />

<ol start="8">
<li>pc2从fa0端口传输PDU到hub，hub广播给pc0和pc1，问这个pdu是谁的，pc0匹配，pc1不匹配，pc0就接受了这个PDU，解封PDU里的packet后就接受到了Echo reply了。</li>
</ol>
<img src="https://i.imgur.com/hytnPeq.png" alt="image-20221002010554321" style="zoom:50%;" />

<h3 id="2-Hub接受了两个PDU起冲突"><a href="#2-Hub接受了两个PDU起冲突" class="headerlink" title="2. Hub接受了两个PDU起冲突"></a>2. Hub接受了两个PDU起冲突</h3><p>什么是冲突，为什么会有冲突，详情请点击-&gt;<a href="https://blog.csdn.net/gui951753/article/details/79402528">集线器(hub),交换机以及路由器异同；冲突域和广播域详解</a></p>
<ol>
<li>pc0发送PDU给PC1，pc2发送PDU给pc1</li>
<li>点击下一步后，发现两个PDU在hub里起冲突了</li>
</ol>
<img src="https://i.imgur.com/WEYk7z6.png" alt="image-20221002014816438" style="zoom:50%;" />

<ol start="3">
<li>在hub里起冲突后，hub要让别人知道我这出事了，于是会向所人有发送一个冲突frame（帧）到别人主机的端口那</li>
</ol>
<img src="https://i.imgur.com/NZUV0AV.png" alt="image-20221002015348222" style="zoom:50%;" />

<ol start="4">
<li>端口检查一看发现是 冲突帧，就将它给扔了。</li>
</ol>
<p>原因其实就在于 Hub线路里只有一条线，这条线连着几个PC，如果pc之间想在同一时间相互传输PDU，则会发生冲突，如</p>
<img src="https://i.imgur.com/A1sHVRF.png" alt="image-20221002015635618" style="zoom:50%;" />



<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><h3 id="关于Hub"><a href="#关于Hub" class="headerlink" title="关于Hub"></a>关于Hub</h3><ul>
<li><p>定义：集线器（Hub）是指将多条以太网双绞线或光纤集合连接在同一段物理介质下的设备。集线器是运作在OSI模型中的物理层。它可以视作多端口的中继器，若它侦测到碰撞，它会提交阻塞信号。</p>
</li>
<li><p>特点：<br>集线器最大的特点就是采用共享型模式，就是指在有一个端口在向另一个端口发送数据时，其他端口就处于“等待”状态。为什么会“等待”呢？举个例子来说，其实在单位时间内A向B发送数据包时，A是发送给B、C、D三个端口的（该现象即紧接下文介绍的IP广播），但是只有B接收，其他的端口在第一单位时间判断不是自己需要的数据后将不会再去接收A发送来的数据。直到A再次发送IP广播，在A再次发送IP广播之前的单位时间内，C，D是闲置的，或者CD之间可以传输数据。如图1，我们可以理解为集线器内部只有一条通道（即公共通道），然后在公共通道下方就连接着所有端口。</p>
</li>
</ul>
<p>图一：</p>
<img src="https://i.imgur.com/hO7Wbhg.png" alt="image-20221002015911807" style="zoom:50%;" />

<blockquote>
<ul>
<li>集线器(hub),交换机以及路由器异同；冲突域和广播域详解— <a href="https://blog.csdn.net/gui951753/article/details/79402528">集线器(hub),交换机以及路由器异同；冲突域和广播域详解</a></li>
</ul>
</blockquote>
<h3 id="关于PDU的传输过程"><a href="#关于PDU的传输过程" class="headerlink" title="关于PDU的传输过程"></a>关于PDU的传输过程</h3><ul>
<li><p>在datalink层通过匹配Mac address来确认是否是正确的目标Mac address，正确则接受，不正确则丢丢，接受后就会从以太网帧（Ethernet frame）解封（decapsulate）PDU</p>
<img src="https://i.imgur.com/GTJiQ2w.png" alt="image-20221002020921089" style="zoom:50%;" />
</li>
<li><p>从以太网帧解封出来的数据我们称作packet(数据包)，packet包含以下内容</p>
</li>
</ul>
<img src="https://i.imgur.com/56oF77X.png" alt="image-20221002021200902" style="zoom:50%;" />

<p>在实验一中pc2解封了PDU后，在第三层就会有ip检测，ip也需要相匹配才能进行下去，如果不匹配也会直接扔掉。</p>
<p>匹配完后会检测这整个packet是什么类型，在实验1上我们可以看到整个packet是ICMP类型，所以pc2检测出来ICMP类型后就会执行ICMP程序，ICMP程序发现没问题后就会接受Echo request（响应回复）并对发过来的pc进行回复Echo reply。</p>
<blockquote>
<ul>
<li>关于什么是ICMP— <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/ICMP.html">ICMP</a></li>
<li>关于什么是hop&#x2F; next-hop— <a href="https://www.jannet.hk/routing-decision-zh-hans/#Static_Route_Next_Hop">hop</a></li>
<li>关于两台电脑发文件处理PDU的过程— <a href="https://blog.csdn.net/jerry11112/article/details/78897273">CSDN两台电脑如何发文件</a></li>
<li>什么是以太网帧— <a href="https://zhuanlan.zhihu.com/p/21318925">以太网帧（Ethernet frame）</a></li>
<li>单播（unicast）、组播（multicast）、广播(broadcast)的区别 —<a href="https://blog.51cto.com/tommyking/1915236">单播（unicast）、组播（multicast）、广播(broadcast)的区别</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco软件的学习和使用lab5</title>
    <url>/2022/10/02/Computer%20Network/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab5/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="lab5-hub和switch的区别和优缺点"><a href="#lab5-hub和switch的区别和优缺点" class="headerlink" title="lab5 hub和switch的区别和优缺点"></a>lab5 hub和switch的区别和优缺点</h1><h2 id="1-安装图片连接设备并设置ip地址"><a href="#1-安装图片连接设备并设置ip地址" class="headerlink" title="1. 安装图片连接设备并设置ip地址"></a>1. 安装图片连接设备并设置ip地址</h2><p><img src="https://i.imgur.com/1viAmkR.png" alt="image-20221002175016976"></p>
<ul>
<li>给每个pc配置上ip后，先将每个pc和switch的ARP缓存表缓存各自的pc，相互发送PDU即可。</li>
<li>可以点击查看ARPtable 是否有缓存各自ip地址</li>
<li>Swtich是有Mac address储存表（table）的，它可以记住每台机器的Mac address，如何记住每台机器的mac呢</li>
</ul>
<blockquote>
<ul>
<li><img src="https://i.imgur.com/ClNWhRX.png" alt="image-20221002175715424" style="zoom:50%;" /></li>
<li>通过广播一来一回，就可以知道两台pc之间的mac地址了，储存mac地址可以再下次传输的时候不需要再广播给另外的pc，效率就会提高。</li>
</ul>
</blockquote>
<h2 id="2-实验开始"><a href="#2-实验开始" class="headerlink" title="2. 实验开始"></a>2. 实验开始</h2><h3 id="Hub-和-Switch-的比较"><a href="#Hub-和-Switch-的比较" class="headerlink" title="Hub 和 Switch 的比较"></a>Hub 和 Switch 的比较</h3><p>Hub连接pc进行的流程</p>
<blockquote>
<ol>
<li>Pc0先将PTU发送到Hub，Hub广播给其他两台pc验证Mac address，pc1成功后将接受这个PTU</li>
<li>接受PTU的PC1将发送“已回复”的PTU给pc0</li>
</ol>
</blockquote>
<img src="https://i.imgur.com/Mz5KzTl.png" alt="image-20221011202750403" style="zoom:50%;" />

<p>Switch连接pc进行的流程</p>
<p>我们会发现router会直接发送给目标pc，且不需要广播给别的pc</p>
<p>为什么，<strong>原因是router能够收集和检测mac地址，有了mac地址，router可以直接发送给目标pc，提高效率和实际</strong></p>
<blockquote>
<ul>
<li>pc3发送ICMP类型PTU给pc4，router通过端口检测了Mac address并发现该目标mac address在 router里</li>
<li>router直接发送PTU给pc4</li>
<li>pc4回复PTU给pc3，经过router，router再一次检测mac地址</li>
<li>router发送PTU给pc3</li>
</ul>
</blockquote>
<img src="https://i.imgur.com/DXAqkWC.png" alt="image-20221011203421514" style="zoom:50%;" />

<h3 id="冲撞域的比较"><a href="#冲撞域的比较" class="headerlink" title="冲撞域的比较"></a>冲撞域的比较</h3><h4 id="Hub"><a href="#Hub" class="headerlink" title="Hub"></a>Hub</h4><blockquote>
<ul>
<li>分别发送两个PTU给别的PC</li>
<li>Hub里的两个PTU相互碰撞</li>
<li>Hub发送给每个pc表示被PTU以及被冲撞了</li>
</ul>
</blockquote>
<img src="https://i.imgur.com/agbOaLL.png" alt="image-20221011204219101" style="zoom:50%;" />

<img src="https://i.imgur.com/QGbW94w.png" alt="image-20221011204247916" style="zoom:50%;" />

<h4 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h4><blockquote>
<ul>
<li>分别从不同的PC发送PTU给别的PC</li>
<li>switch检测不同的PTU,并检测次PTU的目标mac地址</li>
<li>Switch确认mac地址后将PTU发送给不同的pc</li>
<li>swtich按照先后顺序进行发送</li>
<li>按照图里是pc0和pc1都发送给pc2一个ptu，那么pc2将会按照接受的顺序发送回复类型ptu</li>
<li>switch并没有像hub一样被碰撞</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/qFGHgDx.png" alt="image-20221012103125218" style="zoom:50%;" /><img src="https://i.imgur.com/AW6HWBE.png" alt="image-20221012103208015" style="zoom:50%;" /></p>
<p><img src="https://i.imgur.com/ZYXuIzk.png" alt="image-20221012103327684" style="zoom:50%;" /><img src="https://i.imgur.com/gsvACge.png" alt="image-20221012103444807" style="zoom:50%;" /></p>
<h4 id="大型局域网，两个switch互联"><a href="#大型局域网，两个switch互联" class="headerlink" title="大型局域网，两个switch互联"></a>大型局域网，两个switch互联</h4><blockquote>
<ul>
<li>先像上一步一样，先互相发送PTU给别的PC</li>
<li>从左边的pc1发送PTU给右边的pc4</li>
<li>发送过程跟上上面的一样，没什么区别</li>
</ul>
</blockquote>
<blockquote>
<p>两个pc发送两个PTU给别的pc</p>
<ul>
<li>switch会匹配一个PTU的mac address，如果没有目标address就会广播（包括连接的switch）</li>
<li>另一个switch发现该ptu的目标mac address在mac目录有储存</li>
<li>switch就会发送给该目标pc</li>
<li>剩下的过程就懂得都懂</li>
</ul>
</blockquote>
<img src="https://i.imgur.com/E9NRKqn.png" alt="image-20221012131848503" style="zoom:50%;" />

<img src="https://i.imgur.com/qVbNBpL.png" alt="image-20221012131908715" style="zoom:50%;" />

<img src="https://i.imgur.com/BeYj4hg.png" alt="image-20221012131929769" style="zoom:50%;" />

<img src="https://i.imgur.com/PBdeKju.png" alt="image-20221012131955479" style="zoom:50%;" />

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>switch </p>
<blockquote>
<ul>
<li>不受冲撞域的影响，直接进行PTU传送</li>
<li>更够储存mac address，直接发送给目标pc</li>
<li>更高效方便</li>
</ul>
</blockquote>
<p>Hub</p>
<blockquote>
<ul>
<li>如果发送两个PTU就会收到碰撞域的影响</li>
<li>需要广播才能知道该目标mac address</li>
<li>不够高效方便</li>
</ul>
</blockquote>
<p><a href="https://blog.csdn.net/hanzhen7541/article/details/79015047?ops_request_misc=&request_id=&biz_id=102&utm_term=%E9%9B%86%E7%BA%BF%E5%99%A8%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-79015047.142%5Ev53%5Enew_blog_pos_by_title,201%5Ev3%5Econtrol_1&spm=1018.2226.3001.4187">交换机和集线器的区别</a></p>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco软件的学习和使用lab8</title>
    <url>/2022/11/04/Computer%20Network/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab8/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="虚拟局域网-Vlan-Virtual-Local-Area-Network或简写VLAN"><a href="#虚拟局域网-Vlan-Virtual-Local-Area-Network或简写VLAN" class="headerlink" title="虚拟局域网 Vlan(Virtual Local Area Network或简写VLAN)"></a>虚拟局域网 Vlan(Virtual Local Area Network或简写VLAN)</h1><p><a href="https://zh.wikipedia.org/zh-cn/%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91">什么是Vlan - wikipedia</a></p>
<h2 id="搭建网络"><a href="#搭建网络" class="headerlink" title="搭建网络"></a>搭建网络</h2><p>如图所示：</p>
<img src="https://i.imgur.com/x1TQNdD.png" alt="image-20221104174405973" style="zoom:50%;" />

<ul>
<li>根据上图搭建网络</li>
</ul>
<h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><h4 id="1-验证每一个主机都在同一个Vlan，同一个广播域"><a href="#1-验证每一个主机都在同一个Vlan，同一个广播域" class="headerlink" title="1. 验证每一个主机都在同一个Vlan，同一个广播域"></a>1. 验证每一个主机都在同一个Vlan，同一个广播域</h4><p>确定所有电脑都在vlan1中。</p>
<ul>
<li>点击查看按钮，查看switch的端口状态。</li>
</ul>
<img src="https://i.imgur.com/IACjFzx.png" alt="image-20221104174919972" style="zoom:50%;" />

<p>可以看到已经连接的端口状态都是up，<strong>且每一个端口都是Vlan1</strong>(<strong>默认</strong>)</p>
<p><strong>所以每一个主机都在Vlan1，故都在一个广播域</strong></p>
<ul>
<li>验证是否都在广播域</li>
</ul>
<blockquote>
<ul>
<li>创建广播帧</li>
</ul>
<img src="https://i.imgur.com/BFI2gQH.png" alt="image-20221104175303754" style="zoom:50%;" />

<p>从PC0开始发送，看看是否每个主机都能收到广播。</p>
<img src="https://i.imgur.com/Gh3bfkS.png" alt="image-20221104175427570" style="zoom:50%;" />

<p>可以发现每个主机都能收到ICMP请求并响应，这个过程在前面的实验已经讲过，故不再解释。</p>
</blockquote>
<h4 id="2-如何划分Vlan"><a href="#2-如何划分Vlan" class="headerlink" title="2. 如何划分Vlan"></a>2. 如何划分Vlan</h4><p>我们想要Pc0-pc2在同一个Vlan，同一个广播域。</p>
<img src="https://i.imgur.com/unO9r1T.png" alt="image-20221104180132471" style="zoom:50%;" />

<p>PC3- pc5在另一个Vlan，另一个广播域。</p>
<img src="https://i.imgur.com/2xAYPNF.png" alt="image-20221104180147551" style="zoom:50%;" />

<ul>
<li>操作</li>
</ul>
<blockquote>
<p>我们需要在switch上的端口进行划分Vlan，而不是在主机上划分Vlan</p>
<p>如上图所示，需要将左边三台划分为Vlan2，右边三台划分为Vlan3.</p>
<ul>
<li>创建一个Vlan2</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/O5oY4PE.png" alt="image-20221104180410109" style="zoom:50%;" />

<p>我们需要在switch上的VLAN Datebase里创建一个Vlan2, 然后点击添加。</p>
<img src="https://i.imgur.com/ujJikYA.png" alt="image-20221104180501662" style="zoom:50%;" />

<p>可以看见里面多了一个Vlan2.</p>
</blockquote>
<ul>
<li>我们需要将fa0&#x2F;1-3的端口都分配给Vlan2，而不是Vlan1</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/ZSBXXso.png" alt="image-20221104180628544" style="zoom:50%;" />

<p><strong>在switch上点击端口将Vlan中的default切换成Vlan2.</strong></p>
<p>1-3的端口都这么做。</p>
</blockquote>
<ul>
<li>测试pc0-2 的的三台电脑是否分配到Vlan2</li>
</ul>
<blockquote>
<p>发送复杂PDU并目的IP为255.255.255.255</p>
<img src="https://i.imgur.com/xx6gUma.png" alt="image-20221105125813123" style="zoom:50%;" />

<p>我们发现PDU只到达了被分配到Vlan2到每个pc上。</p>
</blockquote>
<ul>
<li><p>按照上述步骤设置Vlan3或者是用命令行来进行配置</p>
</li>
<li><p>命令行配置Vlan（大多数是要用命令行来配置Vlan的，所以这个也很重要）</p>
</li>
</ul>
<blockquote>
<p>Switch(config)#vlan 3      %%进入并创建Vlan3</p>
<p>Switch(config-vlan)#name Vlan3  %%命名Vlan3</p>
<p>Switch(config-vlan)#end</p>
<p>Switch(config)#int range fa 0&#x2F;4 - 6 &amp;&amp;进入端口4-6</p>
<p>Switch(config-if-range)#switchport mode access %% 设置端口模式</p>
<p>Switch(config-if-range)#switchport access vlan 3 %%将端口分配到vlan3</p>
<p>Switch#show vlan brief</p>
<p><a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/main/%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%AB%AF%E5%8F%A3untaged%E3%80%81taged%E3%80%81trunk%E3%80%81access%20%E7%9A%84%E5%8C%BA%E5%88%AB.pdf">Access 和 trunk的区别</a></p>
</blockquote>
<ul>
<li>发送PDU验证。</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/YgqZe7n.png" alt="image-20221105131545778" style="zoom:50%;" />

<p>如上图所示，结果上可以看到端口4-6已经被分配到vlan3了，只有在vlan3的主机才能接受PDU。</p>
</blockquote>
</blockquote>
<h4 id="3-不同的Vlan能否相互联系"><a href="#3-不同的Vlan能否相互联系" class="headerlink" title="3. 不同的Vlan能否相互联系"></a>3. 不同的Vlan能否相互联系</h4><p><strong>答案：不同的Vlan不能相互联系</strong></p>
<ul>
<li>验证</li>
</ul>
<blockquote>
<p>在vlan2的主机ping 一个vlan3的主机看看结果</p>
<img src="https://i.imgur.com/eAx0zC4.png" alt="image-20221105132333290" style="zoom:50%;" />

<p>我们可以发现不同的vlan不能相互 ping之间的主机。</p>
</blockquote>
<ol start="4">
<li>看不同交换机中相同的vlan是否互通</li>
</ol>
<blockquote>
<p>根据下图搭建网络</p>
<img src="https://i.imgur.com/dSHjpnL.png" alt="image-20221105133901176" style="zoom:50%;" />

<p>左边依旧是vlan2，右边是vlan3</p>
<ul>
<li><p>根据步骤2进行配置。</p>
</li>
<li><p>通过pc0发送广播帧来看看是否能够发送PDU给第二个switch上的vlan2.</p>
</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/jalUA6w.png" alt="image-20221105134720135" style="zoom:50%;" />

<p>我们可以看到它只发送了本地的vlan的两台主机为什么呢</p>
<ul>
<li>原因</li>
</ul>
<blockquote>
<p>1.在两台switch之间连接的模式是access而不是trunk</p>
<p>2.两台switch之间是默认的vlan1，而不是vlan2，所以在access模式中不会转发到另一个switch</p>
<p><a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/main/%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%AB%AF%E5%8F%A3untaged%E3%80%81taged%E3%80%81trunk%E3%80%81access%20%E7%9A%84%E5%8C%BA%E5%88%AB.pdf">access和trunk的区别</a></p>
</blockquote>
<ul>
<li>解决</li>
</ul>
<blockquote>
<p>只需要将两个switch之间连接的端口改成trunk即可。</p>
</blockquote>
<ul>
<li>再次验证</li>
</ul>
<blockquote>
<p>发送广播帧看是否到达下面switch vlan2的主机</p>
<img src="https://i.imgur.com/IRNUNm5.png" alt="image-20221105135417889" style="zoom:50%;" />

<p><img src="https://i.imgur.com/Eh4IBRT.png" alt="image-20221105135437848"></p>
</blockquote>
<ul>
<li>结论</li>
</ul>
<blockquote>
<p>它是可以连接不同的switch中相同的vlan里的主机。</p>
</blockquote>
</blockquote>
<p>实验结束。</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco软件的学习和使用lab6</title>
    <url>/2022/10/12/Computer%20Network/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab6/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="交换机的自我学习过程"><a href="#交换机的自我学习过程" class="headerlink" title="交换机的自我学习过程"></a>交换机的自我学习过程</h1><p>根据上面的实验中，我们已经知道了交换机是可以记录mac address并传送到别的pc，那么它是怎么记录mac address的呢</p>
<h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><p>pc和pc之间的发送都是遇事不决直接ARP，如果不知道对方是谁的话</p>
<img src="https://i.imgur.com/4OVWlIV.png" alt="image-20221012152637211" style="zoom:50%;" />

<p>所以流程是:</p>
<blockquote>
<ul>
<li>pc1发送ARP给pc2</li>
<li>switch接受到pc给的PTU后，发现里面的mac address自己不认识</li>
<li>switch广播此PTU找到认识的人，并记录这个来源pc1的mac address</li>
</ul>
<img src="https://i.imgur.com/LCF72NL.png" alt="image-20221012152935473" style="zoom:50%;" />

<ul>
<li>pc2接受到此PTU后会回应一个”回复“PTU给pc1</li>
<li>switch发现pc2给的PTU里的mac address在自己的mac table里，于是就直接发给pc1了</li>
<li>同时switch还会将pc2的mac地址记录在里面</li>
</ul>
<img src="https://i.imgur.com/Oqv1X1J.png" alt="image-20221012153214246" style="zoom:50%;" />
</blockquote>
<h2 id="Switch通过hub来记录mac-address"><a href="#Switch通过hub来记录mac-address" class="headerlink" title="Switch通过hub来记录mac address"></a>Switch通过hub来记录mac address</h2><img src="https://i.imgur.com/GC1wTsF.png" alt="image-20221012153701508" style="zoom:50%;" />

<p>构建上图</p>
<p>从pc3发送PTU给pc4，看switch的mac table是否有变化</p>
<blockquote>
<ul>
<li>pc3发送PTU给pc4，ARP广播给switch和pc4</li>
</ul>
<img src="https://i.imgur.com/TqgEajb.png" alt="image-20221012154236580" style="zoom:50%;" />

<ul>
<li>switch也接受到了pc3的PTU，并记录它的Mac address</li>
<li>pc3发的PTU写的是广播的mac地址，故switch将它广播了出去</li>
</ul>
<img src="https://i.imgur.com/x63dz53.png" alt="image-20221012154715413" style="zoom:50%;" />

<ul>
<li>由于目标IP并不是它们三，所以该PTU都丢弃了</li>
<li>pc4接受了该PTU并回复给pc3，但是由于hub的特性，hub也将它广播了出去</li>
</ul>
<img src="https://i.imgur.com/3bc3y2F.png" alt="image-20221012155006825" style="zoom:50%;" />

<ul>
<li>于是两个mac地址就都在switch中的mac table里了，并且switch检测其目标mac地址并不在它的网络里，故直接丢弃。</li>
<li>其专业一点的解释就是PTU来的端口和出去的端口一致，故判断为不在switch连接的pc中</li>
</ul>
<img src="https://i.imgur.com/aEVvYsJ.png" alt="image-20221012155249507" style="zoom:50%;" />
</blockquote>
<h2 id="pc3和pc4都互相有对方的mac-address，此时发送PTU会发生什么"><a href="#pc3和pc4都互相有对方的mac-address，此时发送PTU会发生什么" class="headerlink" title="pc3和pc4都互相有对方的mac address，此时发送PTU会发生什么"></a>pc3和pc4都互相有对方的mac address，此时发送PTU会发生什么</h2><p>我们将switch里的Mac address table清空</p>
<p>命令可写为</p>
<p><strong>Switch&gt;en</strong></p>
<p><strong>Switch#clear mac-a</strong></p>
<img src="https://i.imgur.com/YqYXdVM.png" alt="image-20221012155559092" style="zoom:50%;" />

<p>流程: </p>
<blockquote>
<ul>
<li>pc3发送PTU到pc4</li>
<li>流程跟上图一样，只是发送到不是ARP类型，而是ICMP类型</li>
</ul>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Switch具有记录mac address 功能，它会记录来源Mac address放到Mac table里</p>
<p>每当有PTU都会查询有没有其mac address，如果没有则直接丢弃，如果是广播地址FFFF:FFFF:FFFF则广播给其他PC</p>
<p>同时Switch里面的结构，导致冲突域不会增大太多，具体请看<a href="https://blog.csdn.net/hanzhen7541/article/details/79015047?ops_request_misc=&request_id=&biz_id=102&utm_term=%E9%9B%86%E7%BA%BF%E5%99%A8%E5%92%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%8C%BA%E5%88%AB&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-79015047.142%5Ev53%5Enew_blog_pos_by_title,201%5Ev3%5Econtrol_1&spm=1018.2226.3001.4187">Hub和switch的区别</a></p>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell learning 1</title>
    <url>/2022/11/30/CS/shell/Shell-learning-1/</url>
    <content><![CDATA[<h1 id="What-is-shell"><a href="#What-is-shell" class="headerlink" title="What is shell"></a>What is shell</h1><h1 id="Basic-shell-command"><a href="#Basic-shell-command" class="headerlink" title="Basic shell command"></a>Basic shell command</h1><p>remmanber use <code>TAP</code> in your keyboard, which can make you type more easier.</p>
<p>quckly to copy and pasta command are <code>ctrl + shift + c/v</code> in linux, other is same with your system</p>
<p>any command you can use <code>[command] --help</code> to search what you want command .</p>
<h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>cd can show to current directory or back to parent directory</p>
<p>two cmd</p>
<p>go to current directory at directory</p>
<p><code>cd /home</code></p>
<p>back to parent directory</p>
<p><code>cd ..</code></p>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p>Show the files in current directory</p>
<p><code>ls</code></p>
<p>show the owner and information of files in the current directory</p>
<p><code>ls -l</code></p>
<p>seach parent directory files</p>
<p><code>ls ..</code></p>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>change file name, such as 111.txt rename 123.txt</p>
<p><code>mv 111.txt 123.txt</code></p>
<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>copy file from 111.txt rename to 123.txt</p>
<p><code>cp 111.txt 123.txt</code></p>
<p>Copy files from current directory to parent directory and rename from 111.txt to 144.txt</p>
<p><code>cp 111.txt ../144.txt</code></p>
<h2 id="rm-amp-mk"><a href="#rm-amp-mk" class="headerlink" title="rm &amp; mk"></a>rm &amp; mk</h2><p>remove file from parent directory, such as remove 144.txt from parent directory.</p>
<p><code>rm ../144.txt</code></p>
<p>remove current directory of directory, such as remove a empty directory 111 in current directory. </p>
<p><code>rmdir 111</code> </p>
<p>create a dirctory in current directory</p>
<p><code>mkdir myphoto</code> or <code>mkdir &quot;my photo&quot;</code></p>
<h2 id="Manual"><a href="#Manual" class="headerlink" title="Manual"></a>Manual</h2><p>it is can show the detail information about the command, such as want to know the rm detail information</p>
<p><code>man rm</code></p>
<p><code>q</code> can quit the manual</p>
<h2 id="Clear-Terminal"><a href="#Clear-Terminal" class="headerlink" title="Clear Terminal"></a>Clear Terminal</h2><p>keyboard<code>control(crtl) + L</code> or <code>clear</code> clear terminal and go back to top</p>
<h2 id="lt-gt-angle-bracket"><a href="#lt-gt-angle-bracket" class="headerlink" title="&lt;&gt; angle bracket"></a>&lt;&gt; angle bracket</h2><p><code>&lt;</code> is input meaning</p>
<p><code>&gt;</code> is output meaning</p>
<p>such as </p>
<p><code>echo hellow &gt; hellow.txt</code> Which is mean hellow is output into the hellow.txt files.</p>
<p><code>cat</code> can print the file contents, such as</p>
<p><code>cat hellow.txt</code></p>
<p>also we can input the hellow.txt file in the <code>cat</code>, such as </p>
<p><code>cat &lt; hellow.txt</code>which would be print the <code>hellow </code>on the shell</p>
<p>what that means, let’s go to do another example,</p>
<p>when <code>cat </code> input the <code>hellow.txt</code>, we can output the <code>hellow.txt</code> contents to another files or new create files.</p>
<p><code>cat &lt;hellow.txt &gt; hellow2.txt</code> that wil carrier the <code>hellow.txt</code> contents to <code>hellow2.txt</code> contents. </p>
<p><code>&gt;&gt;</code> meaning appends</p>
<p><code>cat &lt; hellow.txt &gt;&gt; hellow2.txt </code> which is means copy contents from <code>hellow.txt</code> to <code>hellow2.txt</code> but appends not cover.  </p>
<h2 id="pipe-charater"><a href="#pipe-charater" class="headerlink" title="| pipe charater"></a>| pipe charater</h2><p>take the output of the program to the left<code>| </code> input in the left.</p>
<p>such as</p>
<p><code>ls -l/</code></p>
<p><code>tail -n1</code>  which is mean output the <code>ls -l</code> last informatiom of the <code>ls -l</code></p>
<p><code>ls -l / | tail -n1</code>  </p>
<p>if we connect the angle bracket to use this cmd, such as</p>
<p><code>ls -l / | tail -n1 &gt; ls.txt</code> there will wirte the last one information in the <code>ls.txt</code></p>
<p>How to find the file in linux or mac</p>
<p><code>sudo find -f -name filename</code></p>
<p><code>xdg-open filename</code></p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco软件的学习和使用lab7</title>
    <url>/2022/10/12/Computer%20Network/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab7/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="STP协议的作用"><a href="#STP协议的作用" class="headerlink" title="STP协议的作用"></a>STP协议的作用</h1><p>什么是STP协议，简单点就是为了防止广播风暴，胡乱占用交换机资源所产生的协议</p>
<p>那么什么是广播风暴呢</p>
<p>根据上一几个实验可以知道ARP是一个广播包，它的请求PTU里的mac address是FFFF:FFFF:FFFF故如果在switch中接受，并将广播给其他机器。</p>
<p>下面会详细说明什么是STP协议，什么是广播风暴</p>
<h2 id="STP协议"><a href="#STP协议" class="headerlink" title="STP协议"></a>STP协议</h2><p><a href="https://blog.csdn.net/kuangyeliangguang/article/details/109192673?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166559084816782417094322%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166559084816782417094322&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109192673-null-null.142%5Ev53%5Enew_blog_pos_by_title,201%5Ev3%5Econtrol_1&utm_term=STP%E5%8D%8F%E8%AE%AE&spm=1018.2226.3001.4187">STP协议–CSDN</a></p>
<img src="https://i.imgur.com/QH7e6CS.png" alt="image-20221012223851523" style="zoom:50%;" />

<p>在Cisco软件中搭建的四台switch和两台pc来演示STP协议</p>
<h3 id="搭建环路switch，如上图所示"><a href="#搭建环路switch，如上图所示" class="headerlink" title="搭建环路switch，如上图所示"></a>搭建环路switch，如上图所示</h3><p>我们可以看到图中switch0到switch1是有个小黄点</p>
<p><strong>这个小黄点指的是blocking状态，也就是堵塞的状态</strong></p>
<blockquote>
<ul>
<li>为什么我们搭建了环路有一个blocking状态呢</li>
</ul>
<p>因为swtich自动载入了STP协议，有了STP协议就不会发生广播风暴</p>
<p>它会自动选择最适合的线路进行拨通</p>
</blockquote>
<h3 id="在pc的命令端尝试ping-对方的ip看是否检测得到"><a href="#在pc的命令端尝试ping-对方的ip看是否检测得到" class="headerlink" title="在pc的命令端尝试ping 对方的ip看是否检测得到"></a>在pc的命令端尝试ping 对方的ip看是否检测得到</h3><ul>
<li><strong>pc0 ping pc1</strong></li>
</ul>
<img src="https://i.imgur.com/ANH4ltM.png" alt="image-20221013122932233" style="zoom:50%;" />

<p>看上图的状态我们可以发现它是可以ping到pc1的</p>
<ul>
<li>Pc1 ping pc0</li>
</ul>
<img src="https://i.imgur.com/6p4rt1C.png" alt="image-20221013123109167" style="zoom:50%;" />

<p>可以发现两个pc互相都能ping成功</p>
<h3 id="通pc过发送PTU来观察PTU的路程"><a href="#通pc过发送PTU来观察PTU的路程" class="headerlink" title="通pc过发送PTU来观察PTU的路程"></a>通pc过发送PTU来观察PTU的路程</h3><p>pc0发送PTU给pc1</p>
<img src="https://i.imgur.com/yjHOI19.png" alt="image-20221014093847374" style="zoom:50%;" />

<p>由于上一步已经ping了双方pc的ip，所以已经发送过ARP类型的PTU了，故每个switch都应该有他们的mac address。</p>
<ul>
<li><strong>我们如何通过另一条线路进行PTU传送呢</strong></li>
</ul>
<p>我们可以把通的那一端的端口关闭</p>
<img src="https://i.imgur.com/c90fCch.png" alt="image-20221014095103590" style="zoom:50%;" />

<p>点击switch0 选择关闭和switch1连接的端口</p>
<img src="https://i.imgur.com/4iDxdIX.png" alt="image-20221014095149886" style="zoom:50%;" />

<p>可以发现端口过一会就变绿了，也可以使用加速时间功能</p>
<img src="https://i.imgur.com/cRDMnBw.png" alt="image-20221014095254197" style="zoom:50%;" />

<p>再一次发送PTU，我们看看什么情况</p>
<img src="https://i.imgur.com/4iMHpAz.png" alt="image-20221014095349646" style="zoom:50%;" />

<p>我们可以看到PTU它不在走switch0-switch1的通道，而是走下面switch0-switch2的通道</p>
<p><strong>所以我们可以知道STP的功能就是在具有环形通道时，选择其中一个通道进行传送PTU，其他通道则暂时屏蔽。</strong></p>
<p><a href="https://blog.csdn.net/Mr_Bei/article/details/83115958">关于如何选择通道的过程–csdn_blog</a></p>
<h3 id="广播风暴的演示"><a href="#广播风暴的演示" class="headerlink" title="广播风暴的演示"></a>广播风暴的演示</h3><ul>
<li>我们需要将所有的switch都关闭SPT协议</li>
</ul>
<blockquote>
<p>具体命令如下</p>
<p>Switch(config)#no spanning-tree vlan 1</p>
<p>什么是vlan 1，vlan 1就是虚拟局域网，我们将在下一个实验中讲到。</p>
</blockquote>
<img src="https://i.imgur.com/FGuRg6N.png" alt="image-20221104155844189" style="zoom: 50%;" />

<ul>
<li>关闭完所有的switch后，我们就会发现每条线之间都呈现绿色了。</li>
</ul>
<img src="https://i.imgur.com/eHcIVKa.png" alt="image-20221104155901023" style="zoom:50%;" />

<blockquote>
<p>如上图所示，整个连接形成了一个环路，如果此时发送广播帧将会发生广播风暴。</p>
<p>这将会无限制的占用资源，导致浪费。</p>
</blockquote>
<ul>
<li>尝试发送PTU</li>
</ul>
<p>创建一个广播帧进行发送</p>
<p>添加一个复杂的PTU(Add complex PDU)</p>
<img src="https://i.imgur.com/OJ1RFdv.png" alt="image-20221104160411078" style="zoom:50%;" />

<ul>
<li>如图所示，255.255.255.255就是广播帧。</li>
</ul>
<img src="https://i.imgur.com/z7tH36C.png" alt="image-20221104160610503" style="zoom:50%;" />

<blockquote>
<p>随着PTU的转发，switch之间可以达到无限的循环，导致资源的浪费。</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell learning 2</title>
    <url>/2022/12/01/CS/shell/Shell-learning-2/</url>
    <content><![CDATA[<p><a href="https://missing.csail.mit.edu/2020/shell-tools/">tutorial2</a></p>
<p><a href="https://www.youtube.com/watch?v=kgII-YWo3Zw&list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J&index=2&t=300s">tutorial vidio</a></p>
<h2 id=""><a href="#" class="headerlink" title="$"></a>$</h2><p>we can use the <code>$</code> to determin something</p>
<p>Such as</p>
<p><code>foo=bar</code></p>
<p><code>echo &quot;value is $foo&quot;</code></p>
<p>there would be print <code>value is bar</code> , <strong>warning!!</strong>: there only can use <code>&quot;&quot;</code> double quoting, dont use <code>&#39;&#39;</code> single quoting.</p>
<blockquote>
<ul>
<li><p>$0 <strong>script name</strong></p>
</li>
<li><p>$1 - $9 <strong>parameter in script</strong></p>
</li>
<li><p>$_ <strong>used the script last command in last argument</strong></p>
</li>
<li><p>$? <strong>Return code of the previous command</strong></p>
<blockquote>
<p>True is 0</p>
<p>False is 1</p>
</blockquote>
</li>
<li></li>
</ul>
</blockquote>
<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>vim is a programme’s text editor</p>
<p>if we are in the Vim command,there would be three mode we would have</p>
<ol>
<li>command mode 2. Insert mode 3. last line mode</li>
</ol>
<p>they would show what mode we use on the buttom.</p>
<p><code>esc</code> we can back to normal command line, so now we can wirte the command to quit and save file</p>
<p>Such as</p>
<p><code>:wq</code> is save file and quit</p>
<p>the detail of command we can <code>man vim </code> or <code>vim --help</code> or <code>:help</code> in the vim</p>
<p>but we usually not use it, we can use <code>code</code> to edit text, which is <em>VS code</em> software shell command.</p>
<p>such as </p>
<p><code>vim mcd.sh</code></p>
<p><code>code mcd.sh</code></p>
<p>those are same function.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// mcd.sh files</span><br><span class="line"></span><br><span class="line">mcd</span><br><span class="line">&#123;</span><br><span class="line">mkdir -p &quot;$1&quot; //$1 is script parameter, you can set $1 - $9, $0 is script name</span><br><span class="line">cd &quot;$1&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>this is a script</p>
<p>The function is to create a folder and enter the folder.</p>
<ul>
<li>how do we use the script</li>
</ul>
<p>such as</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source mcd.sh //enter the script</span><br><span class="line">mcd test	//use the function to creat the folder</span><br></pre></td></tr></table></figure>



<p><strong>I think use the vscode is easy to edit if we have.</strong></p>
<h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>Remove directory</p>
<p>such as</p>
<p><code>rmdir test</code> &#x2F;&#x2F;remove test folder</p>
<p><code>mkdir test</code> &#x2F;&#x2F;creat test folder</p>
<h2 id="-1"><a href="#-1" class="headerlink" title="!!"></a>!!</h2><p>!! is mean can return the last command before you used it.</p>
<p>such as </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir 111/222</span><br><span class="line">sudo !! </span><br><span class="line">sudo mkdir 111/222</span><br></pre></td></tr></table></figure>



<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>It is used to search text and strings in a given file.</p>
<p>such as </p>
<p><code>grep foobar mcd.sh</code> &#x2F;&#x2F; which means search foobar in the mcd.sh file.</p>
<p>If not found foobar in the file, then <code>echo $?</code>, it would return <code>1</code></p>
<h2 id="Excuse-some-example"><a href="#Excuse-some-example" class="headerlink" title="Excuse some example"></a>Excuse some example</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">echo $?</span><br><span class="line"></span><br><span class="line">false </span><br><span class="line">echo $?</span><br><span class="line"></span><br><span class="line">false || echo &quot;Oops fail&quot;  //First one is error,so jump to second command to excute it</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Oops fail</span></span><br><span class="line"></span><br><span class="line">ture || echo &quot;will be not be printed&quot; //First one is not error, so there would not jump to second one and print it.</span><br><span class="line"></span><br><span class="line">ture &amp;&amp; echo &quot;Things went well&quot; //First one is noterror, then keep going to print the echo.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Things went well</span></span><br><span class="line"></span><br><span class="line">false &amp;&amp; echo &quot;This will not print&quot; //which one is error ,then all not going.</span><br><span class="line"></span><br><span class="line">false ; echo &quot;This will always print&quot; //Whatever you change, it always would excute.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">This will always <span class="built_in">print</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>This command can change the file permission</p>
<p><code>rwx</code> r is read, w is wirte , x is excute .</p>
<p>such as if you want to add read permission to your file, you just need to type,</p>
<p><code>chmod +r myfilename.txt</code></p>
<p>or</p>
<p><code>chmod -r myfilename.txt</code></p>
<p><code>chmod [command].. filename </code> </p>
<h2 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h2><p>Creat shoutcut command, you can make a symbolic link for your files.</p>
<p><code>ln -s</code> is creat the shoutcut command,</p>
<p>such as <code>ln -s /application/myapp</code></p>
<h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>File command determine what type of data is within a file</p>
<p>Such as</p>
<p><code>file hellow.txt</code></p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco的软件和使用lab9</title>
    <url>/2022/11/07/Computer%20Network/Cisco%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8lab9/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h1><p>IP地址一共有三类</p>
<p>分别是：</p>
<ul>
<li>A class 1.0.0.0 – 126.0.0.0</li>
<li>B class 128.0.0.0 – 191.255.255.255</li>
<li>C class 192.0.0.0 – 223.255.255.255</li>
<li>D class </li>
<li>E class</li>
</ul>
<p><a href="https://blog.csdn.net/wangyiniya/article/details/114269140?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166782307016800186585047%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166782307016800186585047&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-114269140-null-null.142%5Ev63%5Epc_rank_34_queryrelevant25,201%5Ev3%5Econtrol_1,213%5Ev1%5Et3_control1&utm_term=%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E7%B1%BB%E5%9E%8B&spm=1018.2226.3001.4187">CSDN中文详解IP地址分类</a></p>
<p><a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/main/%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6/Computer%20network/14%20%20Introduction%20to%20IP%20v4%20%20Stud(1).pdf">IPv4.pdf</a></p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="1-通过理论我们可以得知，不同类型的网络之间不能直连，如C类网不能之间连接B类网"><a href="#1-通过理论我们可以得知，不同类型的网络之间不能直连，如C类网不能之间连接B类网" class="headerlink" title="1.通过理论我们可以得知，不同类型的网络之间不能直连，如C类网不能之间连接B类网"></a>1.<strong>通过理论我们可以得知，不同类型的网络之间不能直连，如C类网不能之间连接B类网</strong></h3><ul>
<li>验证</li>
</ul>
<blockquote>
<p>如图连接网络</p>
<img src="https://i.imgur.com/qKfUBPU.png" alt="image-20221107122008687" style="zoom:50%;" />

<p>相互ping</p>
<img src="https://i.imgur.com/QTBZWkl.png" alt="image-20221107122115460" style="zoom:50%;" />
</blockquote>
<h3 id="2-在不同类型的ip地址中如何互通"><a href="#2-在不同类型的ip地址中如何互通" class="headerlink" title="2.在不同类型的ip地址中如何互通"></a>2.<strong>在不同类型的ip地址中如何互通</strong></h3><blockquote>
<p>如图连接</p>
<img src="https://i.imgur.com/UpEuL9E.png" alt="image-20221107124325592" style="zoom:50%;" />

<ul>
<li><p>我们需要在路由器的端口中配置与pc0相同的ip地址</p>
<img src="https://i.imgur.com/tH5u0Xy.png" alt="image-20221107124503962" style="zoom:50%;" />
</li>
<li><p>然后在两个pc都配置默认网关(default gateway)</p>
</li>
</ul>
<p>Pc0:</p>
<img src="https://i.imgur.com/KUdxrq0.png" alt="image-20221107124846809" style="zoom:50%;" />

<p>PC1:</p>
<img src="https://i.imgur.com/mb4exbl.png" alt="image-20221107124921049" style="zoom:50%;" />

<img src="https://i.imgur.com/fMJCzJa.png" alt="image-20221107125105816" style="zoom:50%;" />
</blockquote>
<ul>
<li>验证</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/t96wbQ4.png" alt="image-20221107125302908" style="zoom:50%;" />

<ul>
<li>为什么会有一个timed out。</li>
</ul>
<blockquote>
<p>因为第一次要发ARP 类型的数据包（广播请求）</p>
</blockquote>
<ul>
<li>再ping一次</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/LHZAN97.png" alt="image-20221107125412790" style="zoom:50%;" />
</blockquote>
</blockquote>
<ul>
<li>默认网关(default gateway)的意思</li>
</ul>
<blockquote>
<p>如果找不到对方的ip地址，就需要一个将数据包发给指定的网关，也就是默认网关。</p>
<p>实验中我们使用router 来发送数据包，就需要填写连接router端的端口ip为默认网关。</p>
</blockquote>
<p>实验结束。</p>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>基础篇4 类的表达和文件引用</title>
    <url>/2022/07/10/unity/2022-7-10-%E7%B1%BB%E7%9A%84%E8%A1%A8%E8%BE%BE/</url>
    <content><![CDATA[<ul>
<li>什么是类 -&gt; <a href="https://gitee.com/chutianshu1981/xyz-s-free-course-for-full-stack-web-dev/blob/main/GameDesign/Unity/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%B3%BB%E5%88%97/%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B04_%E5%88%9B%E4%BD%9C%E8%80%85%E5%A5%97%E4%BB%B6_%E5%88%9D%E5%AD%A6%E8%80%85%E4%BB%A3%E7%A0%81/05-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1.md">相关文档</a></li>
<li>b站视频40 -41</li>
<li>如何使用</li>
</ul>
<blockquote>
<p>例子：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainPlayer</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public string myname = &quot;弼马温&quot;;</span></span><br><span class="line"><span class="comment">    public int HelthValue;</span></span><br><span class="line"><span class="comment">    public char grade = &#x27;B&#x27;;*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Cat cat;<span class="comment">//用自定义类Cat 来定义一个 cat</span></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建对象，并初始化对象在空间中，并赋值 </span></span><br><span class="line">        cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        cat.catname = <span class="string">&quot;猪猪&quot;</span>; <span class="comment">//cat.后面要带在类里定义的名 如，catname 和 age</span></span><br><span class="line">        cat.age = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//打印猫信息</span></span><br><span class="line">        cat.print(); <span class="comment">//想要输出自己在类自定义的输出，直接在用类定义的 cat.后 写 print() and perr()</span></span><br><span class="line">        cat.perr(); <span class="comment">//print 和perr 都是在类里定义的功能。</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>] <span class="comment">//这个英文的意思是“序列化”,可以使自定义类显示在unity上。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> catname;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">$&quot;这只小猫名叫:<span class="subst">&#123;catname&#125;</span>, 它今年<span class="subst">&#123;age&#125;</span>岁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//猫叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perr</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">$&quot;小猫<span class="subst">&#123;catname&#125;</span>不停的在叫。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>类的创建顺序<ol>
<li>先用 修饰符 class 类名(可自定义)</li>
<li>定义变量</li>
<li>你想要使用的功能，如上所写的print 和 perr；</li>
<li>然后在Monobehaviour的组件里输出要想输出的对象</li>
<li>在主组件用自己创建的类定义变量 ：public Cat cat;</li>
<li>在void star里对自己定义的 cat进行初始化 : cat &#x3D; new Cat();</li>
<li>cat.后加上自己想要定义的数值，以及想要输出的数值</li>
</ol>
</li>
<li>关于构造函数</li>
</ul>
<blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       List&lt;Cat&gt; cats = <span class="keyword">new</span> List&lt;Cat&gt;();</span><br><span class="line">       <span class="comment">//通过循环调用Cat的构造函数，创造出100只猫</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)</span><br><span class="line">       &#123;</span><br><span class="line">           cats.Add(<span class="keyword">new</span> Cat(<span class="string">$&quot;第<span class="subst">&#123;i&#125;</span>只猫&quot;</span>,i));<span class="comment">//每循环一次增加一只猫</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">foreach</span> (Cat cat <span class="keyword">in</span> cats) <span class="comment">//我们上面创造了组合cats，利用遍历（foreach）来取出100只猫放到cat中 进行输出。</span></span><br><span class="line">       &#123;</span><br><span class="line">           cat.print();</span><br><span class="line">           cat.perr();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;[Serializable]</span><br><span class="line">&gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> catname ;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">int</span> age ;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Cat</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>) <span class="comment">//构造方法</span></span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">this</span>.catname = name; <span class="comment">//等号=前面的this.catname的catname指的是上方定义的catname，而后面的name是形参的name</span></span><br><span class="line">       <span class="keyword">this</span>.age = age; <span class="comment">//this的用法是限定被参数隐藏的实例人员</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//打印</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       Debug.Log(<span class="string">$&quot;这只小猫名叫:<span class="subst">&#123;catname&#125;</span>, 它今年<span class="subst">&#123;age&#125;</span>岁了&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//猫叫</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">perr</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       Debug.Log(<span class="string">$&quot;小猫<span class="subst">&#123;catname&#125;</span>不停的在叫。。&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>关于构建第二个文件进行引入并输出在unity</li>
</ul>
<blockquote>
<p>Dog文件构造，在Assert&#x2F;MyScripts</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyScripts</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.name = name;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Wang</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">$&quot;狗狗<span class="subst">&#123;<span class="keyword">this</span>.name&#125;</span>正在叫。。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>引用dog文件的功能在unity上</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Drawing.Design;</span><br><span class="line"><span class="keyword">using</span> MyScripts;</span><br><span class="line"><span class="keyword">using</span> Unity.VisualScripting;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainPlayer</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        dog.Wang();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其关键在于引用文件，它会出现 </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> MyScripts;</span><br></pre></td></tr></table></figure>

<p>一般会出现在你定义public Dog dog；Dog下面会出现红色的线或者三个字母呈红色</p>
<blockquote>
<p>然后在mac中的操作上 option+enter</p>
</blockquote>
<blockquote>
<p>windows的操作上 ctrl+enter</p>
</blockquote>
<p>会快速帮你定位到Dog的位置且自动帮你打上 using MyScripts;</p>
</blockquote>
]]></content>
      <categories>
        <category>unity引擎学习博客</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>分析Keras使用方法</title>
    <url>/2022/12/06/CNN%20project/%E5%88%86%E6%9E%90Keras%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="分析基于Keras构建模型"><a href="#分析基于Keras构建模型" class="headerlink" title="分析基于Keras构建模型"></a>分析基于Keras构建模型</h1><p><a href="https://github.com/TannerGilbert/Google-Coral-Edge-TPU/blob/master/Tensorflow_Train_Fruits_Classification_model.ipynb">参考代码1-coral introduction from youtube</a></p>
<p><a href="https://www.youtube.com/watch?v=7cnGvsNwe5E&t=691s">youtube video</a></p>
<p><a href="https://keras.io/getting_started/">keras guides</a></p>
<p>在<a href="https://colab.research.google.com/drive/1lEaVa9ytsXUaDaUoPWkUydHJs5MCtEae">colab</a>环境搭建模型</p>
<h2 id="数据集的建立和下载"><a href="#数据集的建立和下载" class="headerlink" title="数据集的建立和下载"></a>数据集的建立和下载</h2><p><a href="https://www.kaggle.com/">kaggle</a> -里面有大量的数据集可提供免费下载</p>
<h3 id="安装required-library"><a href="#安装required-library" class="headerlink" title="安装required library"></a>安装required library</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>

<h3 id="安装API"><a href="#安装API" class="headerlink" title="安装API"></a>安装<a href="https://github.com/Kaggle/kaggle-api">API</a></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!pip install kaggle</span><br></pre></td></tr></table></figure>

<h3 id="使用Kaggle"><a href="#使用Kaggle" class="headerlink" title="使用Kaggle"></a>使用Kaggle</h3><p>在colab使用kaggle需要在官网下载一个<a href="https://www.kaggle.com/jessyvuang/account?isEditing=False&verifyPhone=False">key</a>, 点击Creat New API token，自动下载一个kaggle.json文件，然后导入colab。</p>
<p>使用的数据集是kaggle里的<a href="https://www.kaggle.com/datasets/moltean/fruits">fruit360</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在colab上连接google云盘,因为我的kaggle.json文件放到我的google云盘里了.</span></span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> drive</span><br><span class="line">drive.mount(<span class="string">&#x27;/content/drive&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#本地创建一个.kaggle文件夹</span></span><br><span class="line">! mkdir ~/.kaggle</span><br><span class="line"><span class="comment">#复制colab的kaggle.json文件到新创建的文件夹</span></span><br><span class="line">!cp /content/drive/MyDrive/kaggle/kaggle.json ~/.kaggle/kaggle.json</span><br><span class="line"><span class="comment">#现在可以下载数据集了,这个是水果数据集，可以在kaggle里copy api command</span></span><br><span class="line">!kaggle datasets download -d moltean/fruits</span><br><span class="line"><span class="comment">#解压数据集</span></span><br><span class="line">!unzip <span class="string">&#x27;/content/fruits.zip&#x27;</span></span><br><span class="line"><span class="comment">#映射对象并分配对象，将名字修改成username，密码为key</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;KAGGLE_USERNAME&#x27;</span>] = <span class="string">&quot;&lt;username&gt;&quot;</span> </span><br><span class="line">os.environ[<span class="string">&#x27;KAGGLE_KEY&#x27;</span>] = <span class="string">&quot;&lt;key&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用数据集"><a href="#使用数据集" class="headerlink" title="使用数据集"></a>使用数据集</h2><p>不能使用MobileNetV1&#x2F;2&#x2F;3来训练cifar100,因为分辨率不同.</p>
<p>使用keras的库来<a href="https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html">数据预处理</a> <a href="https://keras.io/api/preprocessing/image/">图片预处理</a></p>
<p>这个数据集有131个分类，也就是有131个标签，每个标签代表一个水果或蔬菜。</p>
<p>训练集有67692 images，测试集有22688 images。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#IMAGE_SIZE是100*100分辨率，因为下载的图片就是100*100的分辨率,当然也可以是其他分辨率图像，因为这是预处理。</span></span><br><span class="line"><span class="comment">#BATCH_SIZE是数据集的批次,生成64批。</span></span><br><span class="line">IMAGE_SIZE = <span class="number">96</span></span><br><span class="line">BATCH_SIZE = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rescale是一个值，在任何其他处理之前，我们将把数据乘以这个值。我们的原始图像由0-255的RGB系数组成，但这样的值对我们的模型来说太高了，无法处理（考虑到典型的学习率），所以我们的目标是用1/255的比例来代替0和1之间的值。</span></span><br><span class="line"><span class="comment">#validation_split用于随机缩放照片</span></span><br><span class="line">datagen = tf.keras.preprocessing.image.ImageDataGenerator(</span><br><span class="line">    rescale=<span class="number">1.</span>/<span class="number">255</span>, </span><br><span class="line">    validation_split=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment">#train_generator是训练生成器，调用flow_from_directory()来创建，它们直接从各自文件夹中的 jpg 生成批量图像数据（及其标签）。</span></span><br><span class="line"><span class="comment">#训练的数据不是直接用的jpg照片，而是压缩后的照片，所以我们需要数据生成器。</span></span><br><span class="line">train_generator = datagen.flow_from_directory(</span><br><span class="line">    <span class="string">&#x27;/content/fruits-360_dataset/fruits-360/Training&#x27;</span>,</span><br><span class="line">    target_size=(IMAGE_SIZE, IMAGE_SIZE),</span><br><span class="line">    batch_size=BATCH_SIZE)</span><br><span class="line"><span class="comment">#val_gennerator生成可以验证模型的数据集。</span></span><br><span class="line">val_generator = datagen.flow_from_directory(</span><br><span class="line">    <span class="string">&#x27;/content/fruits-360_dataset/fruits-360/Test&#x27;</span>,</span><br><span class="line">    target_size=(IMAGE_SIZE, IMAGE_SIZE),</span><br><span class="line">    batch_size=BATCH_SIZE)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在每次迭代中，这些生成器通过从磁盘上读取图像并将其处理为适当的张量大小（100 x 100）来提供一批图像。输出是一个（图像，标签）的元组。例如，你可以看到这里的shapes。</span></span><br><span class="line">image_batch, label_batch = <span class="built_in">next</span>(val_generator)</span><br><span class="line">image_batch.shape, label_batch.shape</span><br></pre></td></tr></table></figure>

<p>保存数据集里的label，并放在txt里，因为是yolo模型</p>
<p><a href="https://www.w3schools.com/python/ref_dictionary_keys.asp">.key</a> <a href="https://www.w3schools.com/python/ref_func_sorted.asp#gsc.tab=0&gsc.q=.key">sorted</a> <a href="https://www.w3schools.com/python/python_file_write.asp">open</a> </p>
<p><a href="https://keras.io/zh/preprocessing/image/">.class_indicaes</a>-它来自flow_from_directory,可直接引用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从train_generator中使用class_indices来提取label,class_indices是来自keras库的。</span></span><br><span class="line"><span class="built_in">print</span> (train_generator.class_indices)</span><br><span class="line"><span class="comment">#该join()方法获取一个可迭代对象中的所有项目并将它们连接成一个字符串,python函数.</span></span><br><span class="line"><span class="comment">#该sorted()函数返回指定可迭代对象的排序列表,python函数。</span></span><br><span class="line"><span class="comment">#train_generator.class_indices.keys,该keys()方法返回一个视图对象。视图对象包含字典的key，作为列表。</span></span><br><span class="line">labels = <span class="string">&#x27;\n&#x27;</span>.join(<span class="built_in">sorted</span>(train_generator.class_indices.keys()))</span><br><span class="line"></span><br><span class="line"><span class="comment">#创造新文件,使用open函数.</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;fruit_labels.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(labels)</span><br></pre></td></tr></table></figure>

<p>可以在terminal直接<code>wc -lc fruit_labels.txt</code>,能显示多少行字和字数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示文件内容，终端也能用。</span></span><br><span class="line">!cat fruit_labels.txt</span><br></pre></td></tr></table></figure>

<h2 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h2><p>现在我们将创建一个模型，能够在最后一个全连接层上进行迁移学习。</p>
<p>我们将从Keras的MobileNet V2开始作为基础模型，它已经用ImageNet数据集进行了预训练（训练后可识别1000个类别）。这为我们提供了一个非常好的图像分类特征提取器。</p>
<h3 id="创建底层-Base-model"><a href="#创建底层-Base-model" class="headerlink" title="创建底层(Base_model)"></a>创建底层(Base_model)</h3><p>在实例化MobileNetV2模型时，我们指定<code>include_top=False</code>参数，以便在加载网络时不把分类层放在顶部。然后我们设置<code>trainable false</code>来冻结基础模型中的所有权重。这就有效地将模型转换成了一个特征提取器，因为当我们开始训练分类头时，所有预训练的权重和偏置都保留在低层。</p>
<p><a href="https://keras.io/api/applications/mobilenet/">MobileNetV2</a></p>
<p><a href="https://keras.io/guides/transfer_learning/">Transfer Learning</a> -冻结底层</p>
<p>input_shape :可选的形状元组，只有在<code>include_top为False</code>时才被指定（否则输入形状必须是（224, 224, 3）（用channel_last数据格式）或（3, 224, 224）（用channel_first数据格式）。它应该正好有3个输入通道，并且宽度和高度不应小于32。例如，(200, 200, 3)将是一个有效值。默认为无。如果提供了input_tensor，input_shape将被忽略.<strong>但是官方还有别的规定，宽度和高度必须在96, 128, 160, 192, 224中任意选择其中一个，不能自定义。</strong></p>
<p><strong>MobileNetV3 only 224,224</strong></p>
<p>Weights: none（随机初始化），’imagenet’（在ImageNet上进行预训练），或要加载的权重文件的路径之一。默认为imagenet。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IMG_SHAPE = (IMAGE_SIZE, IMAGE_SIZE, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the base model from the pre-trained MobileNet V2</span></span><br><span class="line">base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,</span><br><span class="line">                                              include_top=<span class="literal">False</span>, </span><br><span class="line">                                              weights=<span class="string">&#x27;imagenet&#x27;</span>)</span><br><span class="line"><span class="comment">#Then, freeze the base model.冻结最底层</span></span><br><span class="line">base_model.trainable = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="添加分类头"><a href="#添加分类头" class="headerlink" title="添加分类头"></a>添加分类头</h3><p>Add a classification head</p>
<p><a href="https://keras.io/api/models/sequential/">tf.keras.Sequential class</a></p>
<p><a href="https://keras.io/api/layers/convolution_layers/convolution2d/">Conv2D</a> <a href="https://keras.io/api/layers/regularization_layers/dropout/">Dropout</a> <a href="https://keras.io/api/layers/pooling_layers/global_average_pooling2d/">GlobalAveragePooling2D</a> <a href="https://keras.io/api/layers/core_layers/dense/">Dense</a></p>
<p>现在我们创建一个新的序列模型，并将冻结的MobileNet模型作为图的基础，并附加新的分类层，这样我们就可以将最终的输出维度设置为与我们的数据集中的类别数量相匹配（131种水果和蔬菜）。</p>
<p><a href="https://poloclub.github.io/cnn-explainer/">在网站学习CNN</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = tf.keras.Sequential([</span><br><span class="line">  base_model,</span><br><span class="line">  tf.keras.layers.Conv2D(filters=<span class="number">32</span>, kernel_size=<span class="number">3</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  tf.keras.layers.Dropout(<span class="number">0.2</span>),</span><br><span class="line">  tf.keras.layers.GlobalAveragePooling2D(),</span><br><span class="line">  tf.keras.layers.Dense(units=<span class="built_in">len</span>(labels.split(<span class="string">&#x27;\n&#x27;</span>)), activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h3 id="Configure-the-model"><a href="#Configure-the-model" class="headerlink" title="Configure the model"></a>Configure the model</h3><p>Although this method is called <code>compile()</code>, it’s basically a configuration step that’s required before we can start training.</p>
<p>虽然这个方法被称为compile()，但它基本上是一个配置步骤，在我们开始训练之前需要进行配置。</p>
<p><a href="https://keras.io/api/models/model_training_apis/">model training API</a> <a href="https://keras.io/api/metrics/">metric 指标</a> <a href="https://keras.io/api/losses/">losses</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>, </span><br><span class="line">              loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, </span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>You can see a string summary of the final network with the <code>summary()</code> method:</p>
<p>你可以用summary()方法看到最终网络的字符串摘要:</p>
<p><a href="https://keras.io/api/models/model/#summary-method">the model class</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure>

<p>And because the majority of the model graph is frozen in the base model, weights from only the last convolution and dense layers are trainable:</p>
<p>由于大部分的模型图被冻结在基础模型中，只有最后的卷积层和密集层的权重是可训练的。</p>
<p><a href="https://keras.io/api/layers/base_layer/#trainableweights-property">The base Layer class</a> -the trainable_weights</p>
<p><a href="https://www.w3schools.com/python/ref_string_format.asp">format function in python</a> <a href="https://www.w3schools.com/python/ref_func_len.asp">len</a> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Number of trainable weights = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(model.trainable_weights)))</span><br></pre></td></tr></table></figure>

<h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><p>Now we can train the model using data provided by the <code>train_generator</code> and <code>val_generator</code> that we created at the beginning.</p>
<p>现在我们可以使用一开始创建的<code>train_generator</code>和<code>val_generator</code>所提供的数据来训练模型。</p>
<p><a href="https://keras.io/api/models/model_training_apis/">model training</a> <a href="https://www.w3schools.com/python/ref_func_len.asp">len</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">history = model.fit(train_generator,</span><br><span class="line">                    steps_per_epoch=<span class="built_in">len</span>(train_generator), </span><br><span class="line">                    epochs=<span class="number">10</span>,</span><br><span class="line">                    validation_data=val_generator,</span><br><span class="line">                    validation_steps=<span class="built_in">len</span>(val_generator))</span><br></pre></td></tr></table></figure>



<h2 id="查看学习曲线"><a href="#查看学习曲线" class="headerlink" title="查看学习曲线"></a>查看学习曲线</h2><p><a href="https://keras.io/api/models/model_training_apis/#fit-method">history.history can search in model</a> </p>
<p><a href="https://matplotlib.org/stable/api/figure_api.html">matplotlib.figure</a> <a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplot.html#matplotlib.pyplot.subplot">matplotlib.subplot</a> … which all can reaserch in<a href="https://matplotlib.org/stable/api/index.html">matplotlib reference</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#acc为精准度accuracy.</span></span><br><span class="line">acc = history.history[<span class="string">&#x27;accuracy&#x27;</span>]</span><br><span class="line"><span class="comment">#验证集的精准度.</span></span><br><span class="line">val_acc = history.history[<span class="string">&#x27;val_accuracy&#x27;</span>]</span><br><span class="line"><span class="comment">#损失</span></span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line"><span class="comment">#验证集损失</span></span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.plot(val_acc, label=<span class="string">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;lower right&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Accuracy&#x27;</span>)</span><br><span class="line">plt.ylim([<span class="built_in">min</span>(plt.ylim()),<span class="number">1</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Accuracy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(val_loss, label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Cross Entropy&#x27;</span>)</span><br><span class="line">plt.ylim([<span class="number">0</span>,<span class="number">1.0</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;epoch&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<h2 id="微调模型"><a href="#微调模型" class="headerlink" title="微调模型"></a>微调模型</h2><p>So far, we’ve only trained the classification layers—the weights of the pre-trained network were not changed.</p>
<p>到目前为止，我们只训练了分类层–预训练网络的权重没有改变。</p>
<p>One way we can increase the accuracy is to train (or “fine-tune”) more layers from the pre-trained model. That is, we’ll un-freeze some layers from the base model and adjust those weights (which were originally trained with 1,000 ImageNet classes) so they’re better tuned for features found in our fruits dataset.</p>
<p>我们可以提高准确率的一个方法是训练（或 “微调”）更多预训练模型的层。也就是说，我们将从基础模型中解冻一些层，并调整这些权重（这些权重最初是用1000个ImageNet类来训练的），以便它们能更好地适应我们的水果数据集中的特征。</p>
<h3 id="解冻更多的层"><a href="#解冻更多的层" class="headerlink" title="解冻更多的层"></a>解冻更多的层</h3><p>So instead of freezing the entire base model, we’ll freeze individual layers.</p>
<p>因此，我们不是冻结整个基础模型，而是冻结个别图层.</p>
<p>First, let’s see how many layers are in the base model:</p>
<p>首先，让我们看看基本模型中有多少层。</p>
<p><a href="https://keras.io/api/layers/">keras layer api</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Number of layers in the base model: &quot;</span>, <span class="built_in">len</span>(base_model.layers))</span><br></pre></td></tr></table></figure>

<p>Let’s try freezing just the bottom 100 layers.</p>
<p>让我们试着只冻结底部的100层。</p>
<p><a href="https://keras.io/guides/transfer_learning/">trainable api</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base_model.trainable = <span class="literal">True</span></span><br><span class="line">fine_tune_at = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Freeze all the layers before the `fine_tune_at` layer</span></span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> base_model.layers[:fine_tune_at]:</span><br><span class="line">  layer.trainable =  <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="Compile-model"><a href="#Compile-model" class="headerlink" title="Compile model"></a>Compile model</h3><p>Now configure the model again, but this time with a lower learning rate (the default is 0.001).</p>
<p>现在再次配置该模型，但这次使用较低的学习率（默认为0.001）。</p>
<p><a href="https://keras.io/api/models/model_training_apis/">model training API</a> <a href="https://keras.io/api/metrics/">metric 指标</a> <a href="https://keras.io/api/losses/">losses</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=tf.keras.optimizers.Adam(<span class="number">1e-5</span>),</span><br><span class="line">              loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>,</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Number of trainable weights = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(model.trainable_weights)))</span><br></pre></td></tr></table></figure>

<h3 id="继续训练"><a href="#继续训练" class="headerlink" title="继续训练"></a>继续训练</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">history_fine = model.fit(train_generator,</span><br><span class="line">                         steps_per_epoch=<span class="built_in">len</span>(train_generator), </span><br><span class="line">                         epochs=<span class="number">5</span>,</span><br><span class="line">                         validation_data=val_generator,</span><br><span class="line">                         validation_steps=<span class="built_in">len</span>(val_generator))</span><br></pre></td></tr></table></figure>

<h3 id="查看学习曲线-1"><a href="#查看学习曲线-1" class="headerlink" title="查看学习曲线"></a>查看学习曲线</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">acc = history_fine.history[<span class="string">&#x27;accuracy&#x27;</span>]</span><br><span class="line">val_acc = history_fine.history[<span class="string">&#x27;val_accuracy&#x27;</span>]</span><br><span class="line"></span><br><span class="line">loss = history_fine.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history_fine.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.plot(val_acc, label=<span class="string">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;lower right&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Accuracy&#x27;</span>)</span><br><span class="line">plt.ylim([<span class="built_in">min</span>(plt.ylim()),<span class="number">1</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Accuracy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(val_loss, label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Cross Entropy&#x27;</span>)</span><br><span class="line">plt.ylim([<span class="number">0</span>,<span class="number">1.0</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;epoch&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>



<h2 id="转化TFLite模型"><a href="#转化TFLite模型" class="headerlink" title="转化TFLite模型"></a>转化TFLite模型</h2><p>Ordinarily, creating a TensorFlow Lite model is just a few lines of code with TFLiteConverter. For example, this creates a basic (un-quantized) TensorFlow Lite model:</p>
<p>通常情况下，创建一个TensorFlow Lite模型只需要用TFLiteConverter写几行代码。例如，这将创建一个基本的（未量化的）TensorFlow Lite模型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">converter = tf.lite.TFLiteConverter.from_keras_model(model)</span><br><span class="line">tflite_model = converter.convert()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mobilenet_v2_1.0_224.tflite&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(tflite_model)</span><br></pre></td></tr></table></figure>

<p>However, this .tflite file still uses floating-point values for the parameter data, and we need to fully quantize the model to int8 format.</p>
<p>然而，这个.tflite文件仍然使用浮点值作为参数数据，我们需要将模型完全量化为int8格式。</p>
<p>To fully quantize the model, we need to perform post-training quantization with a representative dataset, which requires a few more arguments for the TFLiteConverter, and a function that builds a dataset that’s representative of the training dataset.</p>
<p>为了完全量化模型，我们需要用一个有代表性的数据集进行训练后量化，这需要为TFLiteConverter增加一些参数，以及建立一个能代表训练数据集的数据集的函数。</p>
<p>So let’s convert the model again with post-training quantization:</p>
<p>因此，让我们再次用训练后量化来转换模型。</p>
<p><a href="https://www.w3schools.com/python/python_functions.asp">def</a> 创造函数</p>
<p><a href="https://www.tensorflow.org/guide/data?hl=zh-cn">tf.data api</a>  <a href="https://www.programiz.com/python-programming/methods/built-in/next">next</a> <a href="https://www.programiz.com/python-programming/methods/built-in/iter">iter</a> <a href="https://www.tensorflow.org/api_docs/python/tf/io">tf.io api</a> <a href="https://www.tensorflow.org/api_docs/python/tf/image/resize">tf.image.resize</a> </p>
<p><a href="https://www.tensorflow.org/api_docs/python/tf/cast">tf.case</a> -里面饱和了各种可转化的数据类型(dtype)</p>
<p><a href="https://www.tensorflow.org/api_docs/python/tf/expand_dims">tf.expand_dims</a> -会解释为什么是axis&#x3D;0</p>
<p><a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do">yield 的解释</a> -大概就是生成器通过yield输出一次，如果有循环则返回生成器继续输出，它没有记忆，算完一次忘一次。</p>
<p><a href="https://www.tensorflow.org/lite/models/convert/convert_models">tf.lite.TFLiteConverter api</a> </p>
<p><a href="https://www.tensorflow.org/lite/performance/post_training_quantization">tf.lite.optimize</a> -从转化到量化到过程都有，完全照搬的直接搜int8</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A generator that provides a representative dataset</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">representative_data_gen</span>():</span><br><span class="line">  dataset_list = tf.data.Dataset.list_files(<span class="string">&#x27;/content/fruits-360_dataset/fruits-360/*/*.jpg&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    image = <span class="built_in">next</span>(<span class="built_in">iter</span>(dataset_list))</span><br><span class="line">    image = tf.io.read_file(image)</span><br><span class="line">    image = tf.io.decode_jpeg(image, channels=<span class="number">3</span>)</span><br><span class="line">    image = tf.image.resize(image, [IMAGE_SIZE, IMAGE_SIZE])</span><br><span class="line">    image = tf.cast(image / <span class="number">255.</span>, tf.float32)</span><br><span class="line">    image = tf.expand_dims(image, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">yield</span> [image]</span><br><span class="line"></span><br><span class="line">converter = tf.lite.TFLiteConverter.from_keras_model(model)</span><br><span class="line"><span class="comment"># This enables quantization</span></span><br><span class="line">converter.optimizations = [tf.lite.Optimize.DEFAULT]</span><br><span class="line"><span class="comment"># This sets the representative dataset for quantization</span></span><br><span class="line">converter.representative_dataset = representative_data_gen</span><br><span class="line"><span class="comment"># This ensures that if any ops can&#x27;t be quantized, the converter throws an error</span></span><br><span class="line">converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]</span><br><span class="line"><span class="comment"># For full integer quantization, though supported types defaults to int8 only, we explicitly declare it for clarity.</span></span><br><span class="line">converter.target_spec.supported_types = [tf.int8]</span><br><span class="line"><span class="comment"># These set the input and output tensors to uint8 (added in r2.3)</span></span><br><span class="line">converter.inference_input_type = tf.uint8</span><br><span class="line">converter.inference_output_type = tf.uint8</span><br><span class="line">tflite_model = converter.convert()</span><br><span class="line"><span class="comment">#保存模型</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mobilenet_v2_1.0_224_quant.tflite&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(tflite_model)</span><br></pre></td></tr></table></figure>

<h2 id="比较精准度"><a href="#比较精准度" class="headerlink" title="比较精准度"></a>比较精准度</h2><p>So now we have a fully quantized TensorFlow Lite model. To be sure the conversion went well, let’s evaluate both the raw model and the TensorFlow Lite model.</p>
<p>所以现在我们有一个完全量化的TensorFlow Lite模型。为了确保转换顺利，让我们同时评估原始模型和TensorFlow Lite模型。</p>
<p>First check the accuracy of the raw model:</p>
<p>首先检查原始模型的准确性。</p>
<p><a href="https://numpy.org/doc/stable/reference/index.html">numpy api</a></p>
<p><a href="https://keras.io/api/metrics/">metric</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batch_images, batch_labels = <span class="built_in">next</span>(val_generator)</span><br><span class="line"></span><br><span class="line">logits = model(batch_images)</span><br><span class="line">prediction = np.argmax(logits, axis=<span class="number">1</span>)</span><br><span class="line">truth = np.argmax(batch_labels, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">keras_accuracy = tf.keras.metrics.Accuracy()</span><br><span class="line">keras_accuracy(prediction, truth)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Raw model accuracy: &#123;:.3%&#125;&quot;</span>.<span class="built_in">format</span>(keras_accuracy.result()))</span><br></pre></td></tr></table></figure>

<p>Now let’s check the accuracy of the .tflite file, using the same dataset.</p>
<p>现在让我们检查一下.tflite文件的准确性，使用相同的数据集。</p>
<p>However, there’s no convenient API to evaluate the accuracy of a TensorFlow Lite model, so this code runs several inferences and compares the predictions against ground truth:</p>
<p>然而，没有方便的API来评估TensorFlow Lite模型的准确性，所以这段代码运行了几个推断，并将预测与地面实况进行比较。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_input_tensor</span>(<span class="params">interpreter, <span class="built_in">input</span></span>):</span><br><span class="line">  input_details = interpreter.get_input_details()[<span class="number">0</span>]</span><br><span class="line">  tensor_index = input_details[<span class="string">&#x27;index&#x27;</span>]</span><br><span class="line">  input_tensor = interpreter.tensor(tensor_index)()[<span class="number">0</span>]</span><br><span class="line">  <span class="comment"># Inputs for the TFLite model must be uint8, so we quantize our input data.</span></span><br><span class="line">  <span class="comment"># <span class="doctag">NOTE:</span> This step is necessary only because we&#x27;re receiving input data from</span></span><br><span class="line">  <span class="comment"># ImageDataGenerator, which rescaled all image data to float [0,1]. When using</span></span><br><span class="line">  <span class="comment"># bitmap inputs, they&#x27;re already uint8 [0,255] so this can be replaced with:</span></span><br><span class="line">  <span class="comment">#   input_tensor[:, :] = input</span></span><br><span class="line">  scale, zero_point = input_details[<span class="string">&#x27;quantization&#x27;</span>]</span><br><span class="line">  input_tensor[:, :] = np.uint8(<span class="built_in">input</span> / scale + zero_point)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">classify_image</span>(<span class="params">interpreter, <span class="built_in">input</span></span>):</span><br><span class="line">  set_input_tensor(interpreter, <span class="built_in">input</span>)</span><br><span class="line">  interpreter.invoke()</span><br><span class="line">  output_details = interpreter.get_output_details()[<span class="number">0</span>]</span><br><span class="line">  output = interpreter.get_tensor(output_details[<span class="string">&#x27;index&#x27;</span>])</span><br><span class="line">  <span class="comment"># Outputs from the TFLite model are uint8, so we dequantize the results:</span></span><br><span class="line">  scale, zero_point = output_details[<span class="string">&#x27;quantization&#x27;</span>]</span><br><span class="line">  output = scale * (output - zero_point)</span><br><span class="line">  top_1 = np.argmax(output)</span><br><span class="line">  <span class="keyword">return</span> top_1</span><br><span class="line"></span><br><span class="line">interpreter = tf.lite.Interpreter(<span class="string">&#x27;mobilenet_v2_1.0_224_quant.tflite&#x27;</span>)</span><br><span class="line">interpreter.allocate_tensors()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Collect all inference predictions in a list</span></span><br><span class="line">batch_prediction = []</span><br><span class="line">batch_truth = np.argmax(batch_labels, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(batch_images)):</span><br><span class="line">  prediction = classify_image(interpreter, batch_images[i])</span><br><span class="line">  batch_prediction.append(prediction)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compare all predictions to the ground truth</span></span><br><span class="line">tflite_accuracy = tf.keras.metrics.Accuracy()</span><br><span class="line">tflite_accuracy(batch_prediction, batch_truth)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Quant TF Lite accuracy: &#123;:.3%&#125;&quot;</span>.<span class="built_in">format</span>(tflite_accuracy.result()))</span><br></pre></td></tr></table></figure>

<p>You might see some, but hopefully not very much accuracy drop between the raw model and the TensorFlow Lite model. But again, these results are not suitable for production deployment.</p>
<p>你可能会看到一些，但希望在原始模型和TensorFlow Lite模型之间不会有很大的精度下降。但同样，这些结果并不适合用于生产部署。</p>
<h2 id="Compile-for-the-Edge-TPU"><a href="#Compile-for-the-Edge-TPU" class="headerlink" title="Compile for the Edge TPU"></a>Compile for the Edge TPU</h2><p>Finally, we’re ready to compile the model for the Edge TPU.</p>
<p>最后，我们准备为Edge TPU编译模型。</p>
<p>First download the <a href="https://coral.ai/docs/edgetpu/compiler/">Edge TPU Compiler</a>:</p>
<p>首先下载<a href="https://coral.ai/docs/edgetpu/compiler/">Edge TPU Compiler</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">! curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">! echo <span class="string">&quot;deb https://packages.cloud.google.com/apt coral-edgetpu-stable main&quot;</span> | sudo tee /etc/apt/sources.<span class="built_in">list</span>.d/coral-edgetpu.<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">! sudo apt-get update</span><br><span class="line"></span><br><span class="line">! sudo apt-get install edgetpu-compiler	</span><br></pre></td></tr></table></figure>

<p>Then compile the model:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">! edgetpu_compiler mobilenet_v2_1<span class="number">.0_224</span>_quant.tflite</span><br></pre></td></tr></table></figure>

<p>That’s it.</p>
<p>The compiled model uses the same filename but with “_edgetpu” appended at the end.</p>
<h2 id="Download-the-model"><a href="#Download-the-model" class="headerlink" title="Download the model"></a>Download the model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> files</span><br><span class="line"></span><br><span class="line">files.download(<span class="string">&#x27;mobilenet_v2_1.0_224_quant_edgetpu.tflite&#x27;</span>)</span><br><span class="line">files.download(<span class="string">&#x27;fruit_labels.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Run-the-model-on-the-Edge-TPU"><a href="#Run-the-model-on-the-Edge-TPU" class="headerlink" title="Run the model on the Edge TPU"></a>Run the model on the Edge TPU</h2><p>You can now run the model on your Coral device with acceleration on the Edge TPU.</p>
<p>To get started, try using your <code>.tflite</code> model with <a href="https://github.com/google-coral/tflite/tree/master/python/examples/classification">this code for image classification with the TensorFlow Lite API</a>.</p>
<p>Just follow the instructions on that page to set up your device, copy the <code>mobilenet_v2_1.0_224_quant_edgetpu.tflite</code> and <code>flower_labels.txt</code> files to your Coral Dev Board or device with a Coral Accelerator, and pass it a flower photo like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 classify_image.py \</span><br><span class="line">  --model mobilenet_v2_1.0_224_quant_edgetpu.tflite \</span><br><span class="line">  --labels flower_labels.txt \</span><br><span class="line">  --input flower.jpg</span><br></pre></td></tr></table></figure>

<p>Check out more examples for running inference at <a href="https://coral.ai/examples/#code-examples/">coral.ai&#x2F;examples</a>.</p>
]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>IPv6 summary</title>
    <url>/2022/12/07/Computer%20Network/IPv6-summary/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>same function with IPv4 but stucture is different.</p>
<ul>
<li><p><strong>why IPv6</strong></p>
<ul>
<li><p>IPv4 address exhaustion</p>
<blockquote>
<p>IPv4耗尽</p>
</blockquote>
</li>
<li><p>IPv6 <strong>Much larger address space</strong></p>
<blockquote>
<p>更大的地址空间</p>
</blockquote>
</li>
<li><p>Multicast</p>
<blockquote>
<p>多播</p>
</blockquote>
</li>
<li><p>Jumbograms</p>
</li>
<li><p>Faster routing.</p>
<blockquote>
<p>更快的路径</p>
</blockquote>
</li>
<li><p>Network Layer Security</p>
<blockquote>
<p>更安全的网络层</p>
</blockquote>
</li>
<li><p>Mobility.</p>
<blockquote>
<p>流动性，移动</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>IPv6 security</strong></p>
<ul>
<li><p>Security features are standardised and mandated, i.e. all implementation must offer them.</p>
<blockquote>
<p>安全功能是标准化的，也是强制性的，即所有的设施必须提供这些功能。</p>
</blockquote>
</li>
<li><p>Extension of RFC-2401 Security Architecture for the Internet Protocol (IPSec)</p>
<blockquote>
<p>RFC-2401互联网协议安全架构（IPSec）的扩展</p>
</blockquote>
</li>
<li><p>Authentication and Encryption.</p>
<blockquote>
<p>认证和加密。</p>
</blockquote>
</li>
<li><p>Invisible to applications as it operates within the IP layer.</p>
<blockquote>
<p>由于它在IP层内运行，对应用程序来说是不可见的。</p>
</blockquote>
</li>
<li><p>It protects all upper layer protocols.</p>
<blockquote>
<p>它保护所有上层协议。</p>
</blockquote>
</li>
<li><p>It protects both end-to-end and router-to-router communication (secure gateway).</p>
<blockquote>
<p>它既能保护端到端的通信，又能保护路由器到路由器的通信（安全网关）。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>IPv6 address scope</p>
<blockquote>
<p>IPv6地址范围</p>
</blockquote>
<ul>
<li><p>Unicast addressing</p>
<ul>
<li>Link-local Addresses (LLA)</li>
<li>loopback address</li>
</ul>
<blockquote>
<p>Link-local Addresses (LLA) and the loopback address have link-local scope, which means they are to be used in the directly attached network (link) only.</p>
<p>链接本地地址（LLA）和回环地址具有链接本地范围，这意味着它们只能在直接连接的网络（链接）中使用。</p>
</blockquote>
</li>
<li><p>other addresses</p>
<ul>
<li>Global Unicast Addresses (GUA)</li>
</ul>
<blockquote>
<p>including Global Unicast Addresses (GUA), have global (or universal) scope, which means they are globally routable.</p>
<p>包括全局单播地址（GUA），具有全局（或通用）范围，这意味着它们是全球可路由的。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>mobile IPv6</p>
<ul>
<li><p>IPv6 was designed to support mobility.</p>
<blockquote>
<p>IPv6是被设计成支持移动的</p>
</blockquote>
</li>
<li><p>IPv6 ND and SLAAC allow hosts to operate in any locations without any special support.</p>
<blockquote>
<p>IPv6 ND(neighbor) 和 SLAAC(Stateless Address Auto-configuration) 允许主机在任何地方运行，不需要任何特殊支持。</p>
</blockquote>
</li>
<li><p>It is more scalable and the performance is better because less traffic passes through the home link and less redirection and less rerouting.</p>
<blockquote>
<p>它的可扩展性更强，性能也更好，因为通过主链路的流量更少，重定向和重路由更少。</p>
</blockquote>
</li>
<li><p>No single point of failure.</p>
<blockquote>
<p>没有单点故障。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>IANA</strong>(Internet Assigned Numbers Authority) responsible for the entire IPv6 address space and they assign certain prefixes to the RIRs (Regional Internet Registry). </p>
<blockquote>
<p>IANA(互联网号码分配局)机构负责整个IPv6地址空间并且他们分配了前缀给<strong>RIRs</strong>（区域互联网注册机构）</p>
</blockquote>
<ul>
<li>RIRs<ul>
<li>ARIN 北美 </li>
<li>LACNIC 南美</li>
<li>RIPE 欧洲和亚洲北部</li>
<li>APNIC 亚洲</li>
<li>AFRINIC 非洲</li>
</ul>
</li>
</ul>
</li>
<li><p>RIPE issued the block <strong>2001:4000::&#x2F;23</strong> by IANA</p>
<blockquote>
<p>IANA: 2000::&#x2F;3</p>
<p>RIPE 通过 IANA发布了区块 2001:4000::&#x2F;23 欧洲和亚洲北部</p>
<ul>
<li><p>ISP(Internet service provider) 2001:41f0::&#x2F;32</p>
<blockquote>
<p>ISP互联网服务供应商</p>
</blockquote>
<ul>
<li>Customer :2001:41f0:4060::&#x2F;48</li>
</ul>
</li>
</ul>
<p>ARIN北美 2001:0400::&#x2F;23</p>
</blockquote>
</li>
<li><p>only global routing-prefix or site-prefix is &#x2F;48, otherwise interface ID all would be &#x2F;64</p>
<blockquote>
<p>只要全局路由前缀和站点前缀是&#x2F;48，其他的接口ID都是&#x2F;64</p>
</blockquote>
</li>
<li><p>We can use 16bits to create subnet</p>
<blockquote>
<p>剩下16位可以创建子网</p>
<img src="https://i.imgur.com/PyMWPon.png" alt="image-20221207170502205" style="zoom:50%;" /></blockquote>
</li>
</ul>
<h2 id="Ip-address-planning"><a href="#Ip-address-planning" class="headerlink" title="Ip address planning"></a>Ip address planning</h2><h3 id="1-IPv4-and-IPv6-overall"><a href="#1-IPv4-and-IPv6-overall" class="headerlink" title="1. IPv4 and IPv6 overall"></a>1. IPv4 and IPv6 overall</h3><p><img src="https://i.imgur.com/dfrd6GK.png" alt="image-20221207175318074"></p>
<img src="https://i.imgur.com/9LHyHxr.png" alt="image-20221207175800161" style="zoom:50%;" />

<ul>
<li>如上图所示，IPv6需要一次性完成4bits的分配，而且直接使用该范围内分配，不需要利用出事分配规模来计算</li>
</ul>
<p><strong>如下图所示</strong></p>
<p><img src="https://i.imgur.com/HmS2DlO.png" alt="image-20221207180135757"></p>
<img src="https://i.imgur.com/tCPas0n.png" alt="image-20221207180155695" style="zoom:50%;" />

<h3 id="2-Questions"><a href="#2-Questions" class="headerlink" title="2. Questions"></a>2. Questions</h3><img src="https://i.imgur.com/58o7VqU.png" alt="image-20221207180512110" style="zoom:50%;" />

<img src="https://i.imgur.com/9PE4wdH.png" alt="image-20221207180537539" style="zoom:50%;" />



<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><h3 id="1-Address"><a href="#1-Address" class="headerlink" title="1. Address"></a>1. Address</h3><ul>
<li><p><strong>Address format</strong> </p>
<blockquote>
<img src="https://i.imgur.com/7zkCKvj.png" alt="image-20221207183734639" style="zoom:50%;" />

<ul>
<li><p>Contiguous groups of ‘0‘ can be replaced with ‘::’</p>
</li>
<li><p>Only one double colon used in an address.</p>
</li>
</ul>
<img src="https://i.imgur.com/baF1lsg.png" alt="image-20221207183820075" style="zoom:50%;" />
</blockquote>
<ul>
<li>prefix</li>
</ul>
<blockquote>
<p>前缀</p>
</blockquote>
<ul>
<li>Interface</li>
<li>Character must be represented in lowercase.</li>
</ul>
<blockquote>
<p>必须用小写a-f.</p>
</blockquote>
</li>
<li><p>Anycast type</p>
<ul>
<li>Unicast </li>
<li>multicast</li>
<li>anycast</li>
</ul>
<blockquote>
<p>IPv4 Broadcast concept disappears –Replaced by All hosts multicast.</p>
<p>IPv4广播概念消失 -被所有主机多播取代。</p>
</blockquote>
</li>
<li><p>IPv6 Network Notation</p>
<blockquote>
<p>网络标记</p>
</blockquote>
<ul>
<li><img src="https://i.imgur.com/x0laFlN.png" alt="image-20221207185133437" style="zoom:50%;" /></li>
</ul>
</li>
<li><p>Special address</p>
<ul>
<li><p>Unspecial address</p>
<blockquote>
<p>::</p>
</blockquote>
</li>
<li><p>Default route address</p>
<blockquote>
<img src="https://i.imgur.com/b6I1wvX.png" alt="image-20221207185340439" style="zoom:50%;" />
</blockquote>
</li>
<li><p>Loopback</p>
<blockquote>
<img src="https://i.imgur.com/5NIJjaW.png" alt="image-20221207185406820" style="zoom:50%;" />
</blockquote>
</li>
<li><p>Link-local IPv6 Address (LLA)</p>
<blockquote>
<img src="https://i.imgur.com/W1szVaG.png" alt="image-20221207185431202" style="zoom:50%;" />

<ul>
<li><strong>LLA prefix must be fe80</strong>::</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="2-IPv4-vs-IPv6-fields"><a href="#2-IPv4-vs-IPv6-fields" class="headerlink" title="2. IPv4 vs IPv6 fields"></a>2. IPv4 vs IPv6 fields</h3><img src="https://i.imgur.com/L5X9w6W.png" alt="image-20221207185708000" style="zoom:50%;" />

<ul>
<li><strong>Similar and evolving fields</strong></li>
</ul>
<img src="https://i.imgur.com/TjySRw4.png" alt="image-20221207185845245" style="zoom:50%;" />

<ul>
<li><strong>remove fields</strong></li>
</ul>
<img src="https://i.imgur.com/5B8oHTN.png" alt="image-20221207185811509" style="zoom:50%;" />

<h3 id="3-IPv4-vs-IPv6-header"><a href="#3-IPv4-vs-IPv6-header" class="headerlink" title="3. IPv4 vs IPv6 header"></a>3. IPv4 vs IPv6 header</h3><img src="https://i.imgur.com/VoS2JZP.png" alt="image-20221207191953074" style="zoom:50%;" />

<ul>
<li><p>IPv6 extension headers</p>
<ul>
<li><p>Hop by Hop options header.</p>
</li>
<li><p>Destination options header.</p>
</li>
<li><p>Routing header.</p>
</li>
<li><p>Fragment header.</p>
</li>
<li><p>Authentication header (AH).</p>
</li>
<li><p>Encapsulation security payload (ESP) header.</p>
<blockquote>
<p>封装安全有效载荷（ESP）头。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="4-Prefix-Terminology"><a href="#4-Prefix-Terminology" class="headerlink" title="4. Prefix Terminology"></a>4. <strong>Prefix Terminology</strong></h3><ul>
<li>Prefix terms</li>
</ul>
<img src="https://i.imgur.com/6OcreEv.png" alt="image-20221207192219414" style="zoom:50%;" />

<ul>
<li>IPv6 Relative Network Sizes</li>
</ul>
<img src="https://i.imgur.com/SRUuoN0.png" alt="image-20221207192243621" style="zoom:50%;" />

<ul>
<li><p><strong>Prefix assignments</strong></p>
<ul>
<li>Provider Aggregatable (PA) Assignments</li>
</ul>
<blockquote>
<p>集体提供者（PA）的分配</p>
</blockquote>
<blockquote>
<ul>
<li><p>From LIR(Local internet registry) allocation (minimum &#x2F;32) </p>
</li>
<li><p>Register by LIR in RIR(Regional Internet Registry) IRRDB(Internet router registry data base).</p>
</li>
</ul>
</blockquote>
<ul>
<li>Provider Independent (PI) Assignments</li>
</ul>
<blockquote>
<p>独立提供者（PI）的任务</p>
</blockquote>
<blockquote>
<ul>
<li>Minimum size is &#x2F;48</li>
<li>Cannot be sub-assigned.</li>
</ul>
</blockquote>
<ul>
<li>Exercise:</li>
</ul>
</li>
</ul>
<img src="https://i.imgur.com/ayKnRgF.png" alt="image-20221207193719288" style="zoom:50%;" />

<h3 id="5-Link-Local-Address-LLA"><a href="#5-Link-Local-Address-LLA" class="headerlink" title="5. Link Local Address(LLA)"></a>5. Link Local Address(LLA)</h3><img src="https://i.imgur.com/CzYK4Bs.png" alt="image-20221207194009495" style="zoom:50%;" />

<ul>
<li><p>EUI-48 :34ed:8432:5476</p>
</li>
<li><p>EUI-64: 36ed:84ff:fe32:5476</p>
</li>
<li><p>LLA IPv6 Host ID: fe80::36ed:84ff:fe32:5476</p>
</li>
</ul>
<p><strong>Example</strong></p>
<ul>
<li>EUI-48 to EUI-64</li>
</ul>
<p><img src="https://i.imgur.com/zHFd7sY.png" alt="image-20221207194234087"></p>
<h3 id="6-Multicast"><a href="#6-Multicast" class="headerlink" title="6. Multicast"></a>6. Multicast</h3><h4 id="1-Scope-and-ground"><a href="#1-Scope-and-ground" class="headerlink" title="1. Scope and ground"></a>1. Scope and ground</h4><ul>
<li>IPv6 multicast flags</li>
</ul>
<img src="https://i.imgur.com/wPWujAV.png" alt="image-20221207195258769" style="zoom:50%;" />

<img src="https://i.imgur.com/hCNzzdf.png" alt="image-20221207195327245" style="zoom:50%;" />

<ul>
<li>IPv6 multicast Scope</li>
</ul>
<img src="https://i.imgur.com/VjeGsHp.png" alt="image-20221207195424182" style="zoom:50%;" />

<img src="https://i.imgur.com/80iGbCw.png" alt="image-20221207195440924" style="zoom:50%;" />

<img src="https://i.imgur.com/EjSXtDe.png" alt="image-20221207195516064" style="zoom:50%;" />

<img src="https://i.imgur.com/Vhep9oJ.png" alt="image-20221207195533174" style="zoom:50%;" />

<img src="https://i.imgur.com/6UyGtZ0.png" alt="image-20221207195546597" style="zoom:50%;" />

<blockquote>
<p>Ff02:: is link local address prefix, which is importance.</p>
</blockquote>
<ul>
<li>Multicast Group ID</li>
</ul>
<img src="https://i.imgur.com/M5k5xgA.png" alt="image-20221207195712549" style="zoom:50%;" />

<img src="https://i.imgur.com/3ezuwTA.png" alt="image-20221207195731971" style="zoom:50%;" />

<p>每个GroupID的含义在Link local</p>
<p>每个GroupID的含义在site local</p>
<h4 id="2-MAC"><a href="#2-MAC" class="headerlink" title="2. MAC"></a>2. MAC</h4><ul>
<li>Multicast MAC is associated with each multicast address.</li>
</ul>
<blockquote>
<p>多播MAC与每个多播地址相关。</p>
</blockquote>
<ul>
<li>For IPv6 multicast addresses, the last 32 bits of the IPv6 address are OR’d with 33:33:00:00:00:00.</li>
</ul>
<blockquote>
<p>对于IPv6组播地址，IPv6地址的最后32位与33:33:00:00:00:00进行OR’d</p>
</blockquote>
<ul>
<li>Example</li>
</ul>
<img src="https://i.imgur.com/PgXRLbb.png" alt="image-20221207200301723" style="zoom:50%;" />

<blockquote>
<p>Multicast ip address: ff02::1</p>
<p>mac address : 33:33:00:00:00:01</p>
</blockquote>
<h4 id="3-Solicited-Node-Multicast-Address-SNMA"><a href="#3-Solicited-Node-Multicast-Address-SNMA" class="headerlink" title="3. Solicited-Node Multicast Address (SNMA)"></a>3. <strong>Solicited-Node Multicast Address (SNMA)</strong></h4><blockquote>
<p>Solicited-Node Multicast Address(被请求的节点多播地址)</p>
</blockquote>
<ul>
<li>Every device that uses an IPv6 address will also compute and join a SNMA group for each IPv6 address.</li>
</ul>
<blockquote>
<p>每个使用IPv6地址的设备也将为每个IPv6地址计算并加入一个SNMA组。</p>
</blockquote>
<ul>
<li><p>This address is required for the IPv6 NDP(Neighbor Discovery Protocol).</p>
</li>
<li><p>Example</p>
</li>
</ul>
<img src="https://i.imgur.com/g6gqDYz.png" alt="image-20221207200818110" style="zoom:50%;" />

<blockquote>
<ul>
<li>last 24 bits of Interface ID, interface ID : 32:5476</li>
<li>Ff02::1:ff SNMA</li>
</ul>
</blockquote>
<h3 id="7-IPv6-Assigned-Prefixes"><a href="#7-IPv6-Assigned-Prefixes" class="headerlink" title="7. IPv6 Assigned Prefixes"></a>7. <strong>IPv6 Assigned Prefixes</strong></h3><ul>
<li>Address Type indicated by Format Prefix (FP).</li>
</ul>
<blockquote>
<p>由格式前缀（FP）表示的地址类型。</p>
</blockquote>
<img src="https://i.imgur.com/SIh3Mlo.png" alt="image-20221207201412743" style="zoom:50%;" />

<ul>
<li>Anycast addresses allocated from unicast prefixes.</li>
</ul>
<blockquote>
<p>从单播前缀分配的任播地址。</p>
<ul>
<li>Assigning a unicast address to more than one interface turns a unicast address into an anycast address.</li>
</ul>
<blockquote>
<p>将一个单播地址分配给一个以上的接口，会使单播地址变成任播地址。</p>
</blockquote>
</blockquote>
<ul>
<li>Exercise</li>
</ul>
<img src="https://i.imgur.com/zel2ivo.png" alt="image-20221207201925835" style="zoom:50%;" />

<h2 id="IPv6-application"><a href="#IPv6-application" class="headerlink" title="IPv6 application"></a>IPv6 application</h2><ul>
<li><p>DHCP(Dynamic Host Configuration Protocol)v6</p>
<ul>
<li>Stateless - &gt; Used with SLAAC(Stateless Address Auto-configuration).</li>
<li>Stateful -&gt; Similar to DHCP use in IPv4.</li>
</ul>
</li>
<li><p>DNS(Domain Name System)v6</p>
</li>
</ul>
<img src="https://i.imgur.com/SP85R18.png" alt="image-20221207203226594" style="zoom:50%;" />

<img src="https://i.imgur.com/VBDA0bZ.png" alt="image-20221207203249764" style="zoom:50%;" />

<ul>
<li>ICMP(Internet Control Message Protocol)v6<ul>
<li>Much more important than ICMP</li>
<li>Critical to the operation of IPv6.</li>
</ul>
</li>
</ul>
<h2 id="Neighbour-Dicovery-ND"><a href="#Neighbour-Dicovery-ND" class="headerlink" title="Neighbour Dicovery(ND)"></a>Neighbour Dicovery(ND)</h2><ul>
<li><p><strong>IPv6 Neighbour Discovery (ND)</strong></p>
<ul>
<li><p>For <strong>Nodes</strong></p>
<ul>
<li>Address configuration (SLAAC)</li>
<li>Link-layer address resolution</li>
<li>Link-layer address change notification</li>
<li>Neighbour Unreachability Detection (NUD)</li>
</ul>
</li>
<li><p>For <strong>Hosts</strong>:</p>
<ul>
<li>Router discovery</li>
<li>Parameter discovery (MTU, prefixes, hop limits).</li>
</ul>
</li>
<li><p>For <strong>Routers</strong>:</p>
<ul>
<li>Advertise their presence &amp; parameters</li>
<li>Advertise on-link prefixes</li>
<li>Determine next hops</li>
<li>Redirect hosts to better next hops.</li>
</ul>
</li>
<li><p>Stateless auto-configuration (SLAAC)</p>
<ul>
<li>Creation of Global Unique Address (GUA)</li>
<li>Based in ICMPv6 (ND protocol).</li>
<li>Creation of Link-local Address (LLA)<ul>
<li>Assumes that each interface can provide a unique identifier.</li>
<li>Use Duplicate Address Detection (DAD).</li>
<li>Plug &amp; play.</li>
</ul>
</li>
</ul>
</li>
<li><p>Stateful auto-configuration</p>
<ul>
<li>Use of Stateful DHCPv6.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="SLAAC-process"><a href="#SLAAC-process" class="headerlink" title="SLAAC process"></a>SLAAC process</h2><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><ul>
<li><p>Host creates a <strong>Solicited-Node Multicast Address (SNMA)</strong></p>
</li>
<li><p>Host registers a <strong>Multicast Listener Report</strong>(<strong>MLR</strong>) for SNMA address to join group</p>
<ul>
<li>from ( :: ) to ff02::16 Multicast Listener Discovery (MLD)</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/ClRPtzv.png" alt="image-20221207204451342" style="zoom:50%;" />

<p>左边发送到右边</p>
<ul>
<li>Destination Mac : ::</li>
<li>Source Mac: ff02::16</li>
</ul>
</blockquote>
</li>
<li><p>Host creates a <strong>Link Local Address (LLA)</strong></p>
<ul>
<li>Sends <strong>Neighbour Solicitation (NS)</strong> (135) from ( :: ) to SNMA with LLA target</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/eqBjzSz.png" alt="image-20221207210314214" style="zoom:50%;" />

<ul>
<li>Source mac is ::</li>
<li>Destination mac is ff02::1:ffaa:2</li>
</ul>
<blockquote>
<p>ff02::1 which mean all node on the link local</p>
</blockquote>
<ul>
<li>No Neighbour Advertisement (136) is received</li>
<li>No duplicate(重复) for LLA detected</li>
</ul>
</blockquote>
<ul>
<li>If <strong>Neighbour Advertisement (NA)</strong> (136) received auto-configuration stops.</li>
</ul>
</li>
<li><p>Host registers a <strong>Multicast Listener Report</strong> for SNMA address to join group</p>
<ul>
<li>from LLA to ff02::16 MLD</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/4a8PLMN.png" alt="image-20221207210759968" style="zoom:50%;" />

<ul>
<li>source mac fe80::200:ff:feaa:2</li>
</ul>
<blockquote>
<p>fe80:: link local address</p>
</blockquote>
<ul>
<li>Destination mac is ff02::16</li>
</ul>
<blockquote>
<p><strong>ff02::16 Multicast Listener Discovery (MLD)</strong></p>
</blockquote>
</blockquote>
</li>
<li><p>Host sends <strong>Router Solicitation (RS)</strong> (133) to ff02::2 ‘<em>All routers</em>’ from LLA</p>
</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/LrMGDFF.png" alt="image-20221207211003765" style="zoom:50%;" />

<ul>
<li>Source Mac is fe80::200:ff:feaa:2</li>
<li>Destination Mac is ff02::2</li>
</ul>
<blockquote>
<p>Ff02::2 all router on link local</p>
</blockquote>
</blockquote>
<ul>
<li>Router sends <strong>Router Advertisement (RA)</strong> (134) to ff02::1 ‘<em>All nodes</em>’ from its LLA with prefix</li>
</ul>
<blockquote>
<img src="https://i.imgur.com/qcolzIr.png" alt="image-20221207211235848" style="zoom:50%;" />

<ul>
<li>source Mac : Fe80::200:ff:feaa:3</li>
<li>Destination Mac : ff02::1</li>
</ul>
<blockquote>
<p> ff02::1 all node on link local</p>
</blockquote>
</blockquote>
<ul>
<li>Host creates <strong>Globally Unique Address (GUA)</strong> from prefix and MAC<ul>
<li>Sends NS (135) from ( :: ) to SNMA with GUA target</li>
<li>If NA (136) received auto-configuration stops.</li>
</ul>
</li>
<li>Finish SLAAC.</li>
</ul>
<h3 id="RA-Flags"><a href="#RA-Flags" class="headerlink" title="RA Flags"></a>RA Flags</h3><p><img src="https://i.imgur.com/qWEpqqK.png"></p>
<blockquote>
<p>如果M标志被设置为0，O标志被设置为1，则使用DHCPv6来获得额外的配置参数。</p>
</blockquote>
<ul>
<li>example</li>
</ul>
<p><img src="https://i.imgur.com/2TrqNS0.png"></p>
<blockquote>
<p>M:1 DHCPv6 stateful(有状态)</p>
<p>M:0 and O:1 SLAAC &amp; DHCPv6 stateless(无状态)。</p>
</blockquote>
<p><img src="https://i.imgur.com/kDXCTQD.png"></p>
<blockquote>
<p>M:0 and O:0 RDNSS(Recursive DNS server), DNSSL(DNS Search List Option)</p>
<p>RDNSS:递归DNS服务器 ;DNSSL:DNS搜索列表选项</p>
</blockquote>
<h2 id="LLA-amp-SNMA-generation"><a href="#LLA-amp-SNMA-generation" class="headerlink" title="LLA&amp;SNMA generation"></a>LLA&amp;SNMA generation</h2><h3 id="LLA"><a href="#LLA" class="headerlink" title="LLA"></a>LLA</h3><ul>
<li><strong>IPv6</strong> – Neighbor Discovery Protocol (NDP)</li>
</ul>
<img src="https://i.imgur.com/ce673Sh.png" alt="image-20221207212249164" style="zoom:50%;" />

<blockquote>
<ul>
<li><p>第一步检查邻居的缓存表里是否有PC2</p>
<ul>
<li>如果有，则直接创建Link local frame，然后PC2的MAC address就是目标address</li>
<li>无，则第二步</li>
</ul>
</li>
<li><p>第二步</p>
<ul>
<li>发送neighbour discovery (ND) 向PC2询问它的MAC地址</li>
<li>Neighbor Request(NR)邻居请求被发送到PC 2的被(SNMA)请求节点组播地址上</li>
</ul>
</li>
<li><p>ff02::1:ff is SNMA</p>
</li>
</ul>
</blockquote>
<ul>
<li><strong>IPv6</strong> – Link Local address (LLA)</li>
</ul>
<img src="https://i.imgur.com/V66CSem.png" alt="image-20221207213814416" style="zoom:50%;" />

<blockquote>
<ul>
<li>一旦为接口分配了IPv6地址（或启用了IPv6），操作系统就会自动分配一个LLA。</li>
<li>LLA可以由管理员静态分配。</li>
<li>路由器将不转发以LLA为目的地的数据包。</li>
<li>LLA地址fe80::&#x2F;10 - fe80::eui-64或静态分配fe80::和最重要的64位。- fe80:: 是link local address</li>
<li>静态分配的LLA将优先于自动生成的LLA。</li>
</ul>
</blockquote>
<ul>
<li><strong>Link Local Address (LLA) automatic assignment</strong></li>
</ul>
<img src="https://i.imgur.com/vpQAtan.png" alt="image-20221207214200194" style="zoom:50%;" />

<blockquote>
<ul>
<li>第一步，检查带有FF：FE的64 bit</li>
<li>第二步，将EUI-64变回EUI-48, 020c:cffff:fec1:2601 -&gt; 00:0c:cf:c1:26:01</li>
<li>所以MAC address 是00:0c:cf:c1:26:01</li>
</ul>
</blockquote>
<ul>
<li><strong>Link Local Address (LLA) Static assignment</strong></li>
</ul>
<p><img src="https://i.imgur.com/wtFM1jl.png" alt="image-20221207214740999"></p>
<h3 id="SNMA"><a href="#SNMA" class="headerlink" title="SNMA"></a>SNMA</h3><ul>
<li><strong>IPv6</strong> – Solicited Node Multicast Address (SNMA)</li>
</ul>
<img src="https://i.imgur.com/mTrLPBs.png" alt="image-20221207215023117" style="zoom:50%;" />

<blockquote>
<ul>
<li>一个被请求的节点多播地址(SNMA)是通过获取单播或任播地址中最不重要的24位并将其附加到前缀ff02::1:ff00:0&#x2F;104来创建的。</li>
<li>每个放在接口上的IPv6地址都会产生一个SNMA。</li>
<li>该接口加入了一个请求节点多播组地址(SNMA)。(它监听以IPv6征求节点多播地址为目的地的流量）。</li>
</ul>
</blockquote>
<img src="https://i.imgur.com/hHt9guN.png" alt="image-20221207235638858" style="zoom:50%;" />

<blockquote>
<ul>
<li>第一步，找到SNMA</li>
<li>第二步，mac 是33:33:fe:30:96:01</li>
</ul>
</blockquote>
<ul>
<li>Mapping Solicited Node Multicast Addresses to MAC addresses</li>
</ul>
<img src="https://i.imgur.com/xBw8nGY.png" alt="image-20221208002039150" style="zoom:50%;" />

<img src="https://i.imgur.com/eRRTbzA.png" alt="image-20221208003158659" style="zoom:50%;" />

<ul>
<li>PC X performs a ND for PC A</li>
</ul>
<img src="https://i.imgur.com/7IuWW6f.png" alt="image-20221208003407221" style="zoom:50%;" />

<h3 id="Question-ask"><a href="#Question-ask" class="headerlink" title="Question ask"></a>Question ask</h3><img src="https://i.imgur.com/4VeC8KT.png" alt="image-20221208003821447" style="zoom:50%;" />



<h2 id="Question-and-summary"><a href="#Question-and-summary" class="headerlink" title="Question and summary"></a>Question and summary</h2><h3 id="1-Questions"><a href="#1-Questions" class="headerlink" title="1. Questions"></a>1. Questions</h3><ul>
<li>Question 1</li>
</ul>
<img src="https://i.imgur.com/kfiPU3e.png" alt="image-20221208004242595" style="zoom:50%;" />

<blockquote>
<p>SNMA</p>
<img src="https://i.imgur.com/3ezuwTA.png" alt="image-20221207195731971" style="zoom:50%;" />

<ul>
<li>Destination MAC is <code>33:33:00:00:00:02</code> Which means all routers on the Linklocal</li>
<li>Source IP is <code>::</code></li>
<li>Destination IP is <code>ff02::2</code></li>
<li>Router IP link local :<code> fe80::210:ffff:ffd6:58c0</code></li>
</ul>
</blockquote>
<ul>
<li>Question 2</li>
</ul>
<p><img src="https://i.imgur.com/EOnQuT9.png" alt="image-20221208005231463"></p>
<blockquote>
<p>SNMA, DAD</p>
<p>destination MAC: <code>33:33:FE:23:47:33</code></p>
<p>Source address: <code>::</code></p>
<p>Destination address: <code>ff02::1:ff:23:4733</code></p>
</blockquote>
<ul>
<li>question 3</li>
</ul>
<img src="https://i.imgur.com/4jcohvc.png" alt="image-20221208010034478" style="zoom:50%;" />

<blockquote>
<p>Router advertisement </p>
<ul>
<li>Destination MAC: <code>33:33:00:00:00:01</code></li>
<li>Source address: <code>fe80::210:ffff:fed6:58c0</code></li>
<li>Destination address:<code> ff02::01</code></li>
<li>source Link-layer address is<code> fe80::210:ffff:fed6:58c0</code></li>
</ul>
</blockquote>
<ul>
<li>question 4</li>
</ul>
<img src="https://i.imgur.com/KrWKLCw.png" alt="image-20221208010718243" style="zoom:50%;" />

<blockquote>
<p>snma</p>
<ul>
<li>Destination Mac:<code> 33:33:ff:23:47:33</code></li>
<li>source address is <code>fec0:0:0:f282:210:ffff:fed6:58c0  -site local address</code></li>
<li>Destination address is <code>ff02::1:ff:23:47:33</code></li>
<li>Host A IP:<code>fec0::f282:2b0:d0ff:fe23:4733</code></li>
</ul>
</blockquote>
<ul>
<li>question5</li>
</ul>
<p><img src="https://i.imgur.com/EJ16BrR.png" alt="image-20221208012557092"></p>
<blockquote>
<ul>
<li>Destination MAC is <code>33:33:ff:23:47:33</code></li>
<li>Source address: <code>3ff3:2900:d005:f282:210:ffff:fed6:58c0</code></li>
<li>destination address is <code>3ffe:2900:d0005:f282:2b0:d0ff:fe23:4733</code></li>
</ul>
</blockquote>
<h3 id="2-Summary"><a href="#2-Summary" class="headerlink" title="2. Summary:"></a>2. Summary:</h3><h4 id="RA-Router-advertisement"><a href="#RA-Router-advertisement" class="headerlink" title="RA(Router advertisement)"></a>RA(Router advertisement)</h4><ul>
<li>Ethernet Header:</li>
</ul>
<p>MAC <code>33:33:00:00:00:01</code></p>
<ul>
<li>IPv6</li>
</ul>
<p>Source address: <code>fe80:: EUI-64 from route</code>, LLA </p>
<p>Destination address: <code>ff02::1</code> all node on Link local</p>
<p>source Link layer: <code>fe80:: EUI-64 from router</code></p>
<h4 id="RS-Router-Solicitation"><a href="#RS-Router-Solicitation" class="headerlink" title="RS(Router Solicitation)"></a>RS(Router Solicitation)</h4><ul>
<li>Ethernet Header:</li>
</ul>
<p>MAC<code>33:33:00:00:00:02</code></p>
<ul>
<li>IPv6</li>
</ul>
<p>Source address: <code>fe80:: EUI-64 from router</code> LLA</p>
<p>Destination address: <code>ff02::2</code></p>
<h4 id="NS-Neighbour-Solicitation"><a href="#NS-Neighbour-Solicitation" class="headerlink" title="NS(Neighbour Solicitation)"></a>NS(Neighbour Solicitation)</h4><ul>
<li>Ethernet Header:</li>
</ul>
<p>MAC :<code>33:33: last 32bit from EUI-64 </code></p>
<ul>
<li>IP v6 if there are DAD(duplicate )ip address process</li>
</ul>
<p>Source address: <code>::</code></p>
<p>Destination address: <code>ff02::1:ff:last24bit from SNMA</code></p>
<ul>
<li>Ipv6 if there are duplicate ip address process</li>
</ul>
<p>source address:<code>::</code></p>
<p>destination address: <code>fe80:: EUI-64</code></p>
<ul>
<li>ipv6 if host use GUA prefix</li>
</ul>
<p>Follow that.</p>
<h3 id="3-Cisco-Routes"><a href="#3-Cisco-Routes" class="headerlink" title="3. Cisco Routes"></a>3. Cisco Routes</h3><p><img src="https://i.imgur.com/aqWTfv6.png"></p>
<p><img src="https://i.imgur.com/ecUWK8l.png"></p>
<p><img src="https://i.imgur.com/tClSRVg.png"></p>
<p><img src="https://i.imgur.com/XZfjZQm.png"></p>
<p><img src="https://i.imgur.com/QMnmvop.png"></p>
<blockquote>
<p>Generate ipv6 LLA:</p>
<p><code>ipv6 address fe80::1 link-local</code></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>analysis result</title>
    <url>/2022/12/07/CNN%20project/analysis-result/</url>
    <content><![CDATA[<h1 id="Analysis-result"><a href="#Analysis-result" class="headerlink" title="Analysis result"></a>Analysis result</h1><p>Same dataset, same model ,same library</p>
<p><a href="https://www.kaggle.com/datasets/moltean/fruits">Fruit dataset</a> <a href="https://keras.io/api/applications/mobilenet/">MobileNet</a></p>
<h2 id="Frozen-100-base-layer-15Epoch"><a href="#Frozen-100-base-layer-15Epoch" class="headerlink" title="Frozen 100 base layer 15Epoch"></a>Frozen 100 base layer 15Epoch</h2><ul>
<li><strong>Model</strong>  :I use 51 **mobileNetV2 **base layer and classification layer to training. Total 154 base layer.</li>
<li><strong>Traning mathon</strong>:10Epoch traning the classification, 5 epoch traning the 54 base layer with classification . <strong>fine-tune</strong></li>
<li><strong>Dataset</strong> : Fruit360 in kaggle</li>
</ul>
<table>
<thead>
<tr>
<th>Chip type</th>
<th align="left">Colab TPU</th>
<th>Colab GPU</th>
</tr>
</thead>
<tbody><tr>
<td>model classification training Spend time</td>
<td align="left"></td>
<td>644 s</td>
</tr>
<tr>
<td>Model 54 base layer with head training spend time</td>
<td align="left"></td>
<td>331 s</td>
</tr>
<tr>
<td>Train Acceleration</td>
<td align="left"></td>
<td>0.9002 &#x3D; 90.02%</td>
</tr>
<tr>
<td>Train loss</td>
<td align="left"></td>
<td>0.3169 &#x3D; 31.69%</td>
</tr>
<tr>
<td>Valiation acceleration</td>
<td align="left"></td>
<td>0.9368 &#x3D; 93.68%</td>
</tr>
<tr>
<td>Valiation loss</td>
<td align="left"></td>
<td>0.4223 &#x3D; 42.23%</td>
</tr>
<tr>
<td>Test acceleration</td>
<td align="left"></td>
<td>93.75%</td>
</tr>
</tbody></table>
<h2 id="For-Detect-Result"><a href="#For-Detect-Result" class="headerlink" title="For Detect Result"></a>For Detect Result</h2><p>10 images averaged, every images only one fruit</p>
<p><strong>Type</strong></p>
<p>Computer use <strong>tensorflow</strong></p>
<p>Rpi use <strong>tensorflow-lite</strong></p>
<table>
<thead>
<tr>
<th>Condition</th>
<th>Computer</th>
<th>Computer+Coral</th>
<th>Rpi</th>
<th>Rpi + Coral</th>
</tr>
</thead>
<tbody><tr>
<td>Speed</td>
<td>-</td>
<td>2.5ms</td>
<td>-</td>
<td>3.8ms</td>
</tr>
<tr>
<td>Accuracy</td>
<td>86.52%</td>
<td>72.93%</td>
<td>84.23%</td>
<td>71.52%</td>
</tr>
</tbody></table>
<h2 id="GPU-Curve"><a href="#GPU-Curve" class="headerlink" title="GPU Curve"></a>GPU Curve</h2><ul>
<li>only train classification head acc and loss</li>
<li>10 Epoch</li>
<li>Cross Entropy &#x3D; Loss</li>
</ul>
<p><img src="https://i.imgur.com/lO6nlPp.png" alt="curve"></p>
<ul>
<li>Continue training 5 Epoch for 54 base layer of <strong>MobileNetV2</strong> with classification head</li>
</ul>
<p><img src="https://i.imgur.com/sGYmHyY.png" alt="curve2"></p>
]]></content>
      <tags>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>WIFI</title>
    <url>/2022/12/08/Computer%20Network/WIFI/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="WIFI"><a href="#WIFI" class="headerlink" title="WIFI"></a>WIFI</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ul>
<li>IEEE 802.11, which cover physical and data link layer.</li>
</ul>
<img src="https://i.imgur.com/UMrJWHp.png" alt="image-20221208140602350" style="zoom:50%;" />

<img src="https://i.imgur.com/2hfUWAX.png" alt="image-20221208142043513" style="zoom:50%;" />

<img src="https://i.imgur.com/VcT6eTB.png" alt="image-20221208142059098" style="zoom:50%;" />

<h2 id="Physical-and-Datalink-Layers"><a href="#Physical-and-Datalink-Layers" class="headerlink" title="Physical and Datalink Layers"></a>Physical and Datalink Layers</h2><p><img src="https://i.imgur.com/2NvTyLW.png"></p>
<p><img src="https://i.imgur.com/X5TOb2U.png"></p>
<ul>
<li>A-MSDU的形成</li>
</ul>
<p><img src="https://i.imgur.com/G52L964.png"></p>
<ul>
<li>A-MPDU的形成</li>
</ul>
<p><img src="https://i.imgur.com/WYPIGjM.png"></p>
<h2 id="How-it-work"><a href="#How-it-work" class="headerlink" title="How it work"></a>How it work</h2><img src="https://i.imgur.com/kDQj2Wq.png" alt="image-20221208142138729" style="zoom:50%;" />

<h3 id="Topological-Structure"><a href="#Topological-Structure" class="headerlink" title="Topological Structure"></a>Topological Structure</h3><ul>
<li><p><strong>A BSS without an AP</strong></p>
<ul>
<li><strong>ad</strong> <strong>hoc</strong> <strong>network</strong></li>
</ul>
<p><img src="https://i.imgur.com/QaZlGwO.png" alt="img"></p>
</li>
<li><p><strong>a BSS with an AP</strong></p>
<ul>
<li><strong>infrastructure</strong> <strong>network</strong></li>
</ul>
<p><img src="https://i.imgur.com/h9TwsSN.png" alt="img"></p>
</li>
<li><p>802.11ax BSS colour</p>
</li>
</ul>
<p><img src="https://i.imgur.com/eFapXvT.png"></p>
<blockquote>
<p>蓝字很重要</p>
<blockquote>
<p>如果颜色位相同，则该帧被认为是BSS内的传输，监听无线电将推迟。</p>
<p>如果颜色位不同，则该帧被视为来自OBSS的跨BSS传输，监听无线电仅在确定颜色位不同的时间内将信道视为繁忙。</p>
</blockquote>
</blockquote>
<h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><h4 id="STA-station"><a href="#STA-station" class="headerlink" title="STA(station)"></a>STA(station)</h4><ul>
<li>is a wireless terminal with a wireless network card, such as computer phone ,etc.</li>
</ul>
<blockquote>
<p>是指配有无线网卡的无线终端, 如手机、电脑等。</p>
</blockquote>
<ul>
<li><p>station type</p>
<ul>
<li><p><strong>No transition mobility</strong></p>
<ul>
<li>Stationary or moving only inside a BSS</li>
</ul>
<blockquote>
<p>静止或仅在BSS上移动</p>
</blockquote>
</li>
<li><p><strong>BSS transition Mobility</strong></p>
<ul>
<li>Can move from one BSS to another, the movement is confined to one ESS.</li>
</ul>
<blockquote>
<p>可以从一个BSS移动到另一个BSS，范围仅限ESS内</p>
</blockquote>
</li>
<li><p><strong>ESS transition mobility</strong></p>
<ul>
<li>Can move from one ESS to another. 802.11 does not guarantee that communication is continuous during the move.</li>
</ul>
<blockquote>
<p>从一个ESS移动到另一个ESS，802.11不保证移动过程通信是连续的。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="AP-Access-point"><a href="#AP-Access-point" class="headerlink" title="AP(Access point)"></a>AP(Access point)</h4><ul>
<li>Wireless Access Point</li>
<li>Network devices for connecting STA to wired networks</li>
</ul>
<blockquote>
<p>用来连接 STA 和有线网络的网络设备</p>
</blockquote>
<h4 id="BSS-basic-server-set"><a href="#BSS-basic-server-set" class="headerlink" title="BSS(basic server set)"></a>BSS(basic server set)</h4><ul>
<li>即基本服务集，由一个 AP 和一个及以上 STA 组成的无线网络。BSS 内所有的 STA 通信都是通过 AP 完成，AP 不仅能连接有线网络，还可以在 STA 和 其它 STA 或 DS 节点之间进行桥接。</li>
</ul>
<h4 id="ESS-Extended-server-set"><a href="#ESS-Extended-server-set" class="headerlink" title="ESS(Extended server set)"></a>ESS(Extended server set)</h4><ul>
<li>即扩展服务集，同一有线网络连接的、两个及以上的 AP 组成，和一个子网概念类似。</li>
</ul>
<h4 id="IBSS-Independent-basic-server-set"><a href="#IBSS-Independent-basic-server-set" class="headerlink" title="IBSS(Independent basic server set)"></a>IBSS(<strong>Independent</strong> basic server set)</h4><ul>
<li>即 独立基本服务集，包含一个及以上 STA 的无线网络，也叫做 ad-hoc 无线网络，无法访问 DS 时使用的模式。</li>
</ul>
<h4 id="DS-Distribution-System"><a href="#DS-Distribution-System" class="headerlink" title="DS(Distribution System)"></a>DS(Distribution System)</h4><ul>
<li>分发系统，让不同 BSS 内的 AP 通过 DS 互连，STA 可以从一个 BSS 移动到另一个 BSS 。AP 之间可以是无线互连，也可以是有线互连，通常是使用有线互连。DS 是 BSS 之间进行逻辑连接的基础，让 STA 在 BSS 之间能够实现漫游。</li>
</ul>
<h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><h4 id="Collision-Avoidance"><a href="#Collision-Avoidance" class="headerlink" title="Collision Avoidance"></a>Collision Avoidance</h4><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><ul>
<li>Hidden station problem</li>
</ul>
<p><img src="https://i.imgur.com/zgS1uRm.png" alt="image-20221208145053153"></p>
<blockquote>
<ul>
<li>B and C are hidden from each other.</li>
<li>B send frame to A , B think A is free</li>
<li>C send frame to A, C think A is free</li>
</ul>
<p>Then, there have collision.</p>
<ul>
<li>we use RTS and CTS we avoid this problem.</li>
</ul>
</blockquote>
<h5 id="why-we-can-not-use-CSDM-x2F-CD-Carrier-Sense-Multiple-Access-with-Collision-Detection"><a href="#why-we-can-not-use-CSDM-x2F-CD-Carrier-Sense-Multiple-Access-with-Collision-Detection" class="headerlink" title="why we can not use CSDM&#x2F;CD(Carrier Sense Multiple Access with Collision Detection)"></a>why we can not use CSDM&#x2F;CD(Carrier Sense Multiple Access with Collision Detection)</h5><p>CSDM&#x2F;CD : 波侦听多路访问&#x2F;冲突检测协议。</p>
<ul>
<li><strong>Collision Detection implies: a station must be able to TX data and RX collisions at the same time. This implies costly stations and increased BW.</strong></li>
</ul>
<blockquote>
<p>碰撞检测意味着：一个站必须能够在同一时间发送数据和接收碰撞。这意味着昂贵的站点和增加的BW。</p>
</blockquote>
<ul>
<li><strong>Collisions may not be detected because of hidden terminal problem.</strong></li>
</ul>
<blockquote>
<p>由于隐藏的终端问题，碰撞可能无法被检测到。</p>
</blockquote>
<ul>
<li><strong>Eg stations A and B both have data to send to C. Station B is hidden from A, so if there is a collision near B, A will not hear it. This cant happen on a wired LAN.</strong></li>
</ul>
<blockquote>
<p>例如，A站和B站都有数据要发送给C站，B站对A站是隐藏的，所以如果B站附近有碰撞，A站就听不到。这在有线局域网上是不可能发生的。</p>
</blockquote>
<ul>
<li><strong>The distance between stations may be great, because of signal fading a station at one end may not hear a collision at the other end.</strong></li>
</ul>
<blockquote>
<p>站点之间的距离可能很大，由于信号衰减，一端的站点可能听不到另一端的碰撞。</p>
</blockquote>
<ul>
<li><strong>概述：以太网中，传输介质是网线或光纤，能够通过电气信号检测冲突的发生。但由于无线网络不会产生电气信号，因此需要使用 CSMA&#x2F;CA 来替代 CSMA&#x2F;CD 。</strong></li>
</ul>
<h5 id="What-is-CSMA-x2F-CA-Carrier-Sense-Multiple-Access-with-Collision-Avoidance"><a href="#What-is-CSMA-x2F-CA-Carrier-Sense-Multiple-Access-with-Collision-Avoidance" class="headerlink" title="What is CSMA&#x2F;CA(Carrier Sense Multiple Access with Collision Avoidance)"></a>What is CSMA&#x2F;CA(Carrier Sense Multiple Access with Collision Avoidance)</h5><p>CSMA&#x2F;CA: 载波侦听多路访问&#x2F;冲突避免协议。</p>
<ul>
<li><p><strong>载波侦听</strong>CS(Carrier Sense ): 是指网络中的各个设备在发送数据前，都要确认确认线路上有没有数据传输。如果有数据传输，就不发送数据；如果没有数据传输，马上发送数据。</p>
</li>
<li><p><strong>多路访问</strong>MA(Multiple Access): 是指网络上所有设备收发数据，共同使用同一条线路，而且发送的数据是广播型。</p>
</li>
<li><p><strong>冲突避免</strong>CA(Collision Avoidance): WLAN 中，如果遇到其它设备正在发送数据，那么就在设备发送完成后，再等待一段随机时间，c才继续发送数据。</p>
</li>
</ul>
<h5 id="CSMA-x2F-CA-process"><a href="#CSMA-x2F-CA-process" class="headerlink" title="CSMA&#x2F;CA process"></a>CSMA&#x2F;CA process</h5><img src="https://i.imgur.com/HSytJ2G.png" alt="Flow chart of CSMA/CA" style="zoom:50%;" />

<ul>
<li><strong>RTS(request to send):</strong> a station want to send a control packet which includes the source, destination, and the duration of the following transaction (the packet and the respective ACK)</li>
</ul>
<blockquote>
<p>RTS（请求发送）：一个站要发送一个控制包，其中包括来源、目的地和下面交易的持续时间（该包和各自的ACK）。</p>
</blockquote>
<ul>
<li><strong>CTS(clear to send):</strong> The destination station responds with a response control packet which includes the same duration information.</li>
</ul>
<blockquote>
<p>目的站以响应控制包进行回应，其中包括相同的持续时间信息。</p>
</blockquote>
<ul>
<li><strong>Virtual Carrier Sense(called NAV, for Network Allocation Vector)</strong>: all station receive RTS&#x2F;CTS, set their Virtual Carrier Sense indicator,for the given duration, and use this information together with the Physical Carrier Sense when sensing the medium.</li>
</ul>
<blockquote>
<p>所有站都接收RTS&#x2F;CTS，在给定的时间内设置它们的虚拟载波感应指标，并在感应介质时与物理载波感应一起使用这一信息。</p>
</blockquote>
<ul>
<li><p><strong>inter-frame space (IFS):</strong> After the previous frame has been transmitted and detected by the other endpoints, each endpoint waits for a period of time</p>
<blockquote>
<p>在前一帧被传输并被其他端点检测到后，每个端点都会等待一段时期</p>
</blockquote>
<ul>
<li><strong>Short IFS (SIFS):</strong> The shortest interval, used by APs to send acknowledgements and management traffic</li>
</ul>
<blockquote>
<p>短IFS（SIFS）：最短的时间间隔，由AP用来发送确认和管理流量。</p>
</blockquote>
<ul>
<li><strong>Point-coordination IFS (PIFS):</strong>  Used in PCF (contention free).</li>
</ul>
<blockquote>
<p>点协调IFS（PIFS）：用于PCF（无争论）中。</p>
</blockquote>
<ul>
<li><strong>Distributed IFS (DIFS):</strong> The interval used by most other endpoints</li>
</ul>
<blockquote>
<p>分布式IFS（DIFS）–大多数其他端点使用的区间。</p>
</blockquote>
</li>
</ul>
<h5 id="DCF-Distributed-Coordination-Function"><a href="#DCF-Distributed-Coordination-Function" class="headerlink" title="DCF(Distributed Coordination Function)"></a>DCF(<strong>Distributed Coordination Function</strong>)</h5><p>DCF:分布式协调功能</p>
<img src="https://i.imgur.com/NLd6Ism.png" alt="Flow chat of DCF in CSMA/CA" style="zoom:50%;" />

<p>follow Diagram is <strong>CSMA&#x2F;CA and NAV (DCF)</strong></p>
<img src="https://i.imgur.com/nWwRw7q.png" alt="image-20221208163954768" style="zoom:50%;" />

<ul>
<li><em>Collision avoidance mechanism uses Network Allocation Vector (NAV)</em></li>
</ul>
<blockquote>
<p><em>避免碰撞机制使用网络分配向量（NAV）</em>。</p>
</blockquote>
<ul>
<li><em>May have a collision during Handshaking</em>(<em>if no ACK assume a collision</em>)</li>
</ul>
<blockquote>
<p><em>在握手过程中可能会有碰撞</em>（<em>如果没有ACK就认为有碰撞</em>）。</p>
</blockquote>
<p><strong>RTS&#x2F;CTS Exchage diagram</strong></p>
<img src="https://i.imgur.com/eibr08A.png" alt="RTS/CTS Exchage diagram" style="zoom:50%;" />

<p><strong>RTS and CTS Mac Header</strong></p>
<img src="https://i.imgur.com/ai7x47N.png" alt="RTS and CTS Mac Header" style="zoom:50%;" />

<ul>
<li>RA(Receive address)</li>
<li>TA(Transmitter address)</li>
</ul>
<p><strong>Duration field in RTS</strong></p>
<img src="https://i.imgur.com/FhjtO9B.png" alt="Duration field in RTS" style="zoom:50%;" />

<blockquote>
<p><strong>Duration time in RTS</strong>:</p>
<p><code>3*SIFS+CTS+ACK+frame time</code></p>
</blockquote>
<p><strong>Duration time in CTS</strong></p>
<img src="https://i.imgur.com/zmER7Z7.png" alt="Duration time in CTS" style="zoom:50%;" />

<blockquote>
<p><strong>Duration time in CTS</strong></p>
<p><code>RTS-CTS time -1*SIFS</code></p>
</blockquote>
<h5 id="CSMA-x2F-CA-and-NAV-exchange-packet-diagram"><a href="#CSMA-x2F-CA-and-NAV-exchange-packet-diagram" class="headerlink" title="CSMA&#x2F;CA and NAV exchange packet diagram"></a>CSMA&#x2F;CA and NAV exchange packet diagram</h5><img src="https://i.imgur.com/xMnTRjs.png" alt="image-20221208172416674" style="zoom:50%;" />

<p>Process</p>
<p> medium就是信道</p>
<blockquote>
<ul>
<li>Station 1 和station2 占用了信道，所以station3和station4进入了NAV,执行random backoff算法，station5和station6检测到信道忙，也进入NAV，并进入random backoff算法.</li>
<li>如何计算random backoff.根据DCF flow chart，station1和staion2占用信道之前，k&#x3D;3，2^3 -1&#x3D;7, back off &#x3D;7</li>
<li>Station3 and station4的backoff，在station1和station2发送data之前，k&#x3D;4, 2^4 -1 &#x3D;15, 0-15之间它选择了9，所以station1和station2的backoff counter先结束了计算，所以先开始了发送数据包，station3和station4发现backoff还没算完信道又忙了，于是推迟计算时间（冻结计算器）2slot，等信道空闲后重新计算2slot，然后发送数据。</li>
<li>station5和station6发送数据后设置NAV状态,由于距离比较远就之间隐蔽了。因为RTS和CTS的作用下，发生碰撞的 概率就比较低，RTS的时间很短，听到CTS则保留信道为忙，所以就一直忙到结束交易。</li>
</ul>
</blockquote>
<ul>
<li>CW(contention window)争用窗口 - from CA<ul>
<li>CW determines the additional amount of time (number of slots) an endpoint should wait after the IFS before attempting to transmit a packet.</li>
</ul>
</li>
</ul>
<blockquote>
<p>CW决定了端点在试图传输数据包之前，在IFS之后应该等待的额外时间（槽数）。</p>
<ul>
<li>If the medium is available, the endpoint transmits its packets.</li>
</ul>
<blockquote>
<p>如果信道可用就传输数据包</p>
</blockquote>
<ul>
<li>If the medium is unavailable (that is, if another device sent a packet), the endpoint waits until the end-of-packet transmission (from another device) plus the IFS period. In addition, it doubles the current value of the CW and then attempts to transmit.</li>
</ul>
<blockquote>
<p>如果不可用，就等待另一个设备的数据包传输完毕，加上剩余的DIFS，结束slot后，开始传输数据包。</p>
</blockquote>
</blockquote>
<h5 id="PCF-Point-Coordination-Function-optional"><a href="#PCF-Point-Coordination-Function-optional" class="headerlink" title="PCF( Point Coordination Function) - optional"></a>PCF( Point Coordination Function) - optional</h5><ul>
<li><p>Different with DCF</p>
<ul>
<li>PCF is <strong>contention free</strong></li>
</ul>
<blockquote>
<p>PCF是无争论的</p>
</blockquote>
<ul>
<li>DCF is <strong>Contention based</strong></li>
</ul>
<blockquote>
<p>DCF 是争论的</p>
</blockquote>
</li>
<li><p>Stations that only use DCF may not gain access to the medium</p>
<blockquote>
<p>如果只使用DCF，也许访问不到信道</p>
</blockquote>
<ul>
<li><p>Use repetition interval</p>
<blockquote>
<p>使用重复的时间间隔</p>
</blockquote>
</li>
<li><p>When a station hears the beacon frame they start their NAV which is set for the contention free period of the repetition interval.</p>
<blockquote>
<p>当一个站听到beacon frame时，他们开始他们的NAV，这是设置为重复间隔的无争论期。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>How do it work</p>
<ul>
<li><p>The AP performs the polling</p>
<blockquote>
<p>AP执行轮流询问</p>
</blockquote>
</li>
<li><p>Not all stations are capable of being polled</p>
<blockquote>
<p>但并不是所有的station都能被询问到</p>
</blockquote>
</li>
<li><p>PIFS is shorter than DIFS, this gives the AP priority</p>
<blockquote>
<p>PIFS比DIFS短，这给了AP优先权。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<img src="https://i.imgur.com/DussGvF.png" alt="image-20221208205935634" style="zoom:50%;" />

<blockquote>
<ul>
<li>看到Beacon frame ，其他stations全部进入NAV，避免冲突，同时重复间隔无争论期</li>
</ul>
<p><img src="https://i.imgur.com/91aBzbt.png"></p>
<blockquote>
<ol>
<li>AP默认发送beacons的时间是100TUs，故102.4ms</li>
<li>如果我们有10个ssid，那么我们需要在102.4ms内发送10个beacons，1个beacons就是10tus。</li>
<li>这就意味着多少个ssid在这个默认的时间内发送多少个beacons。</li>
</ol>
</blockquote>
</blockquote>
<h4 id="Frame-fomat"><a href="#Frame-fomat" class="headerlink" title="Frame fomat"></a>Frame fomat</h4><img src="https://i.imgur.com/WT4KIkV.png" alt="image-20221208212055129" style="zoom:50%;" />

<ul>
<li>Frame control is important</li>
</ul>
<img src="https://i.imgur.com/FrB4f8c.png" alt="image-20221208212151901" style="zoom:50%;" />

<h5 id="RTS-frame-control"><a href="#RTS-frame-control" class="headerlink" title="RTS frame control"></a>RTS frame control</h5><img src="https://i.imgur.com/mq9DnTR.png" alt="image-20221208212353380" style="zoom:50%;" />

<h5 id="CTS-or-ASK-frame-control"><a href="#CTS-or-ASK-frame-control" class="headerlink" title="CTS or ASK frame control"></a>CTS or ASK frame control</h5><img src="https://i.imgur.com/BDSBUjg.png" alt="image-20221208212420811" style="zoom:50%;" />

<h5 id="Subtype-Value"><a href="#Subtype-Value" class="headerlink" title="Subtype Value"></a>Subtype Value</h5><img src="https://i.imgur.com/QqaxktN.png" alt="image-20221208221841731" style="zoom:50%;" />

<h5 id="TO-DS-Distribution-System-and-From-DS"><a href="#TO-DS-Distribution-System-and-From-DS" class="headerlink" title="TO DS(Distribution System) and From DS"></a>TO DS(Distribution System) and From DS</h5><img src="https://i.imgur.com/MDTHTmx.png" alt="image-20221208222056675" style="zoom:50%;" />

<p>Different case in address</p>
<img src="https://i.imgur.com/wc3ctdU.png" alt="image-20221208222631648" style="zoom:50%;" />

<h5 id="Basic-Service-Set-Identifier-BSSID"><a href="#Basic-Service-Set-Identifier-BSSID" class="headerlink" title="Basic Service Set Identifier (BSSID)"></a>Basic Service Set Identifier (BSSID)</h5><p>基本服务集标识符。</p>
<ul>
<li><p>SA(Source address)</p>
<ul>
<li><p>The SA field contains an IEEE MAC individual address that identifies the MAC entity from which the transfer of the MSDU (or fragment thereof) or A-MSDU, contained in the frame body field was initiated. The individual&#x2F;group bit is always transmitted as a 0 in the source address.</p>
<blockquote>
<p>SA字段包含一个IEEE MAC个体地址，用于识别MSDU（或其片段）或A-MSDU（包含在帧体字段中）的传输是从哪个MAC实体开始的。在源地址中，个人&#x2F;组位总是以0的形式传输。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>DA(Destination address)</p>
<ul>
<li><p>The DA field contains an IEEE MAC individual or group address that identifies the MAC entity or entities intended as the final recipient(s) of the MSDU (or fragment thereof) or A-MSDU, contained in the frame body field.</p>
<blockquote>
<p>DA字段包含一个IEEE MAC个人或群组地址，用于识别MAC实体或实体作为帧体字段中包含的MSDU（或其片段）或A-MSDU的最终接收者。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>RA(Receving STA address)</p>
<ul>
<li><p>The RA field contains an IEEE MAC individual or group address that identifies the intended immediate recipient STA(s), on the WM, for the information contained in the frame body field.</p>
<blockquote>
<p>RA字段包含一个IEEE MAC个人或群组地址，用于识别WM上帧体字段所含信息的预期直接接收者STA（s）。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>TA(Transmitting STA address)</p>
<ul>
<li><p>The TA field contains an IEEE MAC individual address that identifies the STA that has transmitted, onto the WM, the MPDU contained in the frame body field. The Individual&#x2F;Group bit is always transmitted as a 0 in the transmitter address.</p>
<blockquote>
<p>TA字段包含一个IEEE MAC个体地址，用于识别在WM上传输帧体字段所含MPDU的STA。在发送器地址中，个人&#x2F;组位总是以0的形式传输。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<img src="https://i.imgur.com/8dXHOVs.png" alt="image-20221208223600781" style="zoom:50%;" />

<h5 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h5><ul>
<li>Quesion1:</li>
</ul>
<img src="https://i.imgur.com/Hp7zdw3.png" alt="image-20221208223659125" style="zoom:50%;" />

<ul>
<li>question2</li>
</ul>
<img src="https://i.imgur.com/rkA7hTI.png" alt="image-20221208223734507" style="zoom:50%;" />

<ul>
<li>Question3</li>
</ul>
<img src="https://i.imgur.com/5n60xPr.png" alt="image-20221208223757650" style="zoom:50%;" />

<ul>
<li>Question 4</li>
</ul>
<img src="https://i.imgur.com/XdyO4Cs.png" alt="image-20221208223821225" style="zoom:50%;" />

<h4 id="OFDM-for-802-11"><a href="#OFDM-for-802-11" class="headerlink" title="OFDM for 802.11"></a>OFDM for 802.11</h4><p>calculation datarate and subcarriers spacings.</p>
<h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><img src="https://i.imgur.com/nkz6OET.png" alt="image-20221208231047265" style="zoom:50%;" />

<img src="https://i.imgur.com/NXl19lS.png" alt="image-20221208231023045" style="zoom:50%;" />

<h5 id="question"><a href="#question" class="headerlink" title="question"></a>question</h5><ul>
<li>Question1</li>
</ul>
<img src="https://i.imgur.com/wlODaZE.png" alt="image-20221208232537091" style="zoom:50%;" />

<img src="https://i.imgur.com/GFRCKhe.png" alt="image-20221208232619511" style="zoom:50%;" />

<ul>
<li>Question2</li>
</ul>
<img src="https://i.imgur.com/viNfnY9.png" alt="image-20221208232634746" style="zoom:50%;" />

<img src="https://i.imgur.com/vdoHtVX.png" alt="image-20221208233958167" style="zoom:50%;" />

]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>MOS physics</title>
    <url>/2022/12/10/Micro%20Electronic/MOS-physics/</url>
    <content><![CDATA[<p>[Toc]</p>
<h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><img src="https://i.imgur.com/oNRw3D7.png" alt="image-20221210152256414" style="zoom:50%;" />

<img src="https://i.imgur.com/spcys1n.png" alt="img" style="zoom: 80%;" />

<ul>
<li>通常NMOS的器件衬底(substrate)接地</li>
<li>PMOS的器件衬底接电源</li>
<li>珊极 - Gate(G)</li>
<li>源极 - Source(S)</li>
<li>漏极 - Drain(D)</li>
</ul>
<h1 id="V-I-feature"><a href="#V-I-feature" class="headerlink" title="V-I feature"></a>V-I feature</h1><img src="https://i.imgur.com/H2F2dGj.png" alt="image-20221210153707425" style="zoom:50%;" />

<h2 id="Three-Situation"><a href="#Three-Situation" class="headerlink" title="Three Situation"></a>Three Situation</h2><h3 id="1-Linear-Triode-线性三极管"><a href="#1-Linear-Triode-线性三极管" class="headerlink" title="1. Linear Triode(线性三极管)"></a>1. Linear Triode(线性三极管)</h3><img src="https://i.imgur.com/uAavRrZ.png" alt="image-20221210154917803" style="zoom:50%;" />

<ul>
<li>条件是 <img src="https://i.imgur.com/zZ8kOWw.png" alt="image-20221210155010109" style="zoom:50%;" /></li>
</ul>
<blockquote>
<p>µn 是 电子迁移度</p>
<p>L 为有效沟道长度</p>
<p>Vth 为阀值电压</p>
<p>Cox 为单位面积的珊化层电容</p>
</blockquote>
<h3 id="2-Saturation-饱和度"><a href="#2-Saturation-饱和度" class="headerlink" title="2. Saturation(饱和度 )"></a>2. Saturation(饱和度 )</h3><img src="https://i.imgur.com/Jwkbhdv.png" alt="image-20221210160321248" style="zoom:50%;" />

<ul>
<li>条件是 <img src="https://i.imgur.com/guweOYY.png" alt="image-20221210160349620" style="zoom: 33%;" /></li>
<li><img src="https://i.imgur.com/CWreCEa.png" alt="image-20221210160607885" style="zoom:50%;" /></li>
</ul>
<h3 id="3-Cut-Off"><a href="#3-Cut-Off" class="headerlink" title="3. Cut Off"></a>3. Cut Off</h3><img src="https://i.imgur.com/Uv0L7a4.png" alt="image-20221210160515751" style="zoom:50%;" />

<h2 id="Transconductance-gm-跨导"><a href="#Transconductance-gm-跨导" class="headerlink" title="Transconductance (gm) -跨导"></a>Transconductance (gm) -跨导</h2><h3 id="1-Saturation"><a href="#1-Saturation" class="headerlink" title="1. Saturation"></a>1. Saturation</h3><img src="https://i.imgur.com/4FbzPeg.png" alt="image-20221210161451907" style="zoom:50%;" />

<ul>
<li>Small signal model</li>
</ul>
<img src="https://i.imgur.com/KZhQt4w.png" alt="image-20221210161712414" style="zoom:50%;" />

<h3 id="2-Linear-Triode"><a href="#2-Linear-Triode" class="headerlink" title="2. Linear Triode"></a>2. Linear Triode</h3><img src="https://i.imgur.com/RtXkRa7.png" alt="image-20221210161932825" style="zoom:50%;" />

<h2 id="Three-Effect"><a href="#Three-Effect" class="headerlink" title="Three Effect"></a>Three Effect</h2><h3 id="Channel-Length-Modulation"><a href="#Channel-Length-Modulation" class="headerlink" title="Channel Length Modulation"></a>Channel Length Modulation</h3><img src="https://i.imgur.com/5p5N358.png" alt="image-20221210162451301" style="zoom:50%;" />

<blockquote>
<ul>
<li><p>The end point of the channel actually moves toward the source as VD increases, increasing Id</p>
<blockquote>
<p>随着端点往源极大移动，导致Vd增长，同时增长Id。</p>
</blockquote>
<img src="https://i.imgur.com/5aKSZGG.png" alt="image-20221210162901977" style="zoom:50%;" /></li>
</ul>
</blockquote>
<h3 id="Velocity-Saturation"><a href="#Velocity-Saturation" class="headerlink" title="Velocity Saturation"></a>Velocity Saturation</h3><img src="https://i.imgur.com/m2LdcSa.png" alt="image-20221210163023268" style="zoom:50%;" />

<img src="https://i.imgur.com/FlV3hz9.png" alt="image-20221210163149853" style="zoom:50%;" />

<blockquote>
<ul>
<li><p>由于通道非常短，不需要很大的漏极电压就能让电荷粒子快速饱和</p>
</li>
<li><p>在快速饱和的情况下，漏极电压称为了栅极电压的线性函数，gm成为了W的函数。</p>
</li>
</ul>
</blockquote>
<h3 id="Body-Effect"><a href="#Body-Effect" class="headerlink" title="Body Effect"></a>Body Effect</h3><img src="https://i.imgur.com/NoVKULh.png" alt="image-20221210163514866" style="zoom:50%;" />

<img src="https://i.imgur.com/scC6ivM.png" alt="image-20221210163724851" style="zoom:50%;" />

<blockquote>
<p>当源电位偏离电位时，阀值电压会发生变化。</p>
</blockquote>
<h2 id="Layer-of-a-Mos-Transistor-Using-design-rules"><a href="#Layer-of-a-Mos-Transistor-Using-design-rules" class="headerlink" title="Layer of a Mos Transistor(Using design rules)"></a>Layer of a Mos Transistor(Using design rules)</h2><p><img src="https://i.imgur.com/VOKDW8m.png" alt="image-20221210163947912"></p>
<p><img src="https://i.imgur.com/xXiR1EH.png"></p>
]]></content>
      <categories>
        <category>微电子电路</category>
      </categories>
      <tags>
        <tag>Micro_system</tag>
      </tags>
  </entry>
  <entry>
    <title>Mos amplifier</title>
    <url>/2022/12/11/Micro%20Electronic/Mos-amplifier/</url>
    <content><![CDATA[<p>[Toc]</p>
<h1 id="Common-Source-CS-Stage-x3D-BJT-CE"><a href="#Common-Source-CS-Stage-x3D-BJT-CE" class="headerlink" title="Common Source(CS) Stage &#x3D; BJT CE"></a>Common Source(CS) Stage &#x3D; BJT CE</h1><p><img src="https://i.imgur.com/IGlA5co.png" alt="image-20221211135934793"></p>
<img src="https://i.imgur.com/gjn1zWu.png" alt="image-20221211140554160" style="zoom:50%;" />

<h2 id="Operation-in-Saturation"><a href="#Operation-in-Saturation" class="headerlink" title="Operation in Saturation"></a>Operation in Saturation</h2><img src="https://i.imgur.com/gB21lJB.png" alt="image-20221211140633611" style="zoom:50%;" />

<img src="https://i.imgur.com/SmdymcN.png" alt="image-20221211141743864" style="zoom:50%;" />

<blockquote>
<ul>
<li>为了保持饱和状态，Vout不能低于Vin 通过增加一个阀值(Threshould)电压。</li>
</ul>
</blockquote>
<h2 id="λ-x3D-0-and-λ-x3D-̸0"><a href="#λ-x3D-0-and-λ-x3D-̸0" class="headerlink" title="λ&#x3D;0 and λ&#x3D;̸0"></a>λ&#x3D;0 and λ&#x3D;̸0</h2><h3 id="λ-x3D-0"><a href="#λ-x3D-0" class="headerlink" title="λ&#x3D;0"></a>λ&#x3D;0</h3><img src="https://i.imgur.com/edV5YT1.png" alt="image-20221211141946490" style="zoom:50%;" />

<h3 id="λ-x3D-̸0-early-effect"><a href="#λ-x3D-̸0-early-effect" class="headerlink" title="λ&#x3D;̸0 early effect"></a>λ&#x3D;̸0 early effect</h3><img src="https://i.imgur.com/WxTUDWx.png" alt="image-20221211142029603" style="zoom:50%;" />

<blockquote>
<p>早期效应和通道调制影响CS和CE。</p>
</blockquote>
<h2 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h2><h3 id="CS-stage-with-Current-Source-Load"><a href="#CS-stage-with-Current-Source-Load" class="headerlink" title="CS stage with Current Source Load"></a>CS stage with Current Source Load</h3><p><img src="https://i.imgur.com/mbj1qe9.png" alt="image-20221211142424301"></p>
<img src="https://i.imgur.com/dHMwyRe.png" alt="" style="zoom:50%;" />

<img src="https://i.imgur.com/l43fAdM.png" style="zoom:50%;" />

<blockquote>
<ul>
<li><p>为了缓解Headroom问题，使用电流源负载</p>
</li>
<li><p>因为电流源有着较高的输出电阻，可以容忍小电压压降。</p>
</li>
</ul>
</blockquote>
<img src="https://i.imgur.com/ZXcigkk.png" alt="image-20221211142909873" style="zoom:50%;" />

<img src="https://i.imgur.com/KWZL2cG.png" alt="image-20221211142929262" style="zoom:50%;" />

<blockquote>
<p>PMOS为输入极，NMOS为负载，电压增益与之前相同。</p>
</blockquote>
<h3 id="CS-Stage-with-Diode-Connected-Load"><a href="#CS-Stage-with-Diode-Connected-Load" class="headerlink" title="CS Stage with Diode-Connected Load"></a>CS Stage with Diode-Connected Load</h3><img src="https://i.imgur.com/wYYHsIF.png" alt="image-20221211143055562" style="zoom:50%;" />

<p><img src="https://i.imgur.com/kUGOPsl.png"></p>
<img src="https://i.imgur.com/n9Qvwrn.png" alt="" style="zoom:50%;" />

<blockquote>
<p>增益较低，但是减少过程参数的依赖。</p>
</blockquote>
<h3 id="CS-stage-with-Gate-Resistance"><a href="#CS-stage-with-Gate-Resistance" class="headerlink" title="CS stage with Gate Resistance"></a>CS stage with Gate Resistance</h3><img src="https://i.imgur.com/y50UXsa.png" alt="" style="zoom:50%;" />

<blockquote>
<p>No Current, so Vg &#x3D; 0.</p>
</blockquote>
<h3 id="Ouput-Impedance-of-CS-Stage-with-Degeneration"><a href="#Ouput-Impedance-of-CS-Stage-with-Degeneration" class="headerlink" title="Ouput Impedance of CS Stage with Degeneration"></a>Ouput Impedance of CS Stage with Degeneration</h3><p><img src="https://i.imgur.com/owmOgMB.png" alt="image-20221211155533195"></p>
<p><img src="https://i.imgur.com/ekMSnz1.png"></p>
<p><img src="https://i.imgur.com/Fz2COiQ.png"></p>
<blockquote>
<p>与BJT的degeneration相似。</p>
</blockquote>
<ul>
<li>Example1</li>
</ul>
<p><img src="https://i.imgur.com/X2XweCV.png"></p>
<img src="https://i.imgur.com/y8Gpjaz.png" alt="image-20221211160235469" style="zoom:50%;" />

<ul>
<li>Example 2</li>
</ul>
<p><img src="https://i.imgur.com/p5JbZVb.png"></p>
<img src="https://i.imgur.com/axgJwNI.png" alt="image-20221211160452923" style="zoom:50%;" />

<h2 id="CG"><a href="#CG" class="headerlink" title="CG"></a>CG</h2><img src="https://i.imgur.com/jyYN9n8.png" alt="" style="zoom:50%;" />

<blockquote>
<p>输入的上升导致输出的上升，所以增益是正的</p>
</blockquote>
<h3 id="CG-stage-with-Source-Resistance"><a href="#CG-stage-with-Source-Resistance" class="headerlink" title="CG stage with Source Resistance"></a>CG stage with Source Resistance</h3><img src="https://i.imgur.com/ofKowCZ.png" alt="" style="zoom:50%;" />

<p><img src="https://i.imgur.com/84demua.png"></p>
<p><img src="https://i.imgur.com/iiSsuEF.png"></p>
<blockquote>
<p>有源电阻存在时，电压增益等于有CS级的电压增益，只是是正的。</p>
</blockquote>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p><img src="https://i.imgur.com/RjCmnRC.png"></p>
<img src="https://i.imgur.com/nxBRPJg.png" alt="" style="zoom:50%;" />

<h3 id="CG-stage-with-Biasing"><a href="#CG-stage-with-Biasing" class="headerlink" title="CG stage with Biasing"></a>CG stage with Biasing</h3><img src="https://i.imgur.com/24xZLlh.png" alt="" style="zoom:50%;" />

<p><img src="https://i.imgur.com/nUJLLNB.png"></p>
<h2 id="CD"><a href="#CD" class="headerlink" title="CD"></a>CD</h2><h3 id="CD-satge"><a href="#CD-satge" class="headerlink" title="CD satge"></a>CD satge</h3><p><img src="https://i.imgur.com/6Bc0Vxc.png"></p>
<img src="https://i.imgur.com/0fpRped.png" alt="" style="zoom:50%;" />

<blockquote>
<p>CD &#x3D; CC</p>
</blockquote>
<h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><img src="https://i.imgur.com/Xoi8QBd.png" alt="image-20221211165232958" style="zoom:50%;" />

<img src="https://i.imgur.com/gOuW4k3.png" alt="" style="zoom:50%;" />

<h2 id="Example-complex"><a href="#Example-complex" class="headerlink" title="Example complex"></a>Example complex</h2><h3 id="Example-of-a-CS-stage-1"><a href="#Example-of-a-CS-stage-1" class="headerlink" title="Example of a CS stage(1)"></a>Example of a CS stage(1)</h3><p><img src="https://i.imgur.com/oJogi4E.png"></p>
<img src="https://i.imgur.com/DBXgbrn.png" alt="" style="zoom:50%;" />

<h3 id="Example-of-a-CS-stage-2"><a href="#Example-of-a-CS-stage-2" class="headerlink" title="Example of a CS stage(2)"></a>Example of a CS stage(2)</h3><p><img src="https://i.imgur.com/F4yycOS.png"></p>
<img src="https://i.imgur.com/Rd1cgGm.png" alt="" style="zoom:50%;" />

<h3 id="Example-of-CS-and-CG-stages"><a href="#Example-of-CS-and-CG-stages" class="headerlink" title="Example of CS and CG stages"></a>Example of CS and CG stages</h3><p><img src="https://i.imgur.com/mYK7ant.png"></p>
<p><img src="https://i.imgur.com/1EfhQNn.png"></p>
<p><img src="https://i.imgur.com/wozvjli.png"></p>
<p><img src="https://i.imgur.com/SOcUr0A.png"></p>
<h3 id="Example-of-Composite-stage-1"><a href="#Example-of-Composite-stage-1" class="headerlink" title="Example of Composite stage(1)"></a>Example of Composite stage(1)</h3><p><img src="https://i.imgur.com/DqEWHNZ.png"></p>
<p><img src="https://i.imgur.com/NXVhmPx.png"></p>
<h3 id="Example-of-a-Composite-Stage-2"><a href="#Example-of-a-Composite-Stage-2" class="headerlink" title="Example of a Composite Stage(2)"></a>Example of a Composite Stage(2)</h3><p><img src="https://i.imgur.com/fKFR5hy.png"></p>
<p><img src="https://i.imgur.com/KkWK723.png"></p>
]]></content>
      <categories>
        <category>微电子电路</category>
      </categories>
      <tags>
        <tag>Micro_system</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer network lab tips</title>
    <url>/2022/12/15/Computer%20Network/Computer-network-lab-tips/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="Static-Route"><a href="#Static-Route" class="headerlink" title="Static Route"></a>Static Route</h1><p>其作用是有两个及以上的router连接不同类型的IPv4&#x2F;IPv6时候需要配置的static route&#x2F;dynamic route来连接。</p>
<p>Advantage </p>
<blockquote>
<ul>
<li><p>There is no overhead on the router CPU.</p>
<blockquote>
<p>路由器CPU上没有开销。</p>
</blockquote>
</li>
<li><p>There is no bandwidth usage between routers.</p>
<blockquote>
<p>路由器之间不存在带宽占用。手动配置没有流量产出</p>
</blockquote>
</li>
<li><p>It adds security because the administrator can choose to allow routing access to certain networks only.</p>
<blockquote>
<p>它增加了安全性，因为管理员可以选择只允许对某些网络进行路由访问。</p>
</blockquote>
</li>
</ul>
</blockquote>
<p>Disadvantage</p>
<blockquote>
<ul>
<li><p>The administrator must really understand the internetwork and how each router is connected in order to configure routes correctly.</p>
<blockquote>
<p>管理员必须真正了解内联网和每个路由器的连接方式，以便正确配置路由。</p>
</blockquote>
</li>
<li><p>If a network is added to the internetwork, the administrator has to add a route to it on all routers—manually.</p>
<blockquote>
<p>如果一个网络被添加到国际网络中，管理员必须在所有路由器上手动添加一个路由到它。</p>
</blockquote>
</li>
<li><p>It’s not possible in large networks because maintaining it would be a full-time job in itself.</p>
<blockquote>
<p>这在大型网络中是不可能的，因为维护它本身就是一项全职工作。</p>
</blockquote>
</li>
</ul>
</blockquote>
<p>Command </p>
<blockquote>
<p>CLI set static route command</p>
<ul>
<li><p><code>Router(config)#**ip route 172.16.20.0 255.255.255.0 172.16.10.2**</code></p>
<blockquote>
<ul>
<li><p>172.16.20.0 &#x3D; destination network &#x2F;&#x2F;目的网络</p>
</li>
<li><p>255.255.255.0 &#x3D; subnet mask &#x2F;&#x2F;子网掩码</p>
</li>
<li><p>172.16.10.2 &#x3D; next-hop address &#x2F;&#x2F;下一跳的地址</p>
</li>
</ul>
<blockquote>
<p>To get to the destination network of 172.16.20.0, with a subnet mask of 255.255.255.0, send all packets to 172.16.10.2</p>
</blockquote>
</blockquote>
</li>
<li><p><code>Router(config)#**ip route 172.16.20.0 255.255.255.0 s0/0**</code></p>
<blockquote>
<ul>
<li><p>172.16.20.0 &#x3D; destination network &#x2F;&#x2F;目的网络</p>
</li>
<li><p>255.255.255.0 &#x3D; subnet mask &#x2F;&#x2F;子网掩码</p>
</li>
<li><p>s0&#x2F;0 &#x3D; exit interface &#x2F;&#x2F;从该接口发送数据包</p>
</li>
</ul>
<blockquote>
<p>To get to the destination network of 172.16.20.0, with a subnet mask of 255.255.255.0, send all packets out interface Serial 0&#x2F;0</p>
</blockquote>
</blockquote>
</li>
<li><p>命令解释</p>
<blockquote>
<ul>
<li><p><strong>ip route</strong> The command used to create the static route.（重要）</p>
<blockquote>
<p><strong>创建静态网络</strong></p>
</blockquote>
</li>
<li><p><strong>destination_network</strong> The network you’re placing in the routing table.</p>
<blockquote>
<p>你要放入路由表的网络</p>
</blockquote>
</li>
<li><p><strong>mask</strong> The subnet mask being used on the network.</p>
<blockquote>
<p>子网掩码</p>
</blockquote>
</li>
<li><p><strong>next-hop_address</strong> The address of the next-hop router that will receive the packet and forward it to the remote network.</p>
<blockquote>
<p>下一跳路由器的地址，它将会接受数据包并转发给远程网络</p>
</blockquote>
</li>
<li><p><strong>exit_interface</strong>Used in place of the next-hop address if you want, and shows up as a directly connected route.</p>
<blockquote>
<p>可以用它代替下一跳地址，并显示直接网络的路由</p>
</blockquote>
</li>
<li><p><strong>administrative_distance</strong> By default, static routes have an administrative distance of 1 (or even 0 if you use an exit interface instead of a next-hop address).</p>
<blockquote>
<p><strong>默认情况下，静态路由的管理距离是1，如果使用出口接口而不是下一跳地址甚至是0</strong>(重要)</p>
</blockquote>
</li>
<li><p><strong>permanent Keyword (Optional)</strong> Without the permanent keyword in a static route statement, a static route will be removed if an interface goes down. Adding the permanent keyword to a static route statement will keep the static routes in the routing table even if the interface goes down and the directly connected networks are removed.</p>
<blockquote>
<p>在静态路由语句中没有永久关键字，如果一个接口发生故障，静态路由将被删除。在静态路由语句中添加永久关键字，即使接口宕机，直接连接的网络被删除，静态路由也会保留在路由表中。</p>
</blockquote>
</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<p>static route 显示配置，但其实更多使用命令行。</p>
<blockquote>
<p><img src="https://i.imgur.com/IBJjAhp.png" alt="static routes 配置"></p>
<ul>
<li><p>效果和命令行相同</p>
</li>
<li><p>不能配置默认路由和出口接口路由</p>
<blockquote>
<p>Bangor(config)#<strong>ip route 0.0.0.0 0.0.0.0 s1</strong></p>
<p>Buffalo(config)#<strong>ip route 172.16.10.0 255.255.255.0 s1</strong></p>
</blockquote>
</li>
<li><p><strong>默认路由</strong>（Default route），是对IP<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%8C%85">数据包</a>中的目的地址找不到存在的其他路由时，<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>所选择的路由。目的地不在路由器的<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E8%A1%A8">路由表</a>里的所有数据包都会使用默认路由。这条路由一般会连去另一个路由器，而这个路由器也同样处理数据包: 如果知道应该怎么路由这个数据包，则数据包会被转发到已知的路由；否则，数据包会被转发到默认路由，从而到达另一个路由器。每次转发，路由都增加了一跳的距离。</p>
</li>
</ul>
</blockquote>
<h1 id="DHCP-in-Router"><a href="#DHCP-in-Router" class="headerlink" title="DHCP in Router"></a>DHCP in Router</h1><p><a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/bee02498e5ede152069f22ecdc0fe8e91348bc61/%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6/Computer%20network/Commonly%20used%20DHCP%20commands.docx">DHCP-Command</a></p>
<p><a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/main/%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6/Computer%20network/Lab2_Pdf_of_answer.pdf">lab file</a></p>
<p>起作用是自动寻找ip地址</p>
<p>例子如下图</p>
<p><img src="https://i.imgur.com/w5XDXKf.png" alt="Comfigure DHCP and static route"></p>
<p>Command</p>
<ul>
<li>Router</li>
</ul>
<blockquote>
<ul>
<li><p><code>R0(config)#ip dhcp pool ip_pool1</code></p>
<blockquote>
<p>创建 DHCP 服务器地址池的名称并进入 DHCP 池配置模式。</p>
</blockquote>
</li>
<li><p><code>R0(dhcp-config)#domain-name itcarlow.ie</code></p>
<blockquote>
<p>指定客户端的域名,设置domain-name为itcarlow.ie</p>
</blockquote>
</li>
<li><p><code>R0(dhcp-config)#dns-server 192.77.1.100</code></p>
<blockquote>
<p>指定可用于 DHCP 客户端的 DNS 服务器的 IP 地址。 需要一个 IP 地址，但是，您最多可以在一个命令行中指定八个 IP 地址。 服务器应按优先顺序列出。</p>
</blockquote>
</li>
<li><p><code>R0(dhcp-config)#default-router 192.168.1.1</code></p>
<blockquote>
<p>指定 DHCP 客户端的默认路由器的 IP 地址。 IP 地址应与客户端位于同一子网中。</p>
</blockquote>
</li>
<li><p><code>R0(dhcp-config)#network 192.168.1.0 255.255.255.0</code></p>
<blockquote>
<p>指定 DHCP 地址池的子网网络号和掩码。</p>
</blockquote>
</li>
<li><p><code>R0(config)#ip dhcp excluded-address 192.168.1.1 192.168.1.100</code></p>
<blockquote>
<p>我们可以选100以外的IP address</p>
</blockquote>
</li>
</ul>
</blockquote>
<ul>
<li>PC</li>
</ul>
<blockquote>
<ul>
<li><p><code>C:\&gt; ipconfig/release</code></p>
<blockquote>
<p>显示ip的配置</p>
</blockquote>
</li>
<li><p><code>C:\&gt; ipconfig/renew</code></p>
<blockquote>
<p>刷新ip设置</p>
</blockquote>
</li>
</ul>
</blockquote>
<ul>
<li>router查看dhcp情况</li>
</ul>
<blockquote>
<ul>
<li><code>R0# show ip dhcp pool</code></li>
<li><code>show ip dhcp binding</code></li>
</ul>
</blockquote>
<p>Router# show ip route<br> Codes: C - connected, S - static, * - candidate default </p>
<p>S* 0.0.0.0&#x2F;0 [1&#x2F;0] via 172.1.1.1</p>
<p>C 172.1.1.0&#x2F;30 is directly connected, Serial0</p>
<p>C 170.2.2.0&#x2F;24 is directly connected, TokenRing0 </p>
<p>C 192.77.203.0&#x2F;24 is directly connected, Ethernet0</p>
<h1 id="PPP-with-PAP"><a href="#PPP-with-PAP" class="headerlink" title="PPP with PAP"></a>PPP with PAP</h1><p>PPP 点对点协议，pap的作用是验证用户。</p>
<p><img src="https://i.imgur.com/Nuuim7S.png" alt="PPP with PAP configue"></p>
<p>Command </p>
<blockquote>
<p>set password</p>
<ul>
<li><code>Carlow(config)#enable password class</code></li>
<li><code>Carlow(config)#line console 0</code></li>
<li><code>Carlow(config-line)#password class</code></li>
<li><code>Carlow(config-line)#login</code></li>
</ul>
<p>enable 是特权密码</p>
<p>line console是用户密码</p>
<p>Vey password,用于telnet或ssh,ppp实验用不到</p>
<ul>
<li><code>(config)#line vty 0 4</code></li>
<li><code>(config-line)#pasword cisco</code></li>
<li><code>(config-line)#login</code></li>
</ul>
<p>secret password</p>
<ul>
<li><code>(config-line)#enable secret cisco</code></li>
</ul>
</blockquote>
<ul>
<li>Ppp with chap</li>
</ul>
<p>command</p>
<blockquote>
<ul>
<li><p>第一步设置static route，可根据上面来设置</p>
</li>
<li><p><code>Dublin(config)#username Carlow password cisco</code></p>
</li>
<li><p><code>Carlow(config)#username Dublin password cisco</code></p>
</li>
<li><p><code>Carlow(config)#int s0/1/0</code></p>
</li>
<li><p><code>Carlow(config-if)#encapsulation ppp</code></p>
</li>
<li><p><code>Dublin(config)#int s0/0</code></p>
</li>
<li><p><code>Dublin(config-if)#encapsulation ppp</code></p>
</li>
<li><p><code>Carlow(config)#int s0/1/0</code></p>
</li>
<li><p><code>Carlow(config-if)#ppp authentication pap</code></p>
</li>
<li><p><code>Carlow(config-if)#ppp pap sent-username Dublin pssword cisco</code></p>
</li>
<li><p><code>Dublin(config)#int s0/0</code></p>
</li>
<li><p><code>Dublin(config-if)#ppp authentication pap</code></p>
</li>
<li><p><code>Dublin(config-if)#ppp pap sent-username Carlow pssword cisco</code></p>
</li>
<li><p><code>#copy run start</code></p>
</li>
</ul>
</blockquote>
<p><strong>Checking the options available at each stage</strong>.</p>
<blockquote>
<p><code>Dublin(config)#int s0/0</code></p>
<p><code>Dublin(config-if)#ppp ?</code></p>
<p><code>Dublin(config-if)#ppp pap ?</code></p>
<p><code>Dublin(config-if)#ppp pap sent user-name xxxxx password xxxxxx</code></p>
</blockquote>
<h1 id="PPP-with-chap"><a href="#PPP-with-chap" class="headerlink" title="PPP with chap"></a>PPP with chap</h1><p><img src="https://i.imgur.com/VAK1CsW.png" alt="Chap"></p>
<p>command</p>
<blockquote>
<ul>
<li><p><code>Dublin(config)#username Carlow password cisco</code></p>
</li>
<li><p><code>Dublin(config)#int s0/0</code></p>
</li>
<li><p><code>Dublin(config-if)#encapsulation ppp</code></p>
</li>
<li><p><code>Dublin(config-if)#ppp authentication chap</code></p>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p><code>Carlow(config)#username Dublin password cisco</code></p>
</li>
<li><p><code>Carlow(config)#int s0/1/0</code></p>
</li>
<li><p><code>Carlow(config-if)#encapsulation ppp</code></p>
</li>
<li><p><code>Carlow(config-if)#ppp authentication chap</code></p>
</li>
</ul>
</blockquote>
<h1 id="RIP-configure"><a href="#RIP-configure" class="headerlink" title="RIP configure"></a>RIP configure</h1><p><img src="https://i.imgur.com/qCJvtPd.png" alt="RIP configure"></p>
<p>Command </p>
<p>Loopback address</p>
<blockquote>
<ul>
<li><p><code>C206(config)#int loopback1</code></p>
</li>
<li><p><code>C206(config-if)#ip add 4.4.4.4 255.255.255.255 </code></p>
</li>
<li><p><code>C206(config-if)#do write</code></p>
</li>
</ul>
</blockquote>
<p>rip configure in router</p>
<blockquote>
<ul>
<li><p><code>R1(config)#router rip </code></p>
</li>
<li><p><code>R1(config-router)#version 2 </code></p>
</li>
<li><p><code>R1(config-router)#no auto-summary </code></p>
</li>
<li><p><code>R1(config-router)#network 192.168.12.0 </code></p>
</li>
<li><p><code>R1(config-router)#network 192.168.13.0</code></p>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p><code>R2(config)#router rip </code></p>
</li>
<li><p><code>R2(config-router)#version 2 </code></p>
</li>
<li><p><code>R2(config-router)#no auto-summary </code></p>
</li>
<li><p><code>R2(config-router)#network 192.168.12.0</code></p>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p><code>R3(config)#router rip</code></p>
</li>
<li><p><code>R3(config-router)#version 2</code></p>
</li>
<li><p><code>R3(config-router)#no auto-summary </code></p>
</li>
<li><p><code>R3(config-router)#network 192.168.13.0</code></p>
</li>
</ul>
</blockquote>
<p>Static route</p>
<blockquote>
<ul>
<li><code>R1(config)#ip route 0.0.0.0 0.0.0.0 192.168.14.4</code></li>
<li><code>R1(config)#ip route 0.0.0.0 0.0.0.0 192.168.12.2</code></li>
<li><code>R1(config)#ip route 0.0.0.0 0.0.0.0 192.168.13.3</code></li>
</ul>
</blockquote>
<p>Advertise it in RIP</p>
<blockquote>
<ul>
<li><p><code>R1(config)#router rip</code></p>
</li>
<li><p><code>R1(config-router)#default-information originate</code></p>
</li>
</ul>
</blockquote>
<p>Let’s see what we have on R2 and R3:</p>
<blockquote>
<ul>
<li><code>R2#show ip route rip</code></li>
</ul>
</blockquote>
<p>via 是通过的意思</p>
<ul>
<li><strong>Use debug to observe RIP communications</strong></li>
</ul>
<blockquote>
<ul>
<li><code>R1#debug ip rip</code></li>
<li><code>R1#undebug all</code></li>
</ul>
</blockquote>
<h1 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h1><p><img src="https://i.imgur.com/RCL4XRG.png" alt="OSPF"></p>
<p>disable dns look up</p>
<blockquote>
<p><code>(config)#no ip domain-lookup</code></p>
</blockquote>
<p>message of the day banner</p>
<blockquote>
<p><code>(config)#banner motd E</code></p>
</blockquote>
<p>Command </p>
<blockquote>
<p>Configure the LAN network 172.16.1.16&#x2F;28 to be included in the OSPF updates theat are sent out of R1</p>
<p>enter a process ID of 1 for the process-ID parameter</p>
<ul>
<li><code>R1(config)#router ospf 1</code></li>
</ul>
<p>area ID of 0 for the OSPF <code>area id</code> parameter.</p>
<ul>
<li><code>R1(config-router)#network 172.16.1.16 0.0.0.15 area 0</code></li>
<li><code>R1(config-router)#network 192.168.10.0 0.0.0.3 area 0</code></li>
<li><code>R1(config-router)#network 192.168.10.4 0.0.0.3 area 0</code></li>
</ul>
<p>other router is same witht R1</p>
<p><strong>to know what is the router ID and other information</strong></p>
<ul>
<li><p><code>#show ip protocols</code></p>
</li>
<li><p><code>#show ip ospf</code></p>
</li>
<li><p><code>#show ip ospf interface</code></p>
</li>
</ul>
</blockquote>
<p>set loopback address to change the Router ID</p>
<blockquote>
<ul>
<li><code>(config)#interface loopback 0</code></li>
<li><code>(config-if)#ip address 10.1.1.1 255.255.255.255</code></li>
</ul>
<p>other router is same with R1, R2 is 10.2.2.2 , R3 is 10.3.3.3</p>
</blockquote>
<p><strong>Verify router ID have changed</strong></p>
<blockquote>
<ul>
<li><code>#show ip ospf neighbor</code></li>
</ul>
</blockquote>
<p>use the<code>router-id </code> command to change the router ID on the R1 router.</p>
<blockquote>
<ul>
<li><code>(config)#router ospf 1</code></li>
<li><code>(config-router)#router-id 10.4.4.4</code></li>
<li><code>#clear ip ospf process</code> and type <code>yes</code></li>
</ul>
<p>like r1 want to change router ID to 10.4.4.4 ,which will be changed.</p>
</blockquote>
<p>Remove the configured Router ID with the <code>no router-id</code> command</p>
<blockquote>
<ul>
<li><code>(config)#router ospf 1</code></li>
<li><code>(config-router)#no router-id 10.4.4.4</code></li>
<li><code>#clear ip ospf process</code> and type <code>yes</code></li>
</ul>
</blockquote>
<p>use the <code>show ip route</code> command to know the cost of router</p>
<blockquote>
<ul>
<li><code>#show ip route</code> 65 is the router cost from that way</li>
</ul>
</blockquote>
<p>use the <code>show interfaces serial0/0/0</code> command on the R1 router to view the bandwidth of the serial 0&#x2F;0&#x2F;0 interface.</p>
<blockquote>
<p><code>#show interface serial0/0/0</code></p>
</blockquote>
<p>use the <code>bandwidth </code>command to change the bandwidth of the serial interface of the R1 and R2</p>
<blockquote>
<ul>
<li><code>(config)#interface serial0/0/0</code></li>
<li><code>(config-if)#bandwidth 64</code></li>
</ul>
<p>the cost will be 1564 &#x3D; 10^8&#x2F;64000 bpa</p>
</blockquote>
<p>use the <code>show ip ospf interface</code> to know cost</p>
<p>Use the <code>ip ospf cost</code> command to configrue the ospf cost on the R3 router.</p>
<blockquote>
<p><code>(config)#inertface s0/0/0</code></p>
<p><code>(config-if)#ip ospf cost 1562</code></p>
<p>then use the <code>show ip ospf inerface</code> we can see the cost become 1562.</p>
</blockquote>
<p>configure loopback address</p>
<blockquote>
<p><code>(config)#interface loopback1</code></p>
<p><code>(config-if)#ip address 172.30.1.1 255.255.255.252</code></p>
<p>then config static route of the loopback address</p>
<p><code>(config)#ip route 0.0.0.0 0.0.0.0 loopback1</code></p>
<p>Use the <code>default-information originate</code> command to include static route in the ospf updatas</p>
<p><code>(config)#int ospf 1</code></p>
<p><code>(config-router)#default-information originate</code></p>
<p>Use the<code>show ip route</code> on R2, wen can see the static route on the table by ospf updatas</p>
</blockquote>
<p>Use the <code>auto-cost reference-bandwidth</code> command to comfigrue the reference bandwidth</p>
<blockquote>
<p><code>(config-router)#auto-cost reference-bandwidth 10000</code></p>
<p>Use the <code>show ip route</code> command can see the cost become 65635</p>
</blockquote>
<p>configrue the ospf hello and dead omtervals</p>
<blockquote>
<p><code>(config)#interface serial0/0/0</code></p>
<p><code>(config-if)#ip ospf hello-interval 5</code></p>
<p><code>(config-if)#ip ospf dead-interval 20</code></p>
</blockquote>
<h1 id="password-recovory"><a href="#password-recovory" class="headerlink" title="password recovory"></a>password recovory</h1><p><code>sh ver</code> to see the current value of you’re configuration</p>
<p>Start:</p>
<p>I don’t know my enable password </p>
<ul>
<li><p>turn off router, and turn it back on</p>
</li>
<li><p>ctrl+break on you keyboard when start <code>!!!!!!</code></p>
</li>
<li><p>rommon1&gt;confer 0x2142</p>
</li>
<li><p>rommon2&gt; reset</p>
</li>
<li></li>
<li><p>Router#copy run start</p>
</li>
<li><p>Router# show run config 然后可以看一下以前密码是多少。</p>
</li>
<li><p>Router(config)#enable password 123 可以改密码</p>
</li>
<li><p>Router(config)#config-register 0x2102</p>
</li>
<li><p>Router#copy run start</p>
</li>
<li><p>Rtouter#reload</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer network 2 CA1 and CA2</title>
    <url>/2022/12/19/Computer%20Network/computer%20network%202%20CA1%20and%20CA2/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="CA1"><a href="#CA1" class="headerlink" title="CA1"></a>CA1</h1><h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h2><p><img src="https://i.imgur.com/BrNK9ke.png"></p>
<p><img src="https://i.imgur.com/RBhWKmb.png"></p>
<blockquote>
<p>错误原因：由于111.11.1.18是从router出去的ip dest，而且router没有ARP cache，故它的tar proto 应该是router的 default gatway 而不是 目标地址， 因为router需要先储存pc的地址缓存(cache)。</p>
</blockquote>
<h2 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h2><p><img src="https://i.imgur.com/QUjJL6G.png"></p>
<blockquote>
<p>比特填充（bit stuffing）是指在数据中出现五个连续的1时，多加一个0，这样接收器就不会将数据误认为是标志。<br>数据作为一个标志。</p>
<ul>
<li>Frame sent , 加 0</li>
<li>Frame receive ,减0</li>
</ul>
</blockquote>
<h2 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h2><p><img src="https://i.imgur.com/r6SSttT.png"></p>
<blockquote>
<p>比特填充是指在数据中出现五个连续的1时，多加一个0，这样接收器就不会将数据误认为是标志。<br>数据作为一个标志。</p>
<ul>
<li>Frame sent , 加 0</li>
<li>Frame receive ,减0</li>
</ul>
</blockquote>
<h2 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h2><p><img src="https://i.imgur.com/3CgCmis.png"></p>
<blockquote>
<p><img src="https://i.imgur.com/7C15Iu7.png"></p>
<p><img src="https://i.imgur.com/SK5VAJ2.png"></p>
<p><img src="https://i.imgur.com/xLiXSC7.png"></p>
<ul>
<li>一眼顶针，随堂小测试，理塘速通王</li>
<li>Data from upper layer, <strong>stuffed</strong>.</li>
<li>总而言之，7E是flag，replaced with two bytes, 7D + 5E。7D 是ESC(escape), replace with two bytes, 7D + 5D.</li>
</ul>
</blockquote>
<h2 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h2><p><img src="https://i.imgur.com/OEkOqCO.png"></p>
<blockquote>
<p><img src="https://i.imgur.com/6LWjMp0.png"></p>
<ul>
<li><p>Data to upper layer, unstuffed.</p>
</li>
<li><p>7D 5E改成 7E, 7D 5D 改成7D</p>
</li>
</ul>
</blockquote>
<h2 id="Q6"><a href="#Q6" class="headerlink" title="Q6"></a>Q6</h2><p><img src="https://i.imgur.com/qIFjbod.png"></p>
<h2 id="Q7"><a href="#Q7" class="headerlink" title="Q7"></a>Q7</h2><p><img src="https://i.imgur.com/t6KxRiK.png"></p>
<h2 id="Q8"><a href="#Q8" class="headerlink" title="Q8"></a>Q8</h2><p><img src="https://i.imgur.com/e88UQS3.png"></p>
<blockquote>
<p><img src="https://i.imgur.com/YVj34oR.png"></p>
</blockquote>
<h2 id="Q9"><a href="#Q9" class="headerlink" title="Q9"></a>Q9</h2><p><img src="https://i.imgur.com/bmdFeIi.png"></p>
<blockquote>
<p><img src="https://i.imgur.com/keRKUFG.png"></p>
</blockquote>
<h2 id="Q10"><a href="#Q10" class="headerlink" title="Q10"></a>Q10</h2><p><img src="https://i.imgur.com/XIFk2fu.png"></p>
<blockquote>
<p>EGP(<a href="https://en.wikipedia.org/wiki/Exterior_gateway_protocol">exterior gateway protocol</a>)外部网关协议，BGP是边界网关协议</p>
<p>EGP：外部<strong>网关协议</strong>是一种<a href="https://en.wikipedia.org/wiki/IP_routing">IP</a> <a href="https://en.wikipedia.org/wiki/Routing_protocol">路由协议</a>，用于在<a href="https://en.wikipedia.org/wiki/Autonomous_system_(Internet)">自治系统之间交换</a><a href="https://en.wikipedia.org/wiki/Routing">路由</a>（routing between different AS’s）信息。</p>
</blockquote>
<h2 id="Q11"><a href="#Q11" class="headerlink" title="Q11"></a>Q11</h2><p><img src="https://i.imgur.com/MyRRyoq.png"></p>
<blockquote>
<p>32-bit ID 也就是Router ID(RID), 它类似于IPv4的类型，一共是32-bit.</p>
<p><img src="https://i.imgur.com/z6j1meb.png"></p>
<blockquote>
<ol>
<li><p>防止在被动接口发送hello 消息</p>
</li>
<li><p>Router 在被动接口上没有任何关系</p>
</li>
<li><p>防止在被动接口上发送和接受路由的更新。</p>
</li>
</ol>
</blockquote>
</blockquote>
<h2 id="Q12"><a href="#Q12" class="headerlink" title="Q12"></a>Q12</h2><p><img src="https://i.imgur.com/IXaHuQA.png"></p>
<blockquote>
<p>Every time a hello packet is received the dead timer (40 seconds by default) is reset back to 40 sec.</p>
<p><img src="https://i.imgur.com/I38Ceez.png"></p>
<ul>
<li>DR 和 BDR不是在PtP 上产生的,2 way需要选择哪个router initiate the exchange ，This is done in the exstart state(在exstart状态下完成)。</li>
</ul>
<p>Become neigbour , 2-way是在PtP 上发生的。</p>
</blockquote>
<h2 id="Q13"><a href="#Q13" class="headerlink" title="Q13"></a>Q13</h2><p><img src="https://i.imgur.com/bpMrlab.png"></p>
<blockquote>
<ul>
<li><p>Default priority for an OSPF interface is <strong>1</strong></p>
</li>
<li><p>all router have the same information by LSDB</p>
</li>
</ul>
<p><img src="https://i.imgur.com/VrTNteR.png"></p>
</blockquote>
<h2 id="Q14"><a href="#Q14" class="headerlink" title="Q14"></a>Q14</h2><p><img src="https://i.imgur.com/GH7Tk3B.png"></p>
<blockquote>
<p><img src="https://i.imgur.com/eWKFtfd.png"></p>
<ul>
<li>Default reference bandwidth is 100 Mb&#x2F;s</li>
</ul>
</blockquote>
<h2 id="Q15"><a href="#Q15" class="headerlink" title="Q15"></a>Q15</h2><p><img src="https://i.imgur.com/oLYIGxs.png"></p>
<blockquote>
<ul>
<li><p>一个合适的area ID是 0.0.0.0, area id的骨干一定是0，没有为什么</p>
</li>
<li><p>In the <em>Loading</em> state, a router requests the most recent link-state advertisements (LSAs) from its neighbor discovered in the previous state.</p>
<blockquote>
<p>在<em>加载</em>状态下，路由器要求从上一个状态下发现的邻居那里获得最新的链接状态广告（LSAs）。</p>
<p>也就是说一旦有新邻居了，就要通过LSAs来更新新的路由。</p>
</blockquote>
</li>
</ul>
</blockquote>
<h2 id="Q16"><a href="#Q16" class="headerlink" title="Q16"></a>Q16</h2><p><img src="https://i.imgur.com/QKqHb7u.png"></p>
<blockquote>
<p>HDLC 有 flow control and error control.</p>
<p>PPP is byte stuffing, HDLC is bit stuffing.</p>
</blockquote>
<h2 id="Q17"><a href="#Q17" class="headerlink" title="Q17"></a>Q17</h2><p><img src="https://i.imgur.com/V3MGoNm.png"></p>
<blockquote>
<p><img src="https://i.imgur.com/beJjxLM.png"></p>
</blockquote>
<h2 id="Q18"><a href="#Q18" class="headerlink" title="Q18"></a>Q18</h2><p><img src="https://i.imgur.com/eYqThoe.png"></p>
<blockquote>
<p><img src="https://i.imgur.com/X6YZLMW.png"></p>
</blockquote>
<h2 id="Q19"><a href="#Q19" class="headerlink" title="Q19"></a>Q19</h2><p><img src="https://i.imgur.com/kQglYwR.png"></p>
<blockquote>
<p><a href="https://www.techtarget.com/searchnetworking/definition/Link-Control-Protocol">LCP</a>,within PPP, Link Control Protocol (LCP) establishes, configures and tests data link internet connections.</p>
</blockquote>
<h2 id="Q20"><a href="#Q20" class="headerlink" title="Q20"></a>Q20</h2><p><img src="https://i.imgur.com/h6diK6q.png"></p>
<blockquote>
<ul>
<li><img src="https://i.imgur.com/0xXfX52.png"></li>
<li>we can use rip a d ospf also still can use static routes.</li>
</ul>
</blockquote>
<h2 id="Q21"><a href="#Q21" class="headerlink" title="Q21"></a>Q21</h2><p><img src="https://i.imgur.com/u6GdcqX.png"></p>
<blockquote>
<ul>
<li><p>Split Horizon: This is one of the methods used by distance vector routing protocols to avoid routing loops. The principle is simple – <strong>a router will not advertise a route back onto the interface from which it was learned</strong>. Split horizon is enabled on interfaces by default.</p>
<blockquote>
<p>水平分割的规则是路由器不会将路由通告回它从中学习的接口。</p>
</blockquote>
</li>
<li><p>Poison Reverse: when the routers learn that a network has an unreachable metric through route poisoning (Hop count 16 for RIP), it breaks this rule and notifies adjacent routers, regardless of which interfaces the router initially learned them. This is done so that the downed network can propagate across the network as quickly as possible.</p>
<blockquote>
<p>当路由器通过路由中毒（RIP 的跳数为 16）得知网络具有无法访问的度量时，它会打破此规则并通知相邻的路由器，而不管路由器最初学习的是哪个接口。这样做是为了让宕机的网络可以尽快在网络中传播。</p>
</blockquote>
</li>
</ul>
</blockquote>
<h2 id="Q22"><a href="#Q22" class="headerlink" title="Q22"></a>Q22</h2><p><img src="https://i.imgur.com/FMQXq8E.png"></p>
<blockquote>
<p>RIP v1 uses Broadcast for its updates.</p>
<p>RIP v2 uses Multicast for its updates.</p>
</blockquote>
<h1 id="CA2"><a href="#CA2" class="headerlink" title="CA2"></a>CA2</h1><h2 id="Q1-1"><a href="#Q1-1" class="headerlink" title="Q1"></a>Q1</h2><p><img src="https://i.imgur.com/w7P95mo.png"></p>
<h2 id="Q2-1"><a href="#Q2-1" class="headerlink" title="Q2"></a>Q2</h2><p><img src="https://i.imgur.com/Sjx7QKb.png"></p>
<h2 id="Q3-1"><a href="#Q3-1" class="headerlink" title="Q3"></a>Q3</h2><p><img src="https://i.imgur.com/Ptmm8H2.png"></p>
<h2 id="Q4-1"><a href="#Q4-1" class="headerlink" title="Q4"></a>Q4</h2><p><img src="https://i.imgur.com/kMItO0q.png"></p>
<blockquote>
<p><a href="https://jessyhhh.github.io/2022/12/07/Computer%20Network/IPv6-summary/#4-Prefix-Terminology">Prefix Terminology</a> &#x2F;48 的size 应该是大公司或者大的组织。</p>
</blockquote>
<h2 id="Q5-1"><a href="#Q5-1" class="headerlink" title="Q5"></a>Q5</h2><p><img src="https://i.imgur.com/wra7ySt.png"></p>
<blockquote>
<p><a href="https://jessyhhh.github.io/2022/12/07/Computer%20Network/IPv6-summary/#RA-Flags">RA Flags</a> stateless should set M &#x3D;0, O&#x3D;1.</p>
</blockquote>
<h2 id="Q6-1"><a href="#Q6-1" class="headerlink" title="Q6"></a>Q6</h2><p><img src="https://i.imgur.com/3lpnp4Q.png"></p>
<blockquote>
<p><a href="https://jessyhhh.github.io/2022/12/07/Computer%20Network/IPv6-summary/#LLA">IPv6 LLA</a></p>
<ul>
<li><p>一旦为接口分配了IPv6地址（或启用了IPv6），操作系统就会自动分配一个LLA。</p>
</li>
<li><p>一旦GUA被分配到接口，LLA就会自动使用EUI-64生成。</p>
</li>
</ul>
</blockquote>
<h2 id="Q7-1"><a href="#Q7-1" class="headerlink" title="Q7"></a>Q7</h2><p><img src="https://i.imgur.com/2cpsH7l.png"></p>
<blockquote>
<p><a href="https://jessyhhh.github.io/2022/12/07/Computer%20Network/IPv6-summary/#1-Address">Address</a></p>
<p><img src="https://i.imgur.com/UrMY3IS.png"></p>
</blockquote>
<h2 id="Q8-1"><a href="#Q8-1" class="headerlink" title="Q8"></a>Q8</h2><p><img src="https://i.imgur.com/aD3Sgbv.png"></p>
<blockquote>
<p>Successive 是连续的，不是成功的。</p>
</blockquote>
<h2 id="Q9-1"><a href="#Q9-1" class="headerlink" title="Q9"></a>Q9</h2><p><img src="https://i.imgur.com/bmBVN6R.png"></p>
<blockquote>
<p><a href="https://jessyhhh.github.io/2022/12/07/Computer%20Network/IPv6-summary/#3-Cisco-Routes">Ipv6 cisco</a></p>
</blockquote>
<h2 id="Q10-1"><a href="#Q10-1" class="headerlink" title="Q10"></a>Q10</h2><p><img src="https://i.imgur.com/xL8aCLe.png"></p>
<blockquote>
<p>LLA: <code>fe80::c2f3:04ff:fe9b:c08a</code></p>
</blockquote>
<h2 id="Q11-1"><a href="#Q11-1" class="headerlink" title="Q11"></a>Q11</h2><p><img src="https://i.imgur.com/yEk2gQc.png"></p>
<blockquote>
<p>SNMA: <code>ff02::1:ff66:c022</code></p>
<p><code>ff02::1</code>这个是一定存在的， 这代表着all nodes on the link local</p>
</blockquote>
<h2 id="Q12-1"><a href="#Q12-1" class="headerlink" title="Q12"></a>Q12</h2><p><img src="https://i.imgur.com/1qaWQck.png"></p>
<blockquote>
<p><img src="https://i.imgur.com/VoS2JZP.png"></p>
</blockquote>
<h2 id="Q13-1"><a href="#Q13-1" class="headerlink" title="Q13"></a>Q13</h2><p><img src="https://i.imgur.com/SQ1lHWC.png"></p>
<blockquote>
<p><img src="https://i.imgur.com/eRRTbzA.png"></p>
</blockquote>
<h2 id="Q14-1"><a href="#Q14-1" class="headerlink" title="Q14"></a>Q14</h2><p><img src="https://i.imgur.com/g7bVLTk.png"></p>
<h2 id="Q15-1"><a href="#Q15-1" class="headerlink" title="Q15"></a>Q15</h2><p><img src="https://i.imgur.com/dOC4hlI.png"></p>
<h2 id="Q16-1"><a href="#Q16-1" class="headerlink" title="Q16"></a>Q16</h2><p><img src="https://i.imgur.com/1kIF4g6.png"></p>
<h2 id="Q17-1"><a href="#Q17-1" class="headerlink" title="Q17"></a>Q17</h2><p><img src="https://i.imgur.com/zeSCfsS.png"></p>
<h2 id="Q18-1"><a href="#Q18-1" class="headerlink" title="Q18"></a>Q18</h2><p><img src="https://i.imgur.com/27M5zCS.png"></p>
<h2 id="Q19-1"><a href="#Q19-1" class="headerlink" title="Q19"></a>Q19</h2><p><img src="https://i.imgur.com/8q7iEOs.png"></p>
<h2 id="Q20-1"><a href="#Q20-1" class="headerlink" title="Q20"></a>Q20</h2><p><img src="https://i.imgur.com/FzsQ0dB.png"></p>
<h2 id="Q21-1"><a href="#Q21-1" class="headerlink" title="Q21"></a>Q21</h2><p><img src="https://i.imgur.com/U3ZYvNO.png"></p>
<h2 id="Q22-1"><a href="#Q22-1" class="headerlink" title="Q22"></a>Q22</h2><p><img src="https://i.imgur.com/8r2V3xf.png"></p>
<h2 id="Q23"><a href="#Q23" class="headerlink" title="Q23"></a>Q23</h2><p><img src="https://i.imgur.com/l5yVaQK.png"></p>
<h2 id="Q24"><a href="#Q24" class="headerlink" title="Q24"></a>Q24</h2><p><img src="https://i.imgur.com/XWCP5yl.png"></p>
<h2 id="Q25"><a href="#Q25" class="headerlink" title="Q25"></a>Q25</h2><p><img src="https://i.imgur.com/mjNv3FI.png"></p>
<h2 id="Q26"><a href="#Q26" class="headerlink" title="Q26"></a>Q26</h2><p><img src="https://i.imgur.com/yjz6qB7.png"></p>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>RIP</title>
    <url>/2022/12/20/Computer%20Network/RIP/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>RIP is Routing Loop protocol. 它会自动更新路由，不需要我们手动配置static route。</p>
<h1 id="operation"><a href="#operation" class="headerlink" title="operation"></a>operation</h1><p><img src="https://i.imgur.com/UKKeV3I.png"></p>
<p>此时有三个router，每个router，分别连接着其他router，interface是之间线路的网络号。</p>
<p>三个router都直接连接着旁边的网络号，我们可以看到，如R1有两个网络号是直连的，分别是192.168.1.0 and 192.168.2.0, 然后它的metric是0，metric是一个专有名词，如果R1想知道R2和R3的网络号，就得通过advertisement 来update。</p>
<p><img src="https://i.imgur.com/KFa0MAu.png"></p>
<p>像R2从R1的advertise中update一个它不知道的网络号，然后metric+1，这个叫做hop，距离多远就有几条，如果R2向R3更新的话，192.168.1.0metric就是2，2 hop</p>
<p><img src="https://i.imgur.com/940k9t5.png"></p>
<p>这样就算全部更新完了，路由器是同时更新的，速度很快。</p>
<h1 id="故障（goes-down）"><a href="#故障（goes-down）" class="headerlink" title="故障（goes down）"></a>故障（goes down）</h1><p><img src="https://i.imgur.com/Jkoqnf7.png"></p>
<p>一个端口发生故障后，如果R1和R2不知道故障，它会陷入一种让metric无限大的情况，R3 会将192.168.4.0 metric更新到2，然后R2发现R3更新了就会将192.168.4.0到metric 更新到3，R1也会看到R2更新而更新，然后就无限循环了，metric就无限大了</p>
<p><img src="https://i.imgur.com/sjpgsV8.png"></p>
<p><strong>这时候有两个方法</strong></p>
<ol>
<li><strong>Split Horizon</strong></li>
<li><strong>Rout Poisoning</strong></li>
</ol>
<h2 id="Split-Horizon"><a href="#Split-Horizon" class="headerlink" title="Split Horizon"></a>Split Horizon</h2><p><img src="https://i.imgur.com/roacZBe.png"></p>
<p>注意：interface是默认开启Split Horizon。</p>
<p><strong>它的意思是R2 从G1接口updata时候不会发送广播从R3传过来的192.168.3.0 and 192.168.4.0,只发送R3没有的 192.168.2.0 and 192.168.1.0，这就避免了循环。</strong></p>
<p><img src="https://i.imgur.com/RKM4hqO.png"></p>
<p><strong>R3从G0接口updata发送广播只发送192.168.4.0 和 192.168.3.0， 为什么不发送 192.168.1.0 和 192.168.2.0呢，因为已经从G0接口知道了这两个网络号，不需要再广播一次，之后只会广播自己直连的接口看看有没有新的消息，如故障之类</strong></p>
<p><strong>如果R3的G1接口关闭了，则就只advertised 192.168.3.0,而不会 广播 192.168.4.0，其他路由器发现180s后还没收到192.168.4.0的消息就会知道该接口关闭了，删除该接口在自己的routing table里，后面会详细介绍Routing 的时间机制。</strong></p>
<ul>
<li><p>缺点是收敛比较慢，也就是路由不能马上知道消息，得等等。</p>
</li>
<li><p>优点是不需要很大的流量。</p>
</li>
</ul>
<h2 id="Route-Poisoning"><a href="#Route-Poisoning" class="headerlink" title="Route Poisoning"></a>Route Poisoning</h2><p><img src="https://i.imgur.com/3XMQgXt.png"></p>
<p><strong>R3路由如果关闭G1的话，直接将自己路由表的192.168.4.0 metric hop count 16，16hop则是不可抵达的，</strong></p>
<p><strong>然后R3通过G0 updata 广播给R2， R2知道R3的路由表的192.168.4.0的metric是16后，直接删除192.168.4.0在自己的路由表中</strong></p>
<ul>
<li>优点是收敛快，但是需要的流量很大。</li>
</ul>
<h2 id="Split-Horizon-是可以和-Route-Poisoning一起用的"><a href="#Split-Horizon-是可以和-Route-Poisoning一起用的" class="headerlink" title="Split Horizon 是可以和 Route Poisoning一起用的"></a>Split Horizon 是可以和 Route Poisoning一起用的</h2><p><img src="https://i.imgur.com/9GknFVj.png"></p>
<h1 id="RIP-Counter"><a href="#RIP-Counter" class="headerlink" title="RIP Counter"></a>RIP Counter</h1><p><img src="https://i.imgur.com/mGEmWCF.png"></p>
<p><img src="https://i.imgur.com/jErD6dE.png"></p>
<p>由上图我们可以知道RIP计时器</p>
<blockquote>
<p>Updata timer(更新时间): 默认30s， 可以设置在10-60s之间，作用是广播和更新</p>
<p>Invalid timer(无效值): 默认时间180s</p>
<p>Hold-down Timer(暂停时间): 默认180s</p>
<p>Flush Timer(冲刷时间): 默认240s</p>
</blockquote>
<ul>
<li>过程</li>
</ul>
<p><img src="https://i.imgur.com/UYoD5Td.png"></p>
<p>假设我们现在有4个路由</p>
<p><img src="https://i.imgur.com/rxJ15rQ.png"></p>
<p>现在R3有一个端口故障了，Posioning R3，metric 16，直接updata广播给其他路由。</p>
<p>R1 R2 and R3 updata every 30s.</p>
<p>Router接受到3.3.3.0 metric16后，router开始倒计时180s。</p>
<p>180s后将会删除该路由。</p>
<p><img src="https://i.imgur.com/rqKMwq3.png"></p>
<p>接受到metric16后，认为3.3.3.0的端口已经关闭，但是还没删除，得等180s。R2正在广播3.0.0.0 metric1，R1广播metric 2，我们需要防止R4广播3.0.0.0 metric 3，防止无限循环。这个时候我们需要使用我们的Hold time timer。当R3有一个端口关闭了或故障了，就在180s后进入了holdtime时间，其他路由将不会接受这个路由器广播的路由。</p>
<p><img src="https://i.imgur.com/GVm3E7t.png"></p>
<p>hold time timer结束后，就要重新updata和删除该3.3.3.0的路由了。</p>
<p><img src="https://i.imgur.com/ob2xc6d.png"></p>
<p>hold time timer结束后，R4通过F0&#x2F;0口知道了23.0.0.0的metric为1，然后就替换掉之前的23.0.0.0 rip。</p>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>ppp</title>
    <url>/2022/12/20/Computer%20Network/ppp/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>HDLC是点对点和多点配置的通用协议，但是点对点访问最常用的协议就是point-to-point protocol(ppp)，ppp 是一种面向字节(Byte-oriented)的协议。</p>
<p>下图是一个主机连接路由器</p>
<p><img src="https://i.imgur.com/idekGbM.png"></p>
<h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><h2 id="Frame-format"><a href="#Frame-format" class="headerlink" title="Frame format"></a>Frame format</h2><p><img src="https://i.imgur.com/7qO54ku.png"></p>
<ul>
<li><strong>下面一个多路复用的例子，这个多路意思是网络层(Network layer)的各种协议。</strong></li>
</ul>
<p><img src="https://i.imgur.com/uAjOQtZ.png"></p>
<ol>
<li>数据是从网络层(Network layer)来到数据链层(data link layer)。</li>
<li>在数据链层(data link layer)加上各种协议组成一个payload。</li>
</ol>
<h2 id="Byte-Stuffing"><a href="#Byte-Stuffing" class="headerlink" title="Byte-Stuffing"></a>Byte-Stuffing</h2><p><strong>我们知道PPP是一个字节协议，所以在数据从网络层加封到数据层，或是从物理层解封到数据链层，我们需要填充7D字节</strong></p>
<p><code>7D: 01111101</code></p>
<ul>
<li>我们先看一个图表来详细知道其过程</li>
</ul>
<p><img src="https://i.imgur.com/uJVWYZy.png"></p>
<p>stuffed是填充，unstuffed就是解封。不懂每个层次直接的关系可以回去结构篇看看，总而言之就是通过每个层就需要加封或解封，如物理层frame到数据链层就需要解封。</p>
<ul>
<li>这个过程跟HDLC的是一样的，有区别的是它是替代两个字节(byte)，HDLC只是一个bit.</li>
</ul>
<p><img src="https://i.imgur.com/PTIdk1n.png"></p>
<p>仔细看深绿色的两组，一组是7D 5D 它的加封前是7D， 另一组是7D 5E 它加封前是7E。这就是替换两个字节的意思。</p>
<blockquote>
<p><code>Flag = 0x7E</code></p>
<p><code>ESC = 0x7D</code> ESC &#x3D; control escape</p>
</blockquote>
<h2 id="Transition-Phases"><a href="#Transition-Phases" class="headerlink" title="Transition Phases"></a>Transition Phases</h2><p><img src="https://i.imgur.com/wWhQ1Fl.png"></p>
<p>根据上图的流程，我们主要注重Authentication流程和Network to Open的configuration流程。</p>
<ul>
<li>Example</li>
</ul>
<p><img src="https://i.imgur.com/4iLQguv.png"></p>
<p><img src="https://i.imgur.com/K7Kt7MQ.png"></p>
<p>从这里我们可以知道LCP(Link Control protocol)在ppp里非常重要。</p>
<p>什么是LCP呢</p>
<h1 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h1><p><img src="https://i.imgur.com/c8gaqKN.png"></p>
<p>协议的类型，和它具体的协议和代码。</p>
<h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p><img src="https://i.imgur.com/zTgnz60.png"></p>
<ul>
<li>payload区等最大容量默认1500</li>
<li>默认没有验证协议</li>
<li>默认协议区没有压缩</li>
<li>默认地址区和控制区不压缩</li>
</ul>
<h2 id="LCP"><a href="#LCP" class="headerlink" title="LCP"></a>LCP</h2><p><img src="https://i.imgur.com/yyCzQIL.png"></p>
<p>上图是一个LCP的frame format结构。</p>
<p><strong>结合上面的流程，我们可以给出每个数据包的意思</strong></p>
<p><img src="https://i.imgur.com/QaUhsMi.png"></p>
<blockquote>
<p><strong>A电脑想向B电脑传数据</strong></p>
<ol>
<li>A需要发送Configure-request 要求给B电脑</li>
<li>B回应一个ack给A（只有回应了ack才能传数据，其他的不行），当然有可能不是ack，可能是nak或reject。</li>
<li>如果是nak说明B觉得A的有些数据不能接收。</li>
<li>reject就是B觉得A的数据不可识别或不确定有错误等，所以直接拒绝。</li>
</ol>
<p>下图是例子</p>
</blockquote>
<p><img src="https://i.imgur.com/gLw2b16.png"></p>
<h2 id="PAP"><a href="#PAP" class="headerlink" title="PAP"></a>PAP</h2><p>PAP(Password authentication protocol)</p>
<p>验证的协议，只是ppp通常不会用，下面将告诉你为什么。</p>
<p><img src="https://i.imgur.com/4p710HK.png"></p>
<ol>
<li><p>user向发送data给user，但是需要pap验证</p>
</li>
<li><p>Authenticate-request的frame里需要你的password给system</p>
</li>
<li><p>正确则ack，不正确则nak</p>
</li>
</ol>
<p><strong>为什么现在不用pap，因为容易被别人截胡我的密码了，不安全。</strong></p>
<h2 id="CHAP"><a href="#CHAP" class="headerlink" title="CHAP"></a>CHAP</h2><p>CHAP(Challenge-Handshake Authentication Protocol)</p>
<p><img src="https://i.imgur.com/57tXc8J.png"></p>
<p><strong>可以发现和pap不同的是CHAP多了个Challenge和response的流程。</strong></p>
<p>这个流程其实是组成HASHing密码的过程。</p>
<p>下图是一个例子，我们可以知道大小写不一样，Hash密码完全不一样，保证了随机性和安全性。</p>
<p><img src="https://i.imgur.com/5mIGGc8.png"></p>
<ol>
<li>Challenge是system发过来的一串随机值，然后user将密码和challenge的随机值结合起来。</li>
<li>respond challenge和password结合的fixed size Hash，这个system可以验证密码和随机值。</li>
<li>成功了success, 失败 failure</li>
<li>别人截胡了只会看到一串随机数，不知道密码，安全的很。</li>
</ol>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>OSPF</title>
    <url>/2022/12/20/Computer%20Network/OSPF/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul>
<li><p>OSPF stands for Open shortest Path First</p>
<blockquote>
<p>OSPF是开放最短路径优先的意思。</p>
</blockquote>
</li>
<li><p>Open standard protocol</p>
<blockquote>
<p>开放标准协议</p>
</blockquote>
</li>
<li><p>It is a link State protocol</p>
<blockquote>
<p>它是链路状态协议</p>
</blockquote>
</li>
<li><p>It uses a Shortest Path First (SPF) algorithm (Dijkistra algorithm)</p>
<blockquote>
<p>它使用最短路径优先（SPF）算法（Dijkistra算法）。</p>
</blockquote>
</li>
<li><p>Metric is cost (reference BW [100Mb&#x2F;s] &#x2F; interface BW)</p>
<blockquote>
<p>指标是成本（参考BW[100Mb&#x2F;s]&#x2F;接口BW）。</p>
</blockquote>
</li>
<li><p>Administrative distance is 110</p>
<blockquote>
<p>管理距离为110</p>
</blockquote>
</li>
<li><p>It is a classless routing algorithm</p>
<blockquote>
<p>它是一种无类别的路由算法</p>
</blockquote>
</li>
<li><p>It supports equal cost load balancing</p>
<blockquote>
<p>它支持同等成本的负载平衡</p>
</blockquote>
</li>
<li><p>Introduces the concept of Area’s (reduce the amount of Link State Advertisements [LSA’s]</p>
<blockquote>
<p>引入区域的概念（减少链接状态广告[LSA]的数量</p>
</blockquote>
</li>
<li><p>All routers have the same information</p>
<blockquote>
<p>所以路由都有相同的信息</p>
</blockquote>
</li>
<li><p>Updates are sent using 224.0.0.5</p>
<blockquote>
<p>使用224.0.0.5发送更新。</p>
</blockquote>
</li>
</ul>
<p><img src="https://i.imgur.com/2K6Fg7M.png" alt="动态路由协议类型"></p>
<ul>
<li><p>IGP(Interior Gateway Protocols)</p>
</li>
<li><p>EGP(<a href="https://en.wikipedia.org/wiki/Exterior_gateway_protocol">exterior gateway protocol</a>)</p>
</li>
</ul>
<h1 id="专有名词"><a href="#专有名词" class="headerlink" title="专有名词"></a>专有名词</h1><h2 id="Process-ID"><a href="#Process-ID" class="headerlink" title="Process ID"></a>Process ID</h2><p><img src="https://i.imgur.com/KtAuMvh.png"></p>
<blockquote>
<p>router ospf process-id命令是任何Cisco IOS OSPF配置的开始（16位值1-65,535）。它用于创建或修改一个现有的OSPF路由进程，并使用户进入OSPF路由器配置模式。进程ID - 允许一个路由器运行OSPF的多个实例。(例如，连接到3个不同客户的路由器）这些OSPF进程ID只在本地有意义，不必从一个OSPF设备到另一个匹配.</p>
</blockquote>
<h2 id="Router-ID-RID"><a href="#Router-ID-RID" class="headerlink" title="Router ID(RID)"></a>Router ID(RID)</h2><p><img src="https://i.imgur.com/DqUeS9C.png"></p>
<blockquote>
<p>router-id命令用来静态配置OSPF的路由器id；这个路由器id（RID）用来向OSPF网络中的其他设备识别OSPF设备。对于每个OSPF设备来说，这个路由器ID必须是唯一的；如果没有配置路由器ID，它将根据以下顺序被选择：最高的环回接口，最高的活动（向上&#x2F;向上）物理接口。配置环回接口或使用router-id命令在OSPF实施中非常普遍，因为它使特定的OSPF设备的识别更容易。</p>
</blockquote>
<h2 id="Router-Priority"><a href="#Router-Priority" class="headerlink" title="Router Priority"></a>Router Priority</h2><p><img src="https://i.imgur.com/6xOjbUt.png"></p>
<blockquote>
<p>在多接入网络中，具有最高优先级值的路由器被选为DR，作为LSA交换的中心点。优先级命令被分配到一个接口上。OSPF接口的默认优先级是1，其范围是0到255。0意味着该接口不参与DR的选举。</p>
</blockquote>
<blockquote>
<p>具有最高OSPF优先级的路由器将成为DR。默认情况下，所有路由器的优先级都是1。<br>如果出现平局，具有最高路由器ID的路由器赢得选举。具有第二高OSPF优先级或路由器ID的路由器将成为一个BDR。</p>
</blockquote>
<h2 id="AREA-ID"><a href="#AREA-ID" class="headerlink" title="AREA ID"></a>AREA ID</h2><p><img src="https://i.imgur.com/MhNkKYp.png"></p>
<blockquote>
<p>在OSPF中，一个单一的自治系统（AS）可以被划分为较小的组，称为区域。这减少了网络上发送的链路状态广告（LSA）和其他OSPF开销流量的数量，并减少了每个路由器必须维护的拓扑数据库的大小。</p>
</blockquote>
<h1 id="Processing"><a href="#Processing" class="headerlink" title="Processing"></a>Processing</h1><h2 id="三个大流程（宏观）"><a href="#三个大流程（宏观）" class="headerlink" title="三个大流程（宏观）"></a>三个大流程（宏观）</h2><ol>
<li><p><strong>Become Neighbours</strong> – Routers running OSPF on the same segment form neighbour relationships.</p>
<blockquote>
<p><strong>成为邻居</strong> - 同一网段上运行OSPF的路由器形成邻居关系。</p>
</blockquote>
<blockquote>
<p>[PtP segment – Master&#x2F;Slave, Broadcast segment - DR&#x2F;BDR&#x2F;Drother.]</p>
<p>有Master&#x2F;Slave - PPP</p>
</blockquote>
</li>
<li><p><strong>Exchange database information</strong> – the neighbour routers exchange their LSDB data with each other using LSA’s.</p>
<blockquote>
<p>**交换数据库信息-**邻居路由器和其他路由器使用LSA‘s(link-state advertisements)交换他们的LSDB(Link states databse)数据</p>
</blockquote>
</li>
<li><p><strong>Choose the best routes</strong> – each router adds the best routes to its routing table based on the results of running the SPF algorithm on the LSDB</p>
<blockquote>
<p><strong>选择最好的路由</strong>-每个路由器根据在LSDB上运行SPF算法的结果，向其路由表添加最佳路由。</p>
</blockquote>
</li>
</ol>
<h2 id="7大步骤（微观）"><a href="#7大步骤（微观）" class="headerlink" title="7大步骤（微观）"></a>7大步骤（微观）</h2><ul>
<li><p><strong>Down</strong> (No info has been exchanged or retained)</p>
<blockquote>
<p><strong>Down</strong> (没有交换或保留信息)</p>
</blockquote>
</li>
<li><p><strong>Init</strong> (A hello packet has been received, but hasn’t gone to two way yet) )</p>
<blockquote>
<p><strong>init</strong> (已收到一个hello数据包，但还没有进入双路) )</p>
</blockquote>
</li>
<li><p><strong>Two way</strong> (establishment of a bidirectional conversation between two routers)</p>
<blockquote>
<p><strong>双向</strong>（在两个路由器之间建立双向对话）。</p>
</blockquote>
</li>
<li><p><strong>Exstart</strong> (first step of adjacency, decide on Master Slave)</p>
<blockquote>
<p><strong>Exstart</strong>（邻接的第一步，决定主从）。</p>
</blockquote>
</li>
<li><p><strong>Exchange</strong> (exchange LSDB’s )</p>
<blockquote>
<p><strong>Exchange</strong>（交换LSDB的）。</p>
</blockquote>
</li>
<li><p><strong>Loading</strong> (requests the most recent link-state advertisements (LSA’s) from its neighbour)</p>
<blockquote>
<p><strong>Loading</strong>（请求其邻居提供最新的链接状态广告（LSA））。</p>
</blockquote>
</li>
<li><p><strong>Full</strong> (when the routers are fully adjacent, and the state appears in all router- and network-LSA’s)</p>
<blockquote>
<p><strong>Full</strong>（当路由器完全相邻，并且该状态出现在所有路由器和网络LSA中时）</p>
</blockquote>
</li>
</ul>
<h2 id="Proceesing-detail"><a href="#Proceesing-detail" class="headerlink" title="Proceesing detail"></a>Proceesing detail</h2><h3 id="Become-neighbour"><a href="#Become-neighbour" class="headerlink" title="Become neighbour"></a>Become neighbour</h3><ul>
<li>R1发送Hello message 给R2</li>
</ul>
<p><img src="https://i.imgur.com/7kgheqW.png"></p>
<ul>
<li>建立邻居关系要满足的要求</li>
</ul>
<p><img src="https://i.imgur.com/EyOpxNf.png"></p>
<blockquote>
<ol>
<li>Area ID</li>
<li>Subnet</li>
<li>Hello and Dead interval</li>
<li>Authentication</li>
<li>Stub area flag</li>
<li>Unique router ID(RID)</li>
</ol>
</blockquote>
<p><strong>Hellow message Content</strong></p>
<p><img src="https://i.imgur.com/rPQWbcJ.png"></p>
<p>Hellow timer 默认10s</p>
<p>Dead interval默认40s</p>
<ul>
<li>R2 发送Hello包含neighbor ID给R1，并R2进入初始化状态</li>
</ul>
<p><img src="https://i.imgur.com/1INRGDy.png"></p>
<ul>
<li>R1直接从Down转变成2-way，因为R1已经知道了R2的RID和neighbourID</li>
</ul>
<p><img src="https://i.imgur.com/tlF4oEU.png"></p>
<p>R1将R2列为邻居</p>
<ul>
<li>R2收到R1的hello message后也知道R1的情况，将R1列为R2的邻居，从init变成2-way</li>
</ul>
<p><img src="https://i.imgur.com/pOTGjQe.png"></p>
<p>DR’s and BDR’s 不再PtP中选出。</p>
<ul>
<li>选择DR和BDR</li>
</ul>
<blockquote>
<p>选择基于最高的OSPF priority, priority默认为1.</p>
<p>如果优先级相等，则通过RID来进行选择DR&#x2F;BDR，RID越高则是DR。</p>
<p><strong>路由器只会与DR或BDR成为邻居</strong></p>
<p><strong>2-way的邻居状态意味着他们都发送和接受彼此的hello，但之间并不交换路由信息。</strong></p>
</blockquote>
<ul>
<li>进入2-way之后就要交换路由器的LSDB了。</li>
</ul>
<p><img src="https://i.imgur.com/E1FA4rA.png"></p>
<p><strong>PtP link</strong></p>
<p>进入2-way状态，准备交换LSDB，<strong>必须选择一个路由器将启动交换，这个是在Exstart state下完成的</strong></p>
<p><strong>Exstart state</strong></p>
<p>根据RID选择Master或Slave，高RID的将会成为Master并启动进程并控制序列号。</p>
<h3 id="Exchange-Database-Information"><a href="#Exchange-Database-Information" class="headerlink" title="Exchange Database Information"></a>Exchange Database Information</h3><ul>
<li>选完Master和slave后进入Exchange状态</li>
</ul>
<p><img src="https://i.imgur.com/ksPQv5V.png"></p>
<p>路由器开始相互发送LSA列表，这个过程叫做DBD(Database description)</p>
<ul>
<li>交换完LSA后进入loading</li>
</ul>
<p><img src="https://i.imgur.com/pn9P1ZH.png"></p>
<p><img src="https://i.imgur.com/o8a8tDe.png"></p>
<p>每个路由器将检查DBD，并请求任何如果它没有的信息（相当于updata）</p>
<p>通过路由器请求信息不仅仅是发送更新来防止循环。</p>
<ul>
<li>假如R2 有R1没有的信息，如有一个192.168.3.0，R1没有</li>
</ul>
<p><img src="https://i.imgur.com/FURH0VL.png"></p>
<p>在LSR(Link State Request)中R1请求LSA(Link State Advertisement )</p>
<ul>
<li>R2回复并发送更新LSU</li>
</ul>
<p><img src="https://i.imgur.com/2Jj7RNB.png"></p>
<p>LSU- link State Update, R2向R1发送更新。</p>
<ul>
<li>R1向R2 发送一个ACK</li>
</ul>
<p><img src="https://i.imgur.com/r8VHhs2.png"></p>
<p>LSAck- link state Ack</p>
<ul>
<li>R2也想要R1的DBD，重复以上过程</li>
</ul>
<p><img src="https://i.imgur.com/Rl1dt16.png"></p>
<p>当然R2也会想要R1的192.168.1.0,所以重复以上过程。</p>
<h3 id="Full"><a href="#Full" class="headerlink" title="Full"></a>Full</h3><ul>
<li>当信息全部交换完成便变成full 状态</li>
</ul>
<p><img src="https://i.imgur.com/VpYjPJu.png"></p>
<ul>
<li><p>In the full state, the routers have full OSPF adjacency and identical LSDB’s.</p>
<blockquote>
<p>在完全状态下，路由器具有完整的OSPF邻接性和相同的LSDB。</p>
</blockquote>
</li>
<li><p>They will continue to send and listen for Hello packets (every 10 seconds by default on an Ethernet interface, 30 sec on serial links) to maintain the neighbour adjacency</p>
<blockquote>
<p>他们将继续发送和收听Hello数据包（默认情况下在以太网接口上每10秒，在串行链路上每30秒），以保持邻居邻接</p>
</blockquote>
</li>
<li><p>Every time a hello packet is received the dead timer (40 seconds by default) is reset back to 40 sec.</p>
<blockquote>
<p>每次收到hello数据包时，死计时器（默认情况下为40秒）都会重置为40秒。</p>
</blockquote>
</li>
<li><p>If the Dead timer counts down to 0 and NO Hello message is received, the neighbour is removed.</p>
<blockquote>
<p>如果死计时器倒计时到0，并且没有收到Hello消息，则邻居将被删除。</p>
</blockquote>
</li>
<li><p>The routers will continue to send LSA’s as the network changes to ensure each router has a complete and accurate map of the network (LSDB)</p>
<blockquote>
<p>随着网络的变化，路由器将继续发送LSA，以确保每个路由器都有完整准确的网络地图（LSDB）</p>
</blockquote>
</li>
</ul>
<h1 id="Cisco-command"><a href="#Cisco-command" class="headerlink" title="Cisco command"></a>Cisco command</h1><h3 id="Change-reference-Bandwidth"><a href="#Change-reference-Bandwidth" class="headerlink" title="Change reference Bandwidth"></a>Change reference Bandwidth</h3><p><img src="https://i.imgur.com/ORFZ4w1.png"></p>
<blockquote>
<p><code>auto-cost reference-bandwidth 1000</code></p>
</blockquote>
<p><img src="https://i.imgur.com/2bGbH6K.png"></p>
<h2 id="Neighbour-relationship"><a href="#Neighbour-relationship" class="headerlink" title="Neighbour relationship"></a>Neighbour relationship</h2><ul>
<li>Command of ospf</li>
</ul>
<blockquote>
<p><code>sh ip ospf int brief</code>告诉我自己的信息</p>
<p><code>sh ip ospf neighbors</code>告诉我邻居的信息</p>
</blockquote>
<p><img src="https://i.imgur.com/7vprtyF.png"></p>
<p><img src="https://i.imgur.com/8iCfpmR.png"></p>
<p><img src="https://i.imgur.com/vkeHE2Y.png"></p>
<p><strong>死亡计时器从40s开始倒计时，收到hello message则重置。</strong></p>
<h2 id="Full-state"><a href="#Full-state" class="headerlink" title="Full state"></a>Full state</h2><p><img src="https://i.imgur.com/VYpgnx2.png"></p>
<h2 id="Example-of-cisco"><a href="#Example-of-cisco" class="headerlink" title="Example of cisco"></a>Example of cisco</h2><p><img src="https://i.imgur.com/5IrpzH9.png"></p>
<p><img src="https://i.imgur.com/iOTWOAt.png"></p>
<p><img src="https://i.imgur.com/ouWQOuy.png"></p>
<p><img src="https://i.imgur.com/6geVceN.png"></p>
<p><img src="https://i.imgur.com/a0ayjom.png"></p>
<h1 id="OSPF-Area"><a href="#OSPF-Area" class="headerlink" title="OSPF Area"></a>OSPF Area</h1><p><img src="https://i.imgur.com/iiaW37E.png"></p>
<p><img src="https://i.imgur.com/Z1NlpAF.png" alt="Internal Routers"></p>
<p><img src="https://i.imgur.com/QCCj8k9.png" alt="Area Border Router"></p>
<p><img src="https://i.imgur.com/aCblLMp.png" alt="Backbone Routers"></p>
<p><img src="https://i.imgur.com/bqbKSPU.png" alt="intra-area route"></p>
<p><img src="https://i.imgur.com/v1ezOXY.png" alt="interatea route"></p>
<p><img src="https://i.imgur.com/hevNIFY.png" alt="Autonomous system boundary router"></p>
]]></content>
      <categories>
        <category>计算机网络学习博客</category>
      </categories>
      <tags>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux CLI</title>
    <url>/2023/01/20/Linux-CLI/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MobileNet</title>
    <url>/2023/01/30/CNN%20project/MobileNet/</url>
    <content><![CDATA[<h1 id="Handout"><a href="#Handout" class="headerlink" title="Handout"></a>Handout</h1><p><a href="https://colab.research.google.com/drive/1lEaVa9ytsXUaDaUoPWkUydHJs5MCtEae?usp=sharing">colab 1</a></p>
<p><a href="https://colab.research.google.com/drive/1CqU_IOlERnHHT84kwtr6zpZqIoexBbKc?usp=sharing">colab 2</a></p>
<p><a href="https://arxiv.org/abs/1704.04861">MobileNet thesis</a> - I’m not really understand the thesis.</p>
<p><a href="https://keras.io/api/applications/mobilenet/">keras Library of mobileNet</a></p>
<p><a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2_detection_zoo.md">example of tensorflow2.0</a> - which include a lot example model.</p>
<p><a href="https://github.com/google-coral/examples-camera">coral accelerator</a> - if we need to use model on coral, then we need to change the <strong>format that tflite to edgetpu.tflite</strong></p>
<p><a href="https://playground.tensorflow.org/#activation=relu&batchSize=10&dataset=circle&regDataset=reg-plane&learningRate=0.03&regularizationRate=0&noise=0&networkShape=4,2&seed=0.57608&showTestData=false&discretize=false&percTrainData=50&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification&initZero=false&hideText=false">tensorflow playground</a></p>
<p><a href="https://keras.io/api/optimizers/">the optimizer of Keras</a> if you have use keras lib, you can change the keras hyperparameter by this guide.</p>
<h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>coral with RPi compara RPI</p>
<p><a href="https://github.com/JessyHHH/JessyHHH.github.io/blob/main/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/Presentation.pptx">My presentation</a></p>
]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>Tensorflow2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>optimize for model</title>
    <url>/2023/01/30/CNN%20project/optimize-for-model/</url>
    <content><![CDATA[<h1 id="HandOut"><a href="#HandOut" class="headerlink" title="HandOut"></a>HandOut</h1><p><a href="https://colab.research.google.com/drive/1lEaVa9ytsXUaDaUoPWkUydHJs5MCtEae">fruit image classification model</a></p>
<p><a href="https://colab.research.google.com/drive/1AqSvKwfaom2rLnPpSWrFJhnFCPg4iyxN">object detection model</a></p>
<p><a href="https://playground.tensorflow.org/#activation=relu&batchSize=10&dataset=circle&regDataset=reg-plane&learningRate=0.03&regularizationRate=0&noise=0&networkShape=4,2&seed=0.57608&showTestData=false&discretize=false&percTrainData=50&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification&initZero=false&hideText=false">palyGround</a></p>
<p><a href="https://github.com/EdjeElectronics/TensorFlow-Lite-Object-Detection-on-Android-and-Raspberry-Pi">youtube - GitHub - tputflite </a></p>
<p><a href="https://github.com/google-research/tuning_playbook">optimize book</a></p>
<p><a href="https://www.youtube.com/watch?v=hfMk-kjRv4c">optimize - youtube</a></p>
<p><a href="https://blog.roboflow.com/mean-average-precision/">about mAP blog</a></p>
<h1 id="Analysis-Hyparameter"><a href="#Analysis-Hyparameter" class="headerlink" title="Analysis Hyparameter"></a>Analysis Hyparameter</h1><p>根据初学者而言，训练卷积神经模型可以很简单也可以很复杂，简单是只要把参数代进去就好，而困难的是该如何调整这些参数到合适的位置，我将会分享我的学习内容并教您该如何优化自己的模型。</p>
<ol>
<li>Model: SSD with Mobilenet v2 FPN-lite</li>
<li>training playform: colab</li>
<li>Type: object detection model</li>
</ol>
<p>以上是我使用的模型并训练模型的平台。</p>
<h2 id="Batch-size"><a href="#Batch-size" class="headerlink" title="Batch size"></a>Batch size</h2><p>什么是Batch size 呢？</p>
<p>假设你有一个模型需要训练1000张图片，那一次性训练完1000张效率太慢了。所以我们可以分成一组10张，同时训练100组，这样效率就会快很多，而这个组里面到底应该设置多少张才能提高训练速度，并且提高准确率呢。</p>
<ol>
<li>首先我们需要知道batch size 会影响什么，它会影响你的加速器的响应速度，以及准确率，那么影响的原因是什么呢？</li>
</ol>
<p>由于加速器的内存不高，所以处理的图像不多：</p>
<p>例如一个小组内有32个人，但是这个汽车只能搭载16个人，所以剩下16个人不能上车，这就大大减少了效率，同时浪费了资源，原因是汽车是单程的。所以我们只需要设置一个小组只有16个人就好。太少人的话效率也太少，所以也可以设置尽量接近16个人每一组。</p>
<p>结论而言就是批量大小会直接影响验证集的性能。</p>
<ol start="2">
<li>我们无法通过计算来解决模型到底需要多大的batch size来得到最快的训练速度和最好的准确率。</li>
</ol>
<p>我们已经知道了这个batch size不能太大也不能太小，我们总得有个临界点吧，所以我们可以训练小一些的数据来得到这个结果。</p>
<p>下面是我的常量和变量</p>
<ol>
<li>总步数&#x3D;1000步</li>
<li>变量 batch size</li>
</ol>
<p>在训练之前可以通过<a href="https://playground.tensorflow.org/#activation=relu&batchSize=10&dataset=circle&regDataset=reg-plane&learningRate=0.03&regularizationRate=0&noise=0&networkShape=4,2&seed=0.57608&showTestData=false&discretize=false&percTrainData=50&x=true&y=true&xTimesY=false&xSquared=false&ySquared=false&cosX=false&sinX=false&cosY=false&sinY=false&collectStats=false&problem=classification&initZero=false&hideText=false">palyGround</a> 这个网站来知道步数超过临界点会发生什么。</p>
<p>我的<a href="https://www.kaggle.com/datasets/mbkinaci/fruit-images-for-object-detection">dataset</a>一共300张图片，训练240张，30张来验证，30张来测试。</p>
<h3 id="第一次测试-batch-size-x3D-16"><a href="#第一次测试-batch-size-x3D-16" class="headerlink" title="第一次测试 batch_size &#x3D;16"></a>第一次测试 batch_size &#x3D;16</h3><p>Num_step &#x3D; 1000</p>
<p>batch size &#x3D; 16</p>
<p>Epochs &#x3D; 1</p>
<img src="https://i.imgur.com/MTbc4Ik.png" alt="optimizer" style="zoom: 50%;" />

<p>average per step &#x3D; 0.325 s </p>
<p>spend 7 min37 second </p>
<img src="https://i.imgur.com/Vr7SxPy.png" alt="classification_loss" style="zoom:50%;" />

<img src="https://i.imgur.com/knySTOT.png" alt="localization_loss" style="zoom: 40%;" />

<img src="https://i.imgur.com/eSYa7id.png" alt="regularization_loss" style="zoom: 40%;" />

<img src="https://i.imgur.com/aFNvZF1.png" alt="total_loss" style="zoom:40%;" />

<img src="https://i.imgur.com/fOEcyL1.png" alt="Learning_rate" style="zoom:40%;" />

<img src="https://i.imgur.com/hDlZI25.png" alt="step_per_sec" style="zoom:40%;" />

<img src="https://i.imgur.com/47IMRBx.png" alt="map_test" style="zoom: 50%;" />

<h3 id="第二次测试-batch-size-x3D-17"><a href="#第二次测试-batch-size-x3D-17" class="headerlink" title="第二次测试 batch_size &#x3D;17"></a>第二次测试 batch_size &#x3D;17</h3><p><img src="https://i.imgur.com/L6XYnkn.png" alt="optimizer"></p>
<p>batch size &#x3D; 17</p>
<p>spend time 9min25second</p>
<p><img src="https://i.imgur.com/lblC1Qm.png" alt="loss_classification"></p>
<p><img src="https://i.imgur.com/keeI1U8.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/fsmfyZq.png" alt="regularzation_loss"></p>
<p><img src="https://i.imgur.com/ZjoXTDA.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/nbjItvS.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/NDOPcim.png" alt="step_per_sec"></p>
<p><img src="https://i.imgur.com/XM2d9HL.png"></p>
<h3 id="第三次测试-batch-size-x3D-15"><a href="#第三次测试-batch-size-x3D-15" class="headerlink" title="第三次测试 batch_size&#x3D;15"></a>第三次测试 batch_size&#x3D;15</h3><p>Batch_size &#x3D; 15</p>
<p>Spend time &#x3D; 7min 18 second</p>
<p><img src="https://i.imgur.com/5avbXZm.png" alt="optimizer"></p>
<p><img src="https://i.imgur.com/oE3aOt3.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/omSMlvE.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/DQbq5Nt.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/Juzl2nk.png" alt="total loss"></p>
<p><img src="https://i.imgur.com/ChyP8SZ.png" alt="learning rate"></p>
<p><img src="https://i.imgur.com/nC1kFMa.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/DaqioKh.png" alt="map_results"></p>
<h3 id="第四次测试-batch-size-x3D-18"><a href="#第四次测试-batch-size-x3D-18" class="headerlink" title="第四次测试 batch_size &#x3D;18"></a>第四次测试 batch_size &#x3D;18</h3><p>batch_size &#x3D; 18</p>
<p>Num_step &#x3D; 1000</p>
<p>Spend time &#x3D; 8min 1 second</p>
<p><img src="https://i.imgur.com/1y71R9q.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/oOQtONe.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/NTkQp3z.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/VMTT5Mr.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/CE3zJ7B.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/SIvxr4D.png" alt="step_per_sec"></p>
<p><img src="https://i.imgur.com/J7DvwK4.png" alt="mAP results"></p>
<h3 id="第五次测试-batch-size-x3D-14"><a href="#第五次测试-batch-size-x3D-14" class="headerlink" title="第五次测试 batch_size&#x3D;14"></a>第五次测试 batch_size&#x3D;14</h3><p>batch_size &#x3D; 14</p>
<p>Num_step &#x3D; 1000</p>
<p>Spend_time &#x3D; 6min 46 s</p>
<p><img src="https://i.imgur.com/yAKNeVK.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/Z5twKQf.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/MqwCvOs.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/P3Vd82j.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/6b4Ovo6.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/jwh8r8c.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/fVYn27c.png" alt="mAP results"></p>
<h3 id="第六次测试-batch-size-x3D-19"><a href="#第六次测试-batch-size-x3D-19" class="headerlink" title="第六次测试 batch_size &#x3D;19"></a>第六次测试 batch_size &#x3D;19</h3><p>batch size &#x3D; 19</p>
<p>Spend time &#x3D;9min 20 second</p>
<p>Num_step &#x3D; 1000</p>
<p><img src="https://i.imgur.com/t06pRAt.png" alt="loss/classification"></p>
<p><img src="https://i.imgur.com/tNMJKdn.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/2EKZ7oH.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/UV6zWBv.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/SEcFDwJ.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/PvD3F2z.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/e1F8731.png" alt="mAP"></p>
<h3 id="第七次测试-batch-size-x3D-13"><a href="#第七次测试-batch-size-x3D-13" class="headerlink" title="第七次测试 batch_size &#x3D; 13"></a>第七次测试 batch_size &#x3D; 13</h3><p>batch size &#x3D; 13</p>
<p>spend time  &#x3D; 7min 10 sec</p>
<p>Num_step&#x3D;1000</p>
<p><img src="https://i.imgur.com/hZoynW9.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/byroqBm.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/5FBCnkr.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/ukgWk6h.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/IBIkrnP.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/cAKuLsr.png" alt="step_per_sec"></p>
<p><img src="https://i.imgur.com/HNEB44Y.png" alt="map_results"></p>
<h3 id="第八次测试-batch-size-x3D-20"><a href="#第八次测试-batch-size-x3D-20" class="headerlink" title="第八次测试 batch_size &#x3D;20"></a>第八次测试 batch_size &#x3D;20</h3><p>batch_size &#x3D; 20</p>
<p>Spend time &#x3D; 9min30sec</p>
<p><img src="https://i.imgur.com/dCXhhYA.png" alt="Loss/classification_loss"></p>
<p><img src="https://i.imgur.com/v4g0zlj.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/hj7au4M.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/mKt8I2l.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/j5ITbiZ.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/yRme9ct.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/gIcRHCh.png" alt="mAP_results"></p>
<h3 id="第九次测试-batch-size-x3D-12"><a href="#第九次测试-batch-size-x3D-12" class="headerlink" title="第九次测试 batch_size &#x3D; 12"></a>第九次测试 batch_size &#x3D; 12</h3><p>batch_size &#x3D; 12</p>
<p>spend time &#x3D; 6min 14sec</p>
<p><img src="https://i.imgur.com/oKH9crW.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/FWVSptJ.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/Ad4z7SQ.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/BtHBd4T.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/KdVUt9R.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/9AUOxAX.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/8yGbdUF.png" alt="mAp_results"></p>
<h3 id="第十次测试-batch-size-x3D-21"><a href="#第十次测试-batch-size-x3D-21" class="headerlink" title="第十次测试 batch_size&#x3D;21"></a>第十次测试 batch_size&#x3D;21</h3><p>Batch_size &#x3D; 21</p>
<p>Spend time &#x3D; 9min 12 sec</p>
<p><img src="https://i.imgur.com/59sd3Gp.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/I6YqR9H.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/iNY58c2.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/YGsLwy7.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/jatotU8.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/85VKS3H.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/O8HDAAH.png" alt="mAP results"></p>
<h3 id="第十一次测试-batch-size-x3D-22"><a href="#第十一次测试-batch-size-x3D-22" class="headerlink" title="第十一次测试 batch_size &#x3D; 22"></a>第十一次测试 batch_size &#x3D; 22</h3><p>batch _size &#x3D; 22</p>
<p>spend time &#x3D; 9min 26sec</p>
<p><img src="https://i.imgur.com/ESzrOWW.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/IOPWKks.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/oC8Pi48.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/UDKZefW.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/hc28LzT.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/INwU8gn.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/7xocbgR.png" alt="mAP results"></p>
<h3 id="第十二次测试-batch-size-x3D-23"><a href="#第十二次测试-batch-size-x3D-23" class="headerlink" title="第十二次测试 batch_size &#x3D; 23"></a>第十二次测试 batch_size &#x3D; 23</h3><p>Spend time &#x3D; 10.17</p>
<p>Total loss &#x3D; 0.322</p>
<p><img src="https://i.imgur.com/APcSgmr.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/LGbAXPH.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/8cSk4mF.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/rUYTVHA.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/NjWW2I8.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/5Ovx0Q8.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/ZvkXjCC.png" alt="image-20230318143927770"></p>
<h3 id="Batch-size-x3D-24"><a href="#Batch-size-x3D-24" class="headerlink" title="Batch_size &#x3D; 24"></a>Batch_size &#x3D; 24</h3><p>spend time &#x3D; 10.27</p>
<p>Step &#x3D; 1000</p>
<p><img src="https://i.imgur.com/2NeFehk.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/uBJMvXH.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/UBIXkGj.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/oEO99f7.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/yXpQoxr.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/TOCbIka.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/EoAHNit.png" alt="mAP_Results"></p>
<h3 id="Batch-size-x3D-25"><a href="#Batch-size-x3D-25" class="headerlink" title="Batch_size &#x3D; 25"></a>Batch_size &#x3D; 25</h3><p>spend time &#x3D; 10.45</p>
<p><img src="https://i.imgur.com/grhBv8y.png" alt="Loss/classification_loss"></p>
<p><img src="https://i.imgur.com/hZTpmzG.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/8jnWVFT.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/MRTpy5B.png" alt="Loss/total_loss"></p>
<p><img src="https://i.imgur.com/TsULzJA.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/bbFYbIh.png" alt="learning_rate"></p>
<p>![mAP_results](&#x2F;Users&#x2F;jessyhuang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230326175022555.png)</p>
<h3 id="Batch-size-x3D-26"><a href="#Batch-size-x3D-26" class="headerlink" title="Batch_size &#x3D; 26"></a>Batch_size &#x3D; 26</h3><p>spend time &#x3D; 11.36</p>
<p><img src="https://i.imgur.com/fyLWduV.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/5A8iLG8.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/rQV3IYo.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/TD5y4zZ.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/vmctSe0.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/KcjgbNN.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/smQbGtd.png" alt="mAP_results"></p>
<h3 id="Batch-size-x3D-27"><a href="#Batch-size-x3D-27" class="headerlink" title="Batch_size &#x3D; 27"></a>Batch_size &#x3D; 27</h3><p>spend time &#x3D; 11.45</p>
<p><img src="https://i.imgur.com/qk2oQb2.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/IPIVVPp.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/LdBPHIU.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/cYEE5zX.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/COT4A66.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/TyD2xZp.png" alt="steps_per_sec"></p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><table>
<thead>
<tr>
<th>batch_size</th>
<th>Total_loss</th>
<th>spend time</th>
<th>mAP results(have been Converted TFlite)</th>
<th>learning_rate</th>
</tr>
</thead>
<tbody><tr>
<td>12</td>
<td>0.41</td>
<td>6.14</td>
<td>25.73</td>
<td>0.075</td>
</tr>
<tr>
<td>13</td>
<td>0.38</td>
<td>7.1</td>
<td>48.28</td>
<td>0.075</td>
</tr>
<tr>
<td>14</td>
<td>0.355</td>
<td>6.46</td>
<td>42.57</td>
<td>0.075</td>
</tr>
<tr>
<td>15</td>
<td>0.34</td>
<td>7.18</td>
<td>49.62</td>
<td>0.075</td>
</tr>
<tr>
<td>16</td>
<td>0.36</td>
<td>7.37</td>
<td>48.97</td>
<td>0.075</td>
</tr>
<tr>
<td>17</td>
<td>0.348</td>
<td>9.25</td>
<td>51.34</td>
<td>0.075</td>
</tr>
<tr>
<td>18</td>
<td>0.323</td>
<td>8.01</td>
<td>51.16</td>
<td>0.075</td>
</tr>
<tr>
<td>19</td>
<td>0.35</td>
<td>9.2</td>
<td>40.76</td>
<td>0.075</td>
</tr>
<tr>
<td>20</td>
<td>0.34</td>
<td>9.26</td>
<td>33.26</td>
<td>0.075</td>
</tr>
<tr>
<td>21</td>
<td>0.325</td>
<td>9.12</td>
<td>42.33</td>
<td>0.075</td>
</tr>
<tr>
<td><strong>22</strong></td>
<td>0.3</td>
<td>9.26</td>
<td>52.9</td>
<td>0.075</td>
</tr>
<tr>
<td>23</td>
<td>0.322</td>
<td>10.17</td>
<td>46.67</td>
<td>0.075</td>
</tr>
</tbody></table>
<p><img src="https://i.imgur.com/RaYejh9.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/pn2QgZq.png" alt="mAP results"></p>
<p><img src="https://i.imgur.com/khlSdKo.png" alt="spend time"></p>
<h2 id="Learning-rate"><a href="#Learning-rate" class="headerlink" title="Learning_rate"></a>Learning_rate</h2><h3 id="Learning-rate-x3D-0-08-batch-size-x3D-17"><a href="#Learning-rate-x3D-0-08-batch-size-x3D-17" class="headerlink" title="Learning_rate &#x3D;0.08 , batch_size &#x3D; 17"></a>Learning_rate &#x3D;0.08 , batch_size &#x3D; 17</h3><p>Learning_rate_base &#x3D; 0.08</p>
<p>Warmup_learning_rate &#x3D; 0.0266</p>
<p>batch_size &#x3D; 17</p>
<p>Step_number &#x3D; 10000</p>
<p>spend time &#x3D; 59min 17second</p>
<p>Total_loss &#x3D; 0.1537</p>
<p><img src="https://i.imgur.com/S78rcKe.png" alt="classification"></p>
<p><img src="https://i.imgur.com/TOGS2yi.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/dzx6Rmh.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/7PF5EK3.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/nEvGPuD.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/melLQpv.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/2DbOHTp.png" alt="mAP Results"></p>
<h3 id="Learning-rate-x3D-0-08-batch-size-x3D-22"><a href="#Learning-rate-x3D-0-08-batch-size-x3D-22" class="headerlink" title="Learning_rate &#x3D; 0.08 batch_size &#x3D; 22"></a>Learning_rate &#x3D; 0.08 batch_size &#x3D; 22</h3><p> ‘Loss&#x2F;localization_loss’: 0.021741068,</p>
<p> ‘Loss&#x2F;regularization_loss’: 0.09711991, </p>
<p>‘Loss&#x2F;total_loss’: 0.148702,</p>
<p>‘learning_rate’: 0.07352352</p>
<p>![mAP Results](&#x2F;Users&#x2F;jessyhuang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230326193833959.png)</p>
<h3 id="Learning-rate-x3D-0-07-batch-size-x3D-22"><a href="#Learning-rate-x3D-0-07-batch-size-x3D-22" class="headerlink" title="Learning_rate &#x3D; 0.07 batch_size &#x3D; 22"></a>Learning_rate &#x3D; 0.07 batch_size &#x3D; 22</h3><p>Total_step &#x3D; 10000</p>
<p>Total_loss &#x3D; 0.152</p>
<p><img src="https://i.imgur.com/mWc067L.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/Et2sdDq.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/d7EXofw.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/jy5IPgX.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/RNL3sK2.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/2gZM7e0.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/PJpvPE4.png" alt="mAP"></p>
<h3 id="Learning-rate-x3D-0-06-batch-size-x3D-22"><a href="#Learning-rate-x3D-0-06-batch-size-x3D-22" class="headerlink" title="Learning_rate &#x3D; 0.06 ,batch_size &#x3D; 22"></a>Learning_rate &#x3D; 0.06 ,batch_size &#x3D; 22</h3><p>1 hour 19min 26 sec</p>
<p>num_step &#x3D; 10000</p>
<p>Total_loss &#x3D; 0.168</p>
<p><img src="https://i.imgur.com/UcycX9r.png" alt="Loss/classification_loss"></p>
<p><img src="https://i.imgur.com/JrPX2Fa.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/LrKbgDp.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/pEgdEu1.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/tYlTzqT.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/imU6dSy.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/qZdrSZw.png" alt="mAP"></p>
<h3 id="Learning-rate-x3D-0-07-batch-size-x3D-17"><a href="#Learning-rate-x3D-0-07-batch-size-x3D-17" class="headerlink" title="Learning_rate &#x3D; 0.07 batch_size &#x3D; 17"></a>Learning_rate &#x3D; 0.07 batch_size &#x3D; 17</h3><p>1 hour 11 second</p>
<p>10000</p>
<p>Total_loss &#x3D; 0.162</p>
<p><img src="https://i.imgur.com/kcFLXd4.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/xgYXGaV.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/7XiOKw1.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/Y3XR4TF.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/JdZ2jgQ.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/Bfz6OxF.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/p6c1gh0.png" alt="image-20230327003305399"></p>
<h3 id="Learning-rate-x3D-0-06-batch-size-x3D-17"><a href="#Learning-rate-x3D-0-06-batch-size-x3D-17" class="headerlink" title="Learning_rate &#x3D; 0.06 batch_size &#x3D; 17"></a>Learning_rate &#x3D; 0.06 batch_size &#x3D; 17</h3><p>spend time &#x3D; 57 min 16 second</p>
<p>Num_step &#x3D; 10000</p>
<p>Total_loss &#x3D; 0.178</p>
<p><img src="https://i.imgur.com/5uGk8hE.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/Tqu7hHb.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/fh8dG1D.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/0346VsC.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/ikjzIr0.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/OCX8gMW.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/pdnUnbd.png" alt="image-20230327133423079"></p>
<h3 id="Learning-rate-x3D-0-05-batch-size-x3D-22"><a href="#Learning-rate-x3D-0-05-batch-size-x3D-22" class="headerlink" title="Learning_rate &#x3D; 0.05 batch_size &#x3D; 22"></a>Learning_rate &#x3D; 0.05 batch_size &#x3D; 22</h3><p>Num_step &#x3D; 10000</p>
<p>spend time &#x3D; 52 min 42 sec</p>
<p>Total_losss &#x3D; 0.1648</p>
<p><img src="https://i.imgur.com/qDyq445.png" alt="classification_loss"></p>
<p><img src="https://i.imgur.com/1pyX8lL.png" alt="localization_loss"></p>
<p><img src="https://i.imgur.com/Pjd6LEU.png" alt="regularization_loss"></p>
<p><img src="https://i.imgur.com/fG0ed00.png" alt="total_loss"></p>
<p><img src="https://i.imgur.com/kKPpTMv.png" alt="learning_rate"></p>
<p><img src="https://i.imgur.com/g7b51gS.png" alt="steps_per_sec"></p>
<p><img src="https://i.imgur.com/7eJv899.png" alt="mAP Results"></p>
<h2 id="rebegin-for-learning-rate-step-x3D-7000-batch-size"><a href="#rebegin-for-learning-rate-step-x3D-7000-batch-size" class="headerlink" title="rebegin for learning_rate step &#x3D; 7000 batch_size"></a>rebegin for learning_rate step &#x3D; 7000 batch_size</h2><h3 id="Lr-x3D-0-08"><a href="#Lr-x3D-0-08" class="headerlink" title="Lr &#x3D; 0.08"></a>Lr &#x3D; 0.08</h3><p>‘Loss&#x2F;localization_loss’: 0.02736458, </p>
<p>‘Loss&#x2F;regularization_loss’: 0.11061755, </p>
<p>‘Loss&#x2F;total_loss’: 0.1774221, </p>
<p>‘learning_rate’: 0.07707667}</p>
<p>spend time. &#x3D;56min 46sec</p>
<p><img src="https://i.imgur.com/x8byUM1.png" alt="image-20230327221507287"></p>
<p>For <strong>quntization</strong></p>
<p><img src="https://i.imgur.com/jQIzoYB.png" alt="image-20230327224724014"></p>
<h3 id="Lr-x3D-1-0"><a href="#Lr-x3D-1-0" class="headerlink" title="Lr &#x3D; 1.0"></a>Lr &#x3D; 1.0</h3><p>batch_size &#x3D; 22</p>
<p>step &#x3D; 7000</p>
<p>spend time &#x3D; 54min40sec</p>
<p>‘Loss&#x2F;localization_loss’: 0.036090124,</p>
<p> ‘Loss&#x2F;regularization_loss’: 0.096989244, </p>
<p>‘Loss&#x2F;total_loss’: 0.19243404, </p>
<p>‘learning_rate’: 0.9634584}</p>
<p><img src="https://i.imgur.com/q54O8wX.png" alt="image-20230327195925051"></p>
<p><img src="https://i.imgur.com/YJWxrfH.png" alt="image-20230327195942901"></p>
<p><img src="https://i.imgur.com/PPeKePj.png" alt="image-20230327200002662"></p>
<p><img src="https://i.imgur.com/7jbxt9M.png" alt="image-20230327200024957"></p>
<p><img src="https://i.imgur.com/fZkfRlr.png" alt="image-20230327200058669"></p>
<p><img src="https://i.imgur.com/CNjbJ1M.png" alt="image-20230327200114014"></p>
<p>![image-20230327224808384](&#x2F;Users&#x2F;jessyhuang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230327224808384.png)</p>
<p>for quntization</p>
<p><img src="https://i.imgur.com/NJpmXBa.png" alt="image-20230327225754382"></p>
<h3 id="Lr-x3D-1-2"><a href="#Lr-x3D-1-2" class="headerlink" title="Lr &#x3D; 1.2"></a>Lr &#x3D; 1.2</h3><p>Batch_size &#x3D; 22</p>
<p>spend time &#x3D; 57min.27 sec</p>
<p>Total_loss &#x3D; 0.243</p>
<p><img src="https://i.imgur.com/WkzK9h1.png" alt="image-20230327201836483"></p>
<p><img src="https://i.imgur.com/9TQxAzj.png" alt="image-20230327201850340"></p>
<p><img src="https://i.imgur.com/1imq41d.png" alt="image-20230327201903936"></p>
<p><img src="https://i.imgur.com/EKcVHap.png" alt="image-20230327201947753"></p>
<p><img src="https://i.imgur.com/DYRyycL.png" alt="image-20230327202004567"></p>
<h3 id="Lr-x3D-0-14"><a href="#Lr-x3D-0-14" class="headerlink" title="Lr &#x3D; 0.14"></a>Lr &#x3D; 0.14</h3>]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>Tensorflow2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>coco dataset的使用方法</title>
    <url>/2023/02/06/CNN%20project/coco-dataset%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><p>我们将使用<a href="https://keras.io/api/applications/mobilenet/#mobilenetv3small-function">Mobilenet 来训练cocodataset</a></p>
</li>
<li><p>使用colab来训练<a href="https://cocodataset.org/#home">coco dataset</a></p>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>Cascodes &amp; Mirrors</title>
    <url>/2023/02/11/Micro%20Electronic/Cascodes-Mirrors/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="Cascode-级联"><a href="#Cascode-级联" class="headerlink" title="Cascode(级联)"></a>Cascode(级联)</h1><h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><h3 id="Cascode-concept"><a href="#Cascode-concept" class="headerlink" title="Cascode concept"></a>Cascode concept</h3><p><img src="https://i.imgur.com/5HbP28B.png" alt="mos and mos cascode"></p>
<p><strong>Reason</strong></p>
<blockquote>
<ul>
<li>Cascodies provides in very high road but it increase circuit size &amp; reduce output voltage headroom.</li>
<li>Cascodies 提供非常高的道路，但它增加了电路尺寸并降低了输出电压余量。</li>
</ul>
</blockquote>
<h3 id="Cascade-and-Cascode"><a href="#Cascade-and-Cascode" class="headerlink" title="Cascade and Cascode"></a>Cascade and Cascode</h3><p><img src="https://i.imgur.com/puZz3nl.png"></p>
<h3 id="Boosted-Output-Impedance"><a href="#Boosted-Output-Impedance" class="headerlink" title="Boosted Output Impedance"></a>Boosted Output Impedance</h3><p><img src="https://i.imgur.com/P8C5S3i.png" alt="Mos and BJT --Rout"></p>
<p><img src="https://i.imgur.com/ytK5M7J.png" alt="by the formule"></p>
<h2 id="BJT-stage"><a href="#BJT-stage" class="headerlink" title="BJT stage"></a>BJT stage</h2><h3 id="Bipolar-Cascode-Stage"><a href="#Bipolar-Cascode-Stage" class="headerlink" title="Bipolar Cascode Stage"></a>Bipolar Cascode Stage</h3><p><img src="https://i.imgur.com/xGMk6xW.png"></p>
<p><img src="https://i.imgur.com/VRh4Igv.png"></p>
<h3 id="Current-sink-I-x2F-V-Feature"><a href="#Current-sink-I-x2F-V-Feature" class="headerlink" title="Current sink I&#x2F;V Feature"></a>Current sink I&#x2F;V Feature</h3><p><img src="https://i.imgur.com/uz41lgM.png"></p>
<h3 id="Maximum-Bipolar-Cascode-Output-Impedance"><a href="#Maximum-Bipolar-Cascode-Output-Impedance" class="headerlink" title="Maximum Bipolar Cascode Output Impedance"></a>Maximum Bipolar Cascode Output Impedance</h3><p><img src="https://i.imgur.com/gIlZTGB.png"></p>
<p><img src="https://i.imgur.com/GXkbVn6.png"></p>
<h3 id="PNP-cascade-stage"><a href="#PNP-cascade-stage" class="headerlink" title="PNP cascade stage"></a>PNP cascade stage</h3><p><img src="https://i.imgur.com/KKTZUzX.png"></p>
<p><img src="https://i.imgur.com/aecdTMN.png"></p>
<p><img src="https://i.imgur.com/UYEKPUR.png"></p>
<h3 id="False-Cascodes（虚假的Cascodes）"><a href="#False-Cascodes（虚假的Cascodes）" class="headerlink" title="False Cascodes（虚假的Cascodes）"></a>False Cascodes（虚假的Cascodes）</h3><p><img src="https://i.imgur.com/jVvt5ef.png"></p>
<blockquote>
<ul>
<li>当Q1发射极和Q2发射极相连时，它不再是一个cascode，因为Q2变成了二极管而不是一个电流源。</li>
</ul>
<p>　</p>
</blockquote>
<h2 id="Mos-stage"><a href="#Mos-stage" class="headerlink" title="Mos stage"></a>Mos stage</h2><h3 id="Mos-Cascode-stage"><a href="#Mos-Cascode-stage" class="headerlink" title="Mos Cascode stage"></a>Mos Cascode stage</h3><p><img src="https://i.imgur.com/Vo2M5Yk.png"></p>
<p><img src="https://i.imgur.com/ruoCxUr.png"></p>
<h3 id="PMOS-Cascode-Stag"><a href="#PMOS-Cascode-Stag" class="headerlink" title="PMOS Cascode Stag"></a>PMOS Cascode Stag</h3><p><img src="https://i.imgur.com/jWko4rC.png"></p>
<p><img src="https://i.imgur.com/4hwtDNX.png"></p>
<h3 id="Example-Parasitic-Resistance"><a href="#Example-Parasitic-Resistance" class="headerlink" title="Example: Parasitic Resistance"></a>Example: Parasitic Resistance</h3><p><img src="https://i.imgur.com/KOJ416I.png"></p>
<blockquote>
<ul>
<li>Rp 将降低输出阻抗，因为它与ro1的平行组合总是低于ro1本身。</li>
</ul>
</blockquote>
<h2 id="Short-Circuit-Transconductance-短电路跨导"><a href="#Short-Circuit-Transconductance-短电路跨导" class="headerlink" title="Short-Circuit Transconductance(短电路跨导)"></a>Short-Circuit Transconductance(短电路跨导)</h2><h3 id="concept"><a href="#concept" class="headerlink" title="concept"></a>concept</h3><p><img src="https://i.imgur.com/keC9iuW.png"></p>
<blockquote>
<ul>
<li>一个电路的短电路跨导衡量的是它的输入电压转换为输出电流的强度。</li>
</ul>
</blockquote>
<h3 id="Transconductance-Example"><a href="#Transconductance-Example" class="headerlink" title="Transconductance Example"></a>Transconductance Example</h3><p><img src="https://i.imgur.com/ryB2qax.png"></p>
<h3 id="Derivation-of-Voltage-Gain"><a href="#Derivation-of-Voltage-Gain" class="headerlink" title="Derivation of Voltage Gain"></a>Derivation of Voltage Gain</h3><p><img src="https://i.imgur.com/eQZkQSB.png"></p>
<blockquote>
<ul>
<li>通过Norton euivalent来代表一个线性电路，Vout 和 Vin的关系可以用Gm 和Rout的乘积 来表示</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/tXWnBXR.png"></p>
<h3 id="Example-Voltage-Gain"><a href="#Example-Voltage-Gain" class="headerlink" title="Example: Voltage Gain"></a>Example: Voltage Gain</h3><p><img src="https://i.imgur.com/t7uTRuJ.png"></p>
<p><img src="https://i.imgur.com/MgLhYsi.png"></p>
<p><img src="https://i.imgur.com/CEZLnJQ.png"></p>
<h2 id="Voltage-Gain"><a href="#Voltage-Gain" class="headerlink" title="Voltage Gain"></a>Voltage Gain</h2><h3 id="Comparison-Between-Bipolar-Cascode-and-CE-Stage"><a href="#Comparison-Between-Bipolar-Cascode-and-CE-Stage" class="headerlink" title="Comparison Between Bipolar Cascode and CE Stage"></a>Comparison Between Bipolar Cascode and CE Stage</h3><p><img src="https://i.imgur.com/6t6RvND.png"></p>
<blockquote>
<ul>
<li>由于双极级联的输出阻抗高于CE级，我们希望电压增益也能更高。</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/QZn6EcS.png"></p>
<h3 id="Voltage-Gain-of-Bipolar-Cascode-Amplifier"><a href="#Voltage-Gain-of-Bipolar-Cascode-Amplifier" class="headerlink" title="Voltage Gain of Bipolar Cascode Amplifier"></a>Voltage Gain of Bipolar Cascode Amplifier</h3><p><img src="https://i.imgur.com/CRHkTEB.png"></p>
<p><img src="https://i.imgur.com/7t8D2Xz.png"></p>
<blockquote>
<ul>
<li>因为ro比1&#x2F;gm大得多，大部份Q1电流Ic 流向连接变成的二极管Q2，使用以前的输出电阻公式很容易计算出来。</li>
</ul>
</blockquote>
<h3 id="Alternate-View-of-Cascode-Amplifer"><a href="#Alternate-View-of-Cascode-Amplifer" class="headerlink" title="Alternate View of Cascode Amplifer"></a>Alternate View of Cascode Amplifer</h3><p><img src="https://i.imgur.com/qQVvGwn.png"></p>
<h2 id="Practical-Cascode-Stage"><a href="#Practical-Cascode-Stage" class="headerlink" title="Practical Cascode Stage"></a>Practical Cascode Stage</h2><h3 id="Practical-Cascode-Stage-1"><a href="#Practical-Cascode-Stage-1" class="headerlink" title="Practical Cascode Stage"></a>Practical Cascode Stage</h3><p><img src="https://i.imgur.com/kfatAkJ.png"></p>
<blockquote>
<ul>
<li>由于任何电流源都是不理想的，输出阻抗会降低。</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/VEUgaIY.png"></p>
<p><img src="https://i.imgur.com/fgeHtX0.png"></p>
<h3 id="Improved-Cascode-Stage"><a href="#Improved-Cascode-Stage" class="headerlink" title="Improved Cascode Stage"></a>Improved Cascode Stage</h3><p><img src="https://i.imgur.com/BuIDLzx.png"></p>
<blockquote>
<ul>
<li>为了保持高输出阻抗，使用了级联(Cascode)PNP电流源</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/FsG35Sd.png"></p>
<p><img src="https://i.imgur.com/2V7GREy.png"></p>
<h3 id="Mos-Cascode-Amplifier"><a href="#Mos-Cascode-Amplifier" class="headerlink" title="Mos Cascode Amplifier"></a>Mos Cascode Amplifier</h3><p><img src="https://i.imgur.com/ozssuJ4.png"></p>
<p><img src="https://i.imgur.com/pRrJBgR.png"></p>
<blockquote>
<ul>
<li>curren source unlimited impedance, so ignore.</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/BlA8w1w.png"></p>
<h3 id="Improved-Mos-Cascode-Amplifier"><a href="#Improved-Mos-Cascode-Amplifier" class="headerlink" title="Improved Mos Cascode Amplifier"></a>Improved Mos Cascode Amplifier</h3><p><img src="https://i.imgur.com/OK605Mj.png"></p>
<blockquote>
<ul>
<li>与BJT类似，Mos的级联放大器也可以通过PMOS级联电流源来改善输出阻抗。</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/puq70S3.png"></p>
<p><img src="https://i.imgur.com/YybsGdK.png"></p>
<h2 id="Temperature-and-Supply-Dependence-of-Bias-Current"><a href="#Temperature-and-Supply-Dependence-of-Bias-Current" class="headerlink" title="Temperature and Supply Dependence of Bias Current"></a>Temperature and Supply Dependence of Bias Current</h2><p><img src="https://i.imgur.com/HVtm3bD.png"></p>
<blockquote>
<ul>
<li>由于Vt,Is,Un and Vth 所有变量都依赖于温度，双极管和MOS都依赖温度和电源。</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/WQXx5nk.png"></p>
<h1 id="Mirror-镜面"><a href="#Mirror-镜面" class="headerlink" title="Mirror(镜面)"></a>Mirror(镜面)</h1><h2 id="Concept-1"><a href="#Concept-1" class="headerlink" title="Concept"></a>Concept</h2><h3 id="Concept-of-Current-Mirror"><a href="#Concept-of-Current-Mirror" class="headerlink" title="Concept of Current Mirror"></a>Concept of Current Mirror</h3><p><img src="https://i.imgur.com/Ercgqri.png"></p>
<blockquote>
<ul>
<li>电流镜的背后的动机是感知来自“黄金电流源”的电流，并将这个“黄金电流”复制到其他地方。</li>
</ul>
</blockquote>
<h3 id="Bipolar-Current-Mirror-Circuitry"><a href="#Bipolar-Current-Mirror-Circuitry" class="headerlink" title="Bipolar Current Mirror Circuitry"></a>Bipolar Current Mirror Circuitry</h3><p><img src="https://i.imgur.com/s2ew3dl.png"></p>
<blockquote>
<p>如果Q1&#x3D;Qref，双极管连接到Qref产生一个输出电压V1，迫使Icopy1 &#x3D; Iref.</p>
</blockquote>
<p><img src="https://i.imgur.com/3gdgjMu.png"></p>
<h3 id="Bad-Current-Mirror"><a href="#Bad-Current-Mirror" class="headerlink" title="Bad Current Mirror"></a>Bad Current Mirror</h3><h4 id="Example1"><a href="#Example1" class="headerlink" title="Example1"></a>Example1</h4><p><img src="https://i.imgur.com/lXh0ve9.png"></p>
<blockquote>
<ul>
<li>如果不把Qref的集电极和基极短路，就不会有基极电流流动的路径， Icopy&#x3D;0。</li>
</ul>
</blockquote>
<h4 id="Example2"><a href="#Example2" class="headerlink" title="Example2"></a>Example2</h4><p><img src="https://i.imgur.com/9ZUaY5h.png"></p>
<blockquote>
<ul>
<li>虽然存在基极电流的路径， 但是这种偏执技术并不比电阻分压器好。</li>
</ul>
</blockquote>
<h2 id="Multiple-Copies-of-Iref"><a href="#Multiple-Copies-of-Iref" class="headerlink" title="Multiple Copies of Iref"></a>Multiple Copies of Iref</h2><h3 id="Multiple-Copies-of-Iref-1"><a href="#Multiple-Copies-of-Iref-1" class="headerlink" title="Multiple Copies of Iref"></a>Multiple Copies of Iref</h3><p><img src="https://i.imgur.com/Py6Do5m.png"></p>
<blockquote>
<ul>
<li>通过简单的将电流镜像的理念应用于更多晶体管，可以在不同的位置产生多个Iref的副本。</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/dOTl6eC.png"></p>
<h3 id="Current-Scaling"><a href="#Current-Scaling" class="headerlink" title="Current Scaling"></a>Current Scaling</h3><p><img src="https://i.imgur.com/283vIka.png"></p>
<blockquote>
<ul>
<li>通过将Qj的发射极面积相对于Qref放大n倍，Icopyj也相对于Iref增大n倍，这相当于n个单位大小的晶体管并联起来。</li>
</ul>
</blockquote>
<h3 id="Example-Sacled-Current"><a href="#Example-Sacled-Current" class="headerlink" title="Example: Sacled Current"></a>Example: Sacled Current</h3><p><img src="https://i.imgur.com/35BQaD2.png"></p>
<p><img src="https://i.imgur.com/guTYANq.png"></p>
<h3 id="Fractional-Scaling"><a href="#Fractional-Scaling" class="headerlink" title="Fractional Scaling"></a>Fractional Scaling</h3><p><img src="https://i.imgur.com/GpiuhO8.png"></p>
<blockquote>
<ul>
<li>通过扩大Qref发射集的面积，可以在Q1上创建Iref的分量。</li>
</ul>
</blockquote>
<h3 id="Example-Different-Mirroring-Ratio"><a href="#Example-Different-Mirroring-Ratio" class="headerlink" title="Example: Different Mirroring Ratio"></a>Example: Different Mirroring Ratio</h3><p><img src="https://i.imgur.com/NBt2LZ6.png"></p>
<blockquote>
<ul>
<li>利用电流比例和分数比例的概念，Icopy1是0.05mA(1&#x2F;4 * 0.2mA) ,I coyp2 &#x3D; 1&#x2F;4 * 0.2 *10 &#x3D;0.5mA. 都来一个0.2的源。</li>
</ul>
</blockquote>
<h2 id="Mirror-with-Base-Currents"><a href="#Mirror-with-Base-Currents" class="headerlink" title="Mirror with Base Currents"></a>Mirror with Base Currents</h2><h3 id="Mirroring-Error-Due-to-Base-Currents"><a href="#Mirroring-Error-Due-to-Base-Currents" class="headerlink" title="Mirroring Error Due to Base Currents"></a>Mirroring Error Due to Base Currents</h3><p><img src="https://i.imgur.com/sqbOvmY.png"></p>
<p><img src="https://i.imgur.com/hwK9HCA.png"></p>
<p><img src="https://i.imgur.com/9h9tshx.png"></p>
<h3 id="Improved-Mirroring-Accuracy"><a href="#Improved-Mirroring-Accuracy" class="headerlink" title="Improved Mirroring Accuracy"></a>Improved Mirroring Accuracy</h3><p><img src="https://i.imgur.com/yltYu05.png"></p>
<blockquote>
<ul>
<li>由于QF的存在，Qref和Q1的基极电流主要由Qf来提供而不是Iref，镜象误差减少了beta倍。</li>
</ul>
</blockquote>
<h3 id="Example-different-Mirroring-Ratio-Accuracy"><a href="#Example-different-Mirroring-Ratio-Accuracy" class="headerlink" title="Example: different Mirroring Ratio Accuracy"></a>Example: different Mirroring Ratio Accuracy</h3><p><img src="https://i.imgur.com/BzRNuor.png"></p>
<p><img src="https://i.imgur.com/7ZYdcAO.png"></p>
<h3 id="PNP-Current-Mirror"><a href="#PNP-Current-Mirror" class="headerlink" title="PNP Current Mirror"></a>PNP Current Mirror</h3><p><img src="https://i.imgur.com/gKFEReS.png"></p>
<blockquote>
<ul>
<li>PNP 电流镜被用于NPN放大器级的电流源的负载。</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/IR138Bi.png"></p>
<h3 id="Generation-of-Iref-for-PNP-Current-Mirror"><a href="#Generation-of-Iref-for-PNP-Current-Mirror" class="headerlink" title="Generation of Iref for PNP Current Mirror"></a>Generation of Iref for PNP Current Mirror</h3><p><img src="https://i.imgur.com/kzGiTwm.png"></p>
<blockquote>
<p>Note:</p>
<ul>
<li>Diode-connection always B-&gt;C of ref</li>
<li>Ref device is where i&#x2F;p source is located.</li>
<li>E of PNP is uppermost relative to B.</li>
</ul>
</blockquote>
<h3 id="Example-Current-Mirror-with-Discrete-Devices"><a href="#Example-Current-Mirror-with-Discrete-Devices" class="headerlink" title="Example: Current Mirror with Discrete Devices"></a>Example: Current Mirror with Discrete Devices</h3><p><img src="https://i.imgur.com/hyBw6q3.png"></p>
<blockquote>
<ul>
<li>让Qref和Q1 称为离散的NPN器件， Iref 和Icopy1由于与Is不匹配， 可以有很大的幅度变化。</li>
</ul>
</blockquote>
<h3 id="Mos-Current-Mirror"><a href="#Mos-Current-Mirror" class="headerlink" title="Mos Current Mirror"></a>Mos Current Mirror</h3><p><img src="https://i.imgur.com/tBr63cu.png"></p>
<blockquote>
<ul>
<li>相同电流镜概念同样适用与MOS晶体管。</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/OiAuIVC.png"></p>
<h3 id="Bad-Mos-Current-Mirror-Example"><a href="#Bad-Mos-Current-Mirror-Example" class="headerlink" title="Bad Mos Current Mirror Example"></a>Bad Mos Current Mirror Example</h3><p><img src="https://i.imgur.com/imnPQmk.png"></p>
<blockquote>
<ul>
<li>这不是一个电流镜，因为Vx和Iref之间的关系没有明确定义。</li>
<li>用Iref明确定义Vx的唯一方法是使用二极管连接的MOS，因为它提供平方率I-V关系。</li>
</ul>
</blockquote>
<h3 id="Example-Current-Scaling"><a href="#Example-Current-Scaling" class="headerlink" title="Example: Current Scaling"></a>Example: Current Scaling</h3><p><img src="https://i.imgur.com/i7shNQT.png"></p>
<blockquote>
<ul>
<li>与BJT的类似，Mos电流源Iref也可以向上或向下(I1&#x3D;0.2 mA, I2 &#x3D; 0.5mA)</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/LFnfMGy.png"></p>
<h3 id="Cmos-Current-Mirror"><a href="#Cmos-Current-Mirror" class="headerlink" title="Cmos Current Mirror"></a>Cmos Current Mirror</h3><p><img src="https://i.imgur.com/vZg6iVN.png"></p>
<h2 id="Exercise-and-Homework"><a href="#Exercise-and-Homework" class="headerlink" title="Exercise and Homework"></a>Exercise and Homework</h2><p><img src="https://i.imgur.com/q71iqTk.png"></p>
<h3 id="Ex"><a href="#Ex" class="headerlink" title="Ex"></a>Ex</h3><p><img src="https://i.imgur.com/JhRW7xy.png"></p>
<p><img src="https://i.imgur.com/6u9P9Mv.png"></p>
<h3 id="HW1"><a href="#HW1" class="headerlink" title="HW1"></a>HW1</h3>]]></content>
      <categories>
        <category>微电子电路</category>
      </categories>
      <tags>
        <tag>Micro_system</tag>
      </tags>
  </entry>
  <entry>
    <title>classification and objet detection model</title>
    <url>/2023/02/28/CNN%20project/classification-and-objet-detection-model/</url>
    <content><![CDATA[<h1 id="什么是图像分类和目标检测"><a href="#什么是图像分类和目标检测" class="headerlink" title="什么是图像分类和目标检测"></a>什么是图像分类和目标检测</h1><ul>
<li>图像分类</li>
<li>目标检测</li>
<li>图像分割</li>
</ul>
<p>图像分类和目标检测的区别是什么呢</p>
<p>图像检测更意味着一张照片它代表着什么</p>
<p>如下图，</p>
<p>我们可以用肉眼可以看到这张图片里有一个香蕉。</p>
<p><img src="https://i.imgur.com/7Scbv0V.jpg" alt="一根香蕉"></p>
<p>所以在图像分类里就认为这张图片里有一根香蕉</p>
<p>那再看下图</p>
<img src="https://i.imgur.com/N9RV1Sv.jpg" alt="香蕉和苹果" style="zoom:50%;" />

<p>如果这里有苹果和香蕉，图像分类该如何分呢，当然是分不了的，所以需要图像分割来区别苹果和香蕉。</p>
<p>当然另一种方法是使用目标检测，目标检测可以直接分类一个图像里有什么水果，更加方便快捷。</p>
]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>分析Keras使用方法</title>
    <url>/2023/02/28/CNN%20project/Optimizer/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h1><h2 id="Learning-rate"><a href="#Learning-rate" class="headerlink" title="Learning rate"></a>Learning rate</h2><p>How do we adjust this parameter, this value is on 0 -1, we need to find a balance value for that, which can more quickly to find <strong>Neigung</strong>&#x3D;0.</p>
<p>can’t be too low or too high</p>
]]></content>
      <categories>
        <category>项目研究博客</category>
      </categories>
      <tags>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>Differential Amplifier</title>
    <url>/2023/04/24/Micro%20Electronic/Differential-Amplifier/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="Differentia-Amplifier-差分放大器"><a href="#Differentia-Amplifier-差分放大器" class="headerlink" title="Differentia-Amplifier 差分放大器"></a>Differentia-Amplifier 差分放大器</h1><h2 id="General-Consideration"><a href="#General-Consideration" class="headerlink" title="General Consideration"></a>General Consideration</h2><h3 id="What-is-differential-Amplifier"><a href="#What-is-differential-Amplifier" class="headerlink" title="What is differential-Amplifier"></a>What is differential-Amplifier</h3><p>快速了解什么是差分放大器</p>
<p>既然是放大器那肯定就跟之前一样是将一个电流或者电压放大，关键在于(Differential)差分是如何放大的.</p>
<p>首先信号通过放大器会放大，如音频放大器</p>
<p><img src="https://i.imgur.com/BGoQ3j0.png" alt="Audio Amplifier Example"></p>
<p>我们可以如上图所示，电压放大后，有着巨大的噪音，根本听不清楚，嗡嗡的。</p>
<p>消除它们的话可以如下图所示，使用supply Ripple rejection，中文应该叫供应纹波抑制。</p>
<p><img src="https://i.imgur.com/MKnnlx8.png" alt="Supple Ripple rejection"></p>
<p>刷图可以看到经过两个mos才输出，而且还是在base上输出，它的结果是什么呢</p>
<p>我们可以看到右边的公式，它通过Vx的和Vy的差分得到最后的增益，由于这两个波纹正好相对，所以会消除成没有波纹，但是我们光得到增益不行，一首歌不可能只有一个调调吧，随着波的增大，我们还要知道它原本的信号形状。</p>
<p>如果公用一个信号的话，整个增益就是零了，如下图所示，差分信号公用一个信号源。</p>
<p><img src="https://i.imgur.com/Hwtfa9r.png" alt="Common Inputs to Differential Ammplifer"></p>
<p>如上图所示两个差分公用一个信号源，所以Av增益为0；既相同相位直接相消除，如下图。</p>
<p><img src="https://i.imgur.com/BvWxMml.png" alt="相同波形相消"></p>
<p>但如果我们相位相反则会怎么样呢，如下图电路所示</p>
<p><img src="https://i.imgur.com/xMYAjBn.png" alt="相位相反的input"></p>
<p>那么增益会直接增大两倍，但有时候我们只需要正常的增益就行，两倍可能太大，这个后面会谈，总之还不够完美。</p>
<p><img src="https://i.imgur.com/X83ipEf.png" alt="增大两倍"></p>
<p>所以如果不想增益为0，则相位必须为0，(Differential Signal)差分信号的特点是，平均值相同，幅度相同，但是相位相反。(They share the same average value to ground and are equal in magnitude but opposite in phase)</p>
<p>差分信号的产生通常是通过变压器(transformer)来产生。</p>
<p><img src="https://i.imgur.com/eiL32mL.png" alt="Transformer generate differential signals"></p>
<p>单信号输入输出和差分信号对输入输出</p>
<p><img src="https://i.imgur.com/I3NHMht.png" alt="Singal signal"></p>
<p><img src="https://i.imgur.com/SGkPDOV.png" alt="Differential signal"></p>
<p><img src="https://i.imgur.com/oiQEUJy.png" alt="Differential Gain analysis"></p>
<h3 id="Common-mode-and-Differential-mode-gain"><a href="#Common-mode-and-Differential-mode-gain" class="headerlink" title="Common-mode and Differential mode gain"></a>Common-mode and Differential mode gain</h3><p>我们知道了基本原理之后还需要知道一种叫差分对(differential pair)的电路。</p>
<p><img src="https://i.imgur.com/NmFuDM5.png" alt="BJT and MOS differential pair"></p>
<p>可以看到与上面差分电路对区别是加了一个current sorce在中间,一般称为tail current, 它的作用是提供高共模抑制比(High common mode rejection ratio)。</p>
<p>什么是共模抑制比(common mode rejection ratio(CMRR))呢.</p>
<p><strong>它的定义是差模增益(differential-mode gain)与共模增益(common-modee gain)之间的比率，表示放大器准确消除两个输入共有的电压的能力，</strong></p>
<p>公式定义为： </p>
<p><strong>CMRR&#x3D; 20log<sub>10</sub>(Ad&#x2F;|Ac|)</strong></p>
<p>接下来让我们看一下共模响应和差模响应的电路图，后面会学到差模和共模结合一起的电路图就会用到上述公式。</p>
<h4 id="Common-mode-Response-and-Rejection共模响应和抑制"><a href="#Common-mode-Response-and-Rejection共模响应和抑制" class="headerlink" title="Common-mode Response and Rejection共模响应和抑制"></a>Common-mode Response and Rejection共模响应和抑制</h4><p><img src="https://i.imgur.com/YcHxRKn.png" alt="Common-mode response"></p>
<p><img src="https://i.imgur.com/bW0apYu.png" alt="calculate part"></p>
<p><img src="https://i.imgur.com/F19kJxG.png" alt="Common-mode rejection"></p>
<p>如上图的抑制所示，Vcm1 &#x3D; Vcm2 并且因为有tail current source在，在没有改变output common-mode value可以变化input common-mode value.这句话比较难理解，简单的来说由于tail current的原因，抑制会比较强，防止电压到达saturation状态，所以尽管Vcm1 比 Vcm2 大，但是输出的output(Vx &#x3D; Vy)是相等的，也就是说到达了临界点不能再大了。</p>
<h4 id="Differential-Response差分响应"><a href="#Differential-Response差分响应" class="headerlink" title="Differential Response差分响应"></a>Differential Response差分响应</h4><p><img src="https://i.imgur.com/4bwchws.png" alt="Differential response1"></p>
<p><img src="https://i.imgur.com/kTbp76r.png" alt="Calculation part"></p>
<p><img src="https://i.imgur.com/ByUoQEH.png" alt="differential Response 2"></p>
<p><img src="https://i.imgur.com/OHKwG3b.png" alt="Differential respomse2 Calculation part"></p>
<p>总结，当输入不同对电压时，电压高的一边有Iee，另一边则为0，切电压高的一方为positive，根据方向来盘对output的differential mode（DM）的输出是正的还是负的。根据common mode的原理输入的变换不影响输出的值，我们可以看到两个response的common mode output都是相同的，只有differential mode的不同。</p>
<h2 id="Bipolar-Differential-pair"><a href="#Bipolar-Differential-pair" class="headerlink" title="Bipolar Differential pair"></a>Bipolar Differential pair</h2><h3 id="BJT-DM-analysis"><a href="#BJT-DM-analysis" class="headerlink" title="BJT DM analysis"></a>BJT DM analysis</h3><p><img src="https://i.imgur.com/wOD6ZTl.png" alt="Differential pair of characteristics"></p>
<p>这个过程表示非零差分输入会导致输出的电流和电压变化，但是共模输入则不会产生变化。</p>
<p>左边是input， 右边是output。</p>
<p><img src="https://i.imgur.com/mMbeQbJ.png" alt="Small-signal Analysis"></p>
<p><img src="https://i.imgur.com/zk8MLHj.png" alt="handwirte"></p>
<p>由于Q1 and Q2的输入上升和下降幅度相同，而且他们的基极是绑在一起的，所以Ic1的上升与Ic2的下降幅度(magnitude)相同。</p>
<p><img src="https://i.imgur.com/0Z9XrQk.png" alt="Virtual Ground"></p>
<p><img src="https://i.imgur.com/armh0On.png" alt="gm1 and gm2"></p>
<p>因为Ic1和Ic2的上升下降幅度相同，所以节点p必须保持不变以适应这些变化。所以节点p可以被看作AC ground(交流地)</p>
<p><img src="https://i.imgur.com/00p5OQx.png" alt="Small-signal differentil gain"></p>
<p><img src="https://i.imgur.com/DXfKGQn.png" alt="Derivation"></p>
<p><img src="https://i.imgur.com/AvR9b3f.png" alt="大信号分析"></p>
<p><img src="https://i.imgur.com/GrdL8Wu.png" alt="derivation"></p>
<p><img src="https://i.imgur.com/pwCuL58.png" alt="输入和输出图"></p>
<p><img src="https://i.imgur.com/aYzyndR.png" alt="Derivation"></p>
<p><img src="https://i.imgur.com/v6TjSkA.png" alt="Linear / Non-Linear regions"></p>
<p><img src="https://i.imgur.com/b2fYLMc.png" alt="marks"></p>
<p><img src="https://i.imgur.com/hz4eRsh.png" alt="小信号模型"></p>
<p><img src="https://i.imgur.com/OA1Dvm0.png" alt="Q1 and Q2"></p>
<p><img src="https://i.imgur.com/9tMEkpa.png" alt="Derivation"></p>
<h3 id="Half-Circuit"><a href="#Half-Circuit" class="headerlink" title="Half Circuit"></a>Half Circuit</h3><p><img src="https://i.imgur.com/2g3GDIo.png" alt="Half Circuits"></p>
<blockquote>
<p>由于Vp是接地的，我们可以将差分视为两个CE电路“半电路”</p>
</blockquote>
<p><strong>Example</strong></p>
<p><img src="https://i.imgur.com/wl5wTxa.png" alt="Example: Differential Gain"></p>
<p><strong>Half circuit Example</strong></p>
<p><img src="https://i.imgur.com/ICz77rB.png" alt="Half Circuit Example"></p>
<p><img src="https://i.imgur.com/17Fp9tP.png" alt="Half Circuit Example"></p>
<p><img src="https://i.imgur.com/NtYImfW.png" alt="Half-Circuit Example2"></p>
<p><img src="https://i.imgur.com/EzRdac3.png" alt="Half Circuit Example3"></p>
<p><img src="https://i.imgur.com/QiX9756.png" alt="AV"></p>
<blockquote>
<p>RE increase the linearity of the amplifier, it can amplify larger signal at its input, the cost is reduced gain.</p>
<p>RE 增加放大器的线性度，它可以在其输入端放大更大的信号，代价是降低增益。</p>
</blockquote>
<p><img src="https://i.imgur.com/4a8kk3i.png" alt="Half Circuit Example 4"></p>
<p><img src="https://i.imgur.com/x82Weni.png" alt="KVL and Av"></p>
<h2 id="Mos-Differential-pair"><a href="#Mos-Differential-pair" class="headerlink" title="Mos Differential pair"></a>Mos Differential pair</h2><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p><img src="https://i.imgur.com/558kqmC.png" alt="Mos 差分共模响应"></p>
<p><img src="https://i.imgur.com/cq4pVC7.png" alt="image-20230516133350581"></p>
<blockquote>
<p>与双极性对应物类似，Mos差分在对Vcm变化时产生零差分输出。</p>
</blockquote>
<p><img src="https://i.imgur.com/QH6m6C7.png" alt="平衡过载电压"></p>
<blockquote>
<p>平衡过载电压被定义为当M1和M2都携带Iss&#x2F;2时所看到的过载电压。</p>
</blockquote>
<p><img src="https://i.imgur.com/Tw6lFn8.png" alt="Derivation"></p>
<p><img src="https://i.imgur.com/x7ng967.png" alt="最小共模输出电压"></p>
<blockquote>
<ul>
<li>为了让M1 和 M2 保持饱和状态，共模输出电压不能低于上述数值。</li>
<li>这个数值通常限制来电压增益。</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/2zJyhvo.png" alt="derivation"></p>
<p><img src="https://i.imgur.com/OPKcuTE.png" alt="Differential Response"></p>
<p><img src="https://i.imgur.com/gAxJsyY.png" alt="Small-signal Response"></p>
<blockquote>
<p>与它的双极性对应物类似，Mos差分对 表现出相同的虚拟接地节点和小信号增益。</p>
</blockquote>
<h3 id="Effect-about-each-parameters"><a href="#Effect-about-each-parameters" class="headerlink" title="Effect about each parameters"></a>Effect about each parameters</h3><p><img src="https://i.imgur.com/mGu2g1x.png" alt="功率和增益的权衡"></p>
<blockquote>
<p>为了获得像CS那样相同对增益，MOS差分对必须耗散两倍的电流。</p>
</blockquote>
<p><img src="https://i.imgur.com/faMk4jc.png" alt="Mos差分对大信号响应"></p>
<p><img src="https://i.imgur.com/I1bAYSo.png" alt="最大差分输入电压"></p>
<blockquote>
<p>存在一个有限的差分输入电压，可以完全将尾部电流从一个晶体管引导到另一个晶体管，这个值被称为最大差分输入电压。</p>
</blockquote>
<p><img src="https://i.imgur.com/DPJDE6c.png" alt="linear"></p>
<p><img src="https://i.imgur.com/eL7ldoP.png" alt="derivation"></p>
<p><img src="https://i.imgur.com/dwlU1b8.png" alt="MOS 和 BJT差分对的比较"></p>
<blockquote>
<ul>
<li><p>在MOS差分对中存在一个有限的差分输入电压，可以将电流从一个晶体管切换到另一个晶体管。</p>
</li>
<li><p>在双极对中存在一个有限的差分输入电压，双极对的电压是无限的</p>
</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/0zz3ca7.png" alt="尾部电流翻倍对影响"></p>
<blockquote>
<p>由于Iss增加来一倍，而W&#x2F;L保持不变，因此平衡每个晶体管的过载电压必须增加2^-1&#x2F;2（根号2）倍，以适应这一变化，所以 betaVin ,max 也增加根号2倍，此外Iss增加一倍，差分输出摆幅将增加一倍。</p>
</blockquote>
<p><img src="https://i.imgur.com/dukivwV.png" alt="倍增W/L的影响"></p>
<blockquote>
<p>由于W&#x2F;L增加来1倍，而尾部电流保持不变，平衡过载电压将降低根号2来适应这一变化，而 betaVin,max 也降低根号2，此外差分输出的摆幅不变，因为Iss和Rd不变。</p>
</blockquote>
<h3 id="Small-signal-and-half-circuit"><a href="#Small-signal-and-half-circuit" class="headerlink" title="Small-signal and half circuit"></a>Small-signal and half circuit</h3><p><img src="https://i.imgur.com/njTvVOa.png" alt="小信号分析Mos差分对"></p>
<p><img src="https://i.imgur.com/YWsyOCY.png" alt="中文解释"></p>
<p><img src="https://i.imgur.com/4gcXUIl.png" alt="虚拟接地和 half circuit"></p>
<blockquote>
<p><img src="https://i.imgur.com/lQ7HBus.png" alt="中文解释"></p>
</blockquote>
<p><img src="https://i.imgur.com/ZI8o4dN.png" alt="Mos differential Pair half circuit example1"></p>
<p><img src="https://i.imgur.com/jSgS851.png" alt="Example2"></p>
<p><img src="https://i.imgur.com/ZE1oF89.png" alt="example3"></p>
<h2 id="Cascode-Differential-Amplifier"><a href="#Cascode-Differential-Amplifier" class="headerlink" title="Cascode Differential Amplifier"></a>Cascode Differential Amplifier</h2><h3 id="BJT-differential-Pair"><a href="#BJT-differential-Pair" class="headerlink" title="BJT differential Pair"></a>BJT differential Pair</h3><p><img src="https://i.imgur.com/Cu1MJga.png" alt="Cascode Differential pair"></p>
<p><img src="https://i.imgur.com/sxY2MjW.png" alt="Derivation"></p>
<p><img src="https://i.imgur.com/uGSBOlh.png" alt="Telescopic Cascode"></p>
<p><img src="https://i.imgur.com/dHroBYt.png" alt="Av derivation"></p>
<p><img src="https://i.imgur.com/XjJNXMX.png" alt="Telescopic parasitic Resistance"></p>
<p><img src="https://i.imgur.com/DhQ1E8p.png" alt="derivation"></p>
<h3 id="MOS-differential-pair"><a href="#MOS-differential-pair" class="headerlink" title="MOS differential pair"></a>MOS differential pair</h3><p><img src="https://i.imgur.com/iDOyYD2.png" alt="Mos cascode differential pair"></p>
<p><img src="https://i.imgur.com/GYGvmuc.png" alt="derivation"></p>
<p><img src="https://i.imgur.com/qurahZ1.png" alt="Mos telescopic cascode"></p>
<p><img src="https://i.imgur.com/WiwGWOf.png" alt="derivation"></p>
<p><img src="https://i.imgur.com/Zq4yfuk.png" alt="Telescopic parasitic Resistance"></p>
<p><img src="https://i.imgur.com/Rv3On6G.png" alt="Derivation"></p>
<p><strong>Exercise Differential cascade.</strong> </p>
<p><img src="https://i.imgur.com/8v4IWzR.png" alt="Exercise"></p>
<h2 id="Nonidealities"><a href="#Nonidealities" class="headerlink" title="Nonidealities"></a>Nonidealities</h2><p><img src="https://i.imgur.com/v5BFwNb.png" alt="尾部有限阻抗的影响"></p>
<p><img src="https://i.imgur.com/JkMcm77.png" alt="Derivation"></p>
<p><img src="https://i.imgur.com/zFgtOW0.png" alt="具有输入理想尾部电流的CM噪声"></p>
<p><img src="https://i.imgur.com/Ns5TtZH.png" alt="具有非理想尾流的输入CM噪声"></p>
<p><img src="https://i.imgur.com/e8lzXjv.png" alt="比较"></p>
<blockquote>
<p><img src="https://i.imgur.com/YhzKDZI.png" alt="中文解释"></p>
</blockquote>
<p><img src="https://i.imgur.com/1sOAHwx.png" alt="CM to DM的转换"></p>
<blockquote>
<p><img src="https://i.imgur.com/Gs3JtVO.png" alt="中文解释"></p>
</blockquote>
<p><img src="https://i.imgur.com/mTVhwdn.png" alt="derivation"></p>
<h2 id="Differential-Pair-with-Active-Load"><a href="#Differential-Pair-with-Active-Load" class="headerlink" title="Differential Pair with Active Load"></a>Differential Pair with Active Load</h2><p><img src="https://i.imgur.com/qOlRr64.png" alt="Example: Acm-dm"></p>
<p><img src="https://i.imgur.com/5NXSdfW.png" alt="derivation"></p>
<p><img src="https://i.imgur.com/ENQeN5o.png" alt="CMRR"></p>
<blockquote>
<p><img src="https://i.imgur.com/hu4Mi4L.png" alt="中文解释"></p>
</blockquote>
<p><img src="https://i.imgur.com/ypt4vUI.png" alt="Active load"></p>
<p>![image-20230516182157688](&#x2F;Users&#x2F;jessyhuang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230516182157688.png)</p>
<p><img src="https://p.ipic.vip/9308ht.png" alt="Differential pair with active load"></p>
<p><img src="https://p.ipic.vip/w3pz2h.png" alt="中文解释"></p>
<p><img src="https://p.ipic.vip/k56oqh.png" alt="活性负载 vs 静态负载"></p>
<blockquote>
<p><img src="https://p.ipic.vip/pqr08a.png" alt="中文解释"></p>
</blockquote>
<p><img src="https://p.ipic.vip/wwf4qq.png" alt="Asymmetric differential pair"></p>
<blockquote>
<p><img src="https://p.ipic.vip/18chpg.png" alt="中文解释"></p>
</blockquote>
<p><img src="https://p.ipic.vip/vvz9s3.png" alt="输入对的戴维南等价物"></p>
]]></content>
      <categories>
        <category>微电子电路</category>
      </categories>
      <tags>
        <tag>Micro_system</tag>
      </tags>
  </entry>
  <entry>
    <title>Frequency Response</title>
    <url>/2023/05/16/Micro%20Electronic/Frequency-Response/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><img src="https://p.ipic.vip/2lmf0c.png" alt="简单的低通滤波器"></p>
<blockquote>
<p><img src="https://p.ipic.vip/s1fvyp.png" alt="中文角色"></p>
</blockquote>
<p><img src="https://p.ipic.vip/zw0g9a.png" alt="derivation"></p>
<p><img src="https://p.ipic.vip/k0ha13.png" alt="Components and Impedance"></p>
<p><img src="https://p.ipic.vip/k66yqi.png" alt="Common source"></p>
<blockquote>
<p><img src="https://p.ipic.vip/j80tqg.png" alt="中文解释"></p>
</blockquote>
<p><img src="https://p.ipic.vip/01925n.png" alt="Derivation"></p>
<p><img src="https://p.ipic.vip/myrecg.png" alt="CS阶段的频率响应"></p>
<blockquote>
<p><img src="https://p.ipic.vip/5bl9ux.png" alt="中文解释"></p>
</blockquote>
<p><img src="https://p.ipic.vip/6uhyuv.png" alt="例子：功勋奖章"></p>
<blockquote>
<p><img src="https://p.ipic.vip/oz7dqw.png" alt="中文解释"></p>
</blockquote>
<p><img src="https://p.ipic.vip/prnqp5.png" alt="Derivation"></p>
<p>Exercise:</p>
<p><img src="https://p.ipic.vip/afucvn.png" alt="process"></p>
<p><img src="https://p.ipic.vip/va9kus.png" alt="bode plot"></p>
<p><img src="https://p.ipic.vip/8obg7l.png" alt="example"></p>
<p><img src="https://p.ipic.vip/8iqqxl.png" alt="derivation"></p>
<p><img src="https://p.ipic.vip/mnpzpw.png" alt="Example2"></p>
<h1 id="Miller-Theorem"><a href="#Miller-Theorem" class="headerlink" title="Miller Theorem"></a>Miller Theorem</h1><p><img src="https://p.ipic.vip/9a167e.png" alt="Example"></p>
<p><img src="https://p.ipic.vip/a7eyig.png" alt="Derivation on high filter"></p>
<h1 id="CS-amp-CG"><a href="#CS-amp-CG" class="headerlink" title="CS &amp; CG"></a>CS &amp; CG</h1><p><img src="https://p.ipic.vip/uitwun.png" alt="CS"></p>
]]></content>
      <categories>
        <category>微电子电路</category>
      </categories>
      <tags>
        <tag>Micro_system</tag>
      </tags>
  </entry>
  <entry>
    <title>Birmingham University Life talking</title>
    <url>/2024/09/25/Birmingham_Learning/Birmingham-University-Life-talking/</url>
    <content><![CDATA[<h1 id="关于伯明翰大学的学习指南针–不定期更新2024-9-26"><a href="#关于伯明翰大学的学习指南针–不定期更新2024-9-26" class="headerlink" title="关于伯明翰大学的学习指南针–不定期更新2024.9.26"></a>关于伯明翰大学的学习指南针–不定期更新2024.9.26</h1><h2 id="伯明翰校园网Wifi的使用"><a href="#伯明翰校园网Wifi的使用" class="headerlink" title="伯明翰校园网Wifi的使用"></a>伯明翰校园网Wifi的使用</h2><ul>
<li>点进手机里我们可以看到eduroam名称的wifi，点击使用并输入你的用户名和密码即可</li>
</ul>
<p><code>username: ******@student.bham.ac.uk   //只输入@前面的也可以</code> </p>
<p><code>pwd: ********  //学校邮箱的密码</code></p>
<ul>
<li>Linux在Authentication上选择PEAP来使用网络，选择No CA certification.</li>
<li>路由器并未尝试，但是设置网络跟linux差不多，也可以选择使用命令行来登录wifi。</li>
<li>注意Proxy是否正常。</li>
</ul>
<h2 id="学校官方信件的说明（例如成绩单等）"><a href="#学校官方信件的说明（例如成绩单等）" class="headerlink" title="学校官方信件的说明（例如成绩单等）"></a>学校官方信件的说明（例如成绩单等）</h2><p><a href="https://verify.bham.ac.uk/">学校各种信件的网站</a> -此网站已经提供了成绩单和bankletter以及其他各种信件的证明，如若需要可以直接登录下载。</p>
<ul>
<li>成绩单</li>
<li>bankletter</li>
<li>Council tax</li>
<li>Proof of Registration(各种版本)</li>
</ul>
<h2 id="关于银行卡的办理说明"><a href="#关于银行卡的办理说明" class="headerlink" title="关于银行卡的办理说明"></a>关于银行卡的办理说明</h2><p>大部分银行卡是不需要bank letter，但是中国银行和汇丰好像是需要的，尽管很多银行不需要，但还请准备好bankletter以防万一。</p>
<h2 id="UOBapp-和-Canvas-student的使用"><a href="#UOBapp-和-Canvas-student的使用" class="headerlink" title="UOBapp 和 Canvas student的使用"></a>UOBapp 和 Canvas student的使用</h2><p><a href="https://myuob.bham.ac.uk/">UOB-web端</a></p>
<p><a href="https://intranet.birmingham.ac.uk/student/myuob/myuob.aspx">UOB手机端下载</a></p>
<p><a href="https://www.instructure.com/en-gb/canvas/login">Canvas-web端</a></p>
<p>其目的主要是看课程表和课程通知以及学校地图</p>
<ul>
<li>关于课程导入，学校给了我们一个很方便快捷的导入方式。</li>
</ul>
<ol>
<li><img src="https://raw.githubusercontent.com/JessyHHH/GitTraining/master/img/image-20240925220014935.png?token=AZ6XRWOEVZRLV2TB346YJULG6R5BW" alt="随便点击一个课程然后进入 Go to Event" style="zoom:50%;" /></li>
<li><img src="https://raw.githubusercontent.com/JessyHHH/GitTraining/master/img/image-20240925220210852.png?token=AZ6XRWL2UVTVYGO2MSZVKALG6R5I6" alt="然后在我们的右上角有一个交互按钮，Connect Calendar，就在下载的右边"  /></li>
<li><img src="https://raw.githubusercontent.com/JessyHHH/GitTraining/master/img/image-20240925220413830.png?token=AZ6XRWK3HARJAVS5BJTGTODG6R5QU" alt="点击使用outlook web进行生成" style="zoom:50%;" /></li>
<li><img src="https://raw.githubusercontent.com/JessyHHH/GitTraining/master/img/image-20240925220508397.png?token=AZ6XRWJKKPC7MIYHJWM3JH3G6R5UC" alt="当然你可以选择你要几个月还是几个星期的课表，然后Next" style="zoom: 33%;" /></li>
<li><img src="https://raw.githubusercontent.com/JessyHHH/GitTraining/master/img/image-20240925220552228.png?token=AZ6XRWL3GVT7A4G6LQQRAQ3G6R5WY" alt="这里会生成一个链接，接下来我们要去outlook的界面" style="zoom:33%;" /></li>
<li><a href="https://outlook.office.com/calendar/view/month">outlook-web端</a></li>
<li><img src="https://raw.githubusercontent.com/JessyHHH/GitTraining/master/img/image-20240925220842155.png?token=AZ6XRWLRY3W3QRJGNQI3EB3G6R6BO" alt="在左边日历的下面添加日历，然后选择从web订阅并选择之前copy的链接复制粘贴，保存既可" style="zoom:33%;" /></li>
<li>一般手机都会有默认邮箱app，这里按苹果邮箱为例子。<br>在邮箱app里添加Eixchange邮箱，然后将学校的帐号密码输入即可。<br>并在日历里添加我们Exchange邮箱日历。这样我们就可以在苹果手机日历里查看该课程表了。</li>
</ol>
<p>敬请期待！</p>
]]></content>
      <categories>
        <category>Birmingham_talking</category>
      </categories>
      <tags>
        <tag>Birmingham</tag>
      </tags>
  </entry>
</search>
